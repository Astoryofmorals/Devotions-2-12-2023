//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.73;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.73] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x54b1a4=_0x5da4;(function(_0x511727,_0x21e3a7){const _0x1d4a09=_0x5da4,_0x43a240=_0x511727();while(!![]){try{const _0x2da2a4=-parseInt(_0x1d4a09(0xb5f))/0x1+-parseInt(_0x1d4a09(0x443))/0x2+parseInt(_0x1d4a09(0x5e0))/0x3*(parseInt(_0x1d4a09(0x365))/0x4)+-parseInt(_0x1d4a09(0x26e))/0x5*(parseInt(_0x1d4a09(0xd3f))/0x6)+parseInt(_0x1d4a09(0x33e))/0x7+-parseInt(_0x1d4a09(0x61a))/0x8*(-parseInt(_0x1d4a09(0xbdc))/0x9)+parseInt(_0x1d4a09(0xb01))/0xa;if(_0x2da2a4===_0x21e3a7)break;else _0x43a240['push'](_0x43a240['shift']());}catch(_0x457a81){_0x43a240['push'](_0x43a240['shift']());}}}(_0x3233,0x6371a));function _0x3233(){const _0x1aa1a9=['in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','_surprise','createJS','onStaticEnemyBitmapLoad','ActSeq_Inject_AnimationPauseResume','CriticalDuration','oulgj','setWaitMode','setBattlerMotionTrailData','AttachStateOffsetX','ActSeq_Movement_FaceTarget','getHardDamageCap','setMoveEasingType','Parse_Notetags_TraitObjects','isNextScene','AAdrC','gainHp','Scene_Battle_updateBattleProcess','setGuard','isOptionsCommandAdded','startSkew','npETM','jwBwp','svBattlerShadowVisible','UcemU','Scene_Battle_update','jctvo','makeDamageValue','onEnemyOk','vgssF','MfQDG','ActSeq_Horror_NoiseRemove','isGuard','actorCommandCancelTPB','AutoBattle','Mechanics','wtypeId','ActSeq_Movement_HomeMoveBy','StatusWindowAttachmentBackOffsetY','clearDamagePopup','cqNRJ','mCNEH','EscapeSuccess','pointX','bind','makeHpDamageText','isSideView','version','setBattlePortrait','VariableID','itemHit','OmMPG','DualWield','jFAJJ','MRCZQ','cancelActorInput','Game_Action_isForOne','Weapon-%1-%2','revertTpbCachedActor','chant','CriticalHitRate','yVdzt','XrTCq','AutoMeleeAoE','BattleSystemSTB','CreateActionSequenceTargets','ARRAYSTRUCT','HelpOptions','CheckVisibleSkillNotetags','Scene_Map_initializeAfter','action','NWUen','alive\x20battlers\x20not\x20target','_lastActor','performMoveToTargets','encounterList','Window_BattleEnemy_initialize','Game_Interpreter_terminate','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','performReflection','muQDq','processEnemyModeTouchBattleCore','makeTargetsBattleCore','front\x20center','_autoBattle','AGI','BackColor','noise','fittingHeight','OffsetAdjust','_cursorArea','VisuMZ_1_ElementStatusCore','AS\x20TARGET','_weaponImageId','CommonEventID','collapse','getColor','updateBattlebackBitmap2','checkExtendTroopCompatibility','updateShakeFlinch','stopInjectAnimation','forceEscapeSprite','JkUbz','isSkill','addImmortal','Anwna','onEscapeSuccess','Debuffs','frameCount','yHfhH','_targetGrowY','_endBattle','_actorSprites','CopyCombatLog','start','gzTCe','addText','Scene_Battle_startPartyCommandSelection','ActSeq_Skew_Reset','nLsPU','ShowAddedState','fWRSq','prYrt','expRate','applyGlobalCommonEventNotetags','visualHpGauge','StartTurnMsg','Targets1','Game_Battler_startTpbTurn','YPgZk','CtHqV','Game_Action_isForAll','AllowRandomSpeed','evalDamageFormulaBattleCore','jVHNR','showNormalAnimation','_ptbActionCost','ActSeq_Set_SetupAction','dead\x20actors','ActSeq_BattleLog_WaitForNewLine','UnbGe','bOyhT','openBattleActorWindow','StatusWindowAttachmentBackOffsetX','_totalValue','criticalDmgFlat','clearBattleCoreData','isTriggered','KgObH','Scene_Battle_windowAreaHeight','randomInt','HpGaugeOffsetX','nGfOz','updatePositionBattleCore','%1-%2','loadPicture','flipVisualCutinHorz','NameAlwaysHidden','processAnimationRequests','gainCurrentActionsETB','ActSeq_Camera_Clamp','lineHeight','Sprite_SvEnemy','startBattle','setBattlerFlip','_animationCount','updateEffectContainers','JByfH','ActSeq_Camera_FocusTarget','_jumpHeight','setupChild','turnCount','MJWoc','svActorVertCells','LTVyL','Game_Battler_performEvasion','NgYQa','missile','lastCommandSymbol','CalcEscapeRatioJS','performActionEnd','Sprite_Actor_createStateSprite','some','pow','checkTpbInputClose','VisuMZ_3_ActSeqImpact','isFriendly','_stateIconSprite','TCwtd','floatBattler','initBattleCore','popBaseLine','setLastBattleSkill','ParseEnemyNotetags','popupDamage','EscapeFailureJS','addOnceParallelInterpreter','isBattlerGrounded','Window_BattleLog_displayCurrentState','GoDKg','FUNC','actorId','shouldDisperseDamage','updateBitmap','KrOdT','bczpq','drawEnemyName','PARTY','DigitGrouping','_methods','ZWIUa','etDKB','DamageRate','ARRAYEVAL','WaitCount2','list','okTargetSelectionVisibility','Actor-%1-%2','setupDesaturateImpactFilter','_iconIndex','302826aXavHO','MuMaO','smooth','Game_Action_isForOpponent','finishActionSet','ArPenFlat','canSingleOrMultipleSelect','_motionCount','removedBuffs','_namesCount','_homeWholeDuration','includes','isSpriteVisible','skillItemWindowRectBorderStyle','makeActionListAutoAttack','ZhfzB','performFlinch','requestFauxAnimation','isGuardWaiting','loadEnemy','_motionSpeed','SHOW_BUTTON','isAffectedByBreakShield','isSceneChanging','isBreakStunned','AutoBattleBgType','hNxjS','startTurn','clearActiveWeaponSlot','rojzr','ActSeq_Animation_ActionAnimation','GroupDigits','ParseItemNotetags','ActionSkillMsg2','JExBB','stepFlinch','updateStateIconSprite','finishActorInput','IconSet','GLBQz','onAllActionsEnd','dead\x20battlers','AlphaFilter','_skewY','onOpacityEnd','call','alive\x20enemies\x20not\x20user','DamageDisplay','Defeat','FKMsB','Reveal','ConfigManager_makeData','CombatLogIcon','createHelpWindow','_baseTexture','format','note','_visualHpGauge_JustDied','remove','find','fbUjv','user','ClmRL','_pattern','addDamageSprite','ccDVX','updateBattlebackBitmap1','top','nextActiveWeaponSlot','startShakeFlinch','TUlCr','NSJKT','Sprite_Animation_targetSpritePosition','eKzmH','processEscape','_flashColor','cameraClamp','adjustPosition_ScaleDown','bPaNV','ActSeq_Mechanics_FtbAction','EbDmt','addChildToUiContainer','IhZTf','battleLayoutStyle','basicGaugesY','XqqNw','Parse_Notetags_Targets','Scene_Battle_startActorCommandSelection','selectAllActors','performMoveToPoint','getAttackWeaponAnimationId','process_VisuMZ_BattleCore_Action_Notetags','ShowAddedBuff','performSTBExploiter','BomDq','isForDeadFriend','waitForEffect','StartTurnWait','createAutoBattleWindow','pages','isTickBased','xLUEi','onSkewEnd','Game_Battler_regenerateAll','CommandAddAutoBattle','MeleeDistance','OJQcU','isImmortal','_angleEasing','WdWsv','ShakeFlinch','_commonEventKey','BattleManager_selectNextCommand','onBattleEnd','VisuMZ_2_BattleGridSystem','_growEasing','_angleWholeDuration','createBattleFieldBattleCore','isSkipPartyCommandWindow','Game_Actor_equips','updateShadowPosition','code','QjEBB','IRiLv','_targetSkewX','adjustPosition','battlerKey','setHorrorEffectSettings','_displayBattleCoreTransitionErrorMsg','ParseArmorNotetags','kNDqw','VFJBc','CjclS','LEhiG','isLearnedSkill','Game_Action_numRepeats','CounterPlayback','_backAttachmentSprite','ThMxH','Game_Enemy_transform','checkShowHideSwitchNotetags','_targetAngle','ActSeq_Movement_WaitForJump','startInjectAnimation','onJumpEnd','isAnimationPlaying','text','addCombatLogCommand','removeBuff','lrTRt','offsetY','HpGaugeOffsetY','height','currentClass','pauseInjectAnimation','endAction','autoBattleAtStart','<CUSTOM\x20ACTION\x20SEQUENCE>','ShowRemovedBuff','hardDamageCap','_waitCount','updateCustomActionSequence','DTB','Smyru','BattleManager_startTurn','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','BattleManager_onEscapeFailure','Sprite_Battler_startMove','addState','KCzJd','resetTextColor','ActionItemMsg','XyggJ','jhofu','isDuringNonLoopingMotion','addExtendedTroopMembers','Shadow','isHidden','miTLv','PopupOffsetX','visibilityState','finalizeScale','ScaleY','ActSeq_Mechanics_ActionEffect','isAutoBattleCommandEnabled','ActSeq_Zoom_Reset','itemEffectAddAttackState','damageFlat','isEscapeCommandEnabled','JS\x20BATTLE\x20VICTORY','clear','command339','SvHGJ','canUseItemCommand','StateIconOffsetX','canAttackBattleCore','setSTBExploited','ActSeq_BattleLog_PushBaseLine','pLiMB','HelpItem','AutoNotetag','applyTargetFilters','resetFontSettings','VisuMZ_3_ActiveChainSkills','kNLJR','Enable','setVisibleUI','border','StartTurnShow','hKimy','UzKhT','toString','needsSelection','displayType','clearWeaponAnimation','damage','extraPositionY','CriticalDmgFlat','ShakeFlinchPower','ActSeq_Movement_MoveToTarget','DfqfP','onDatabaseLoaded','_skewX','showPortraits','font','VisuMZ_3_BattleAI','drawLineText','ActionCount','FaceDirection','ActSeq_Camera_Offset','moveBattlerHomeToPoint','Scene_Battle_createPartyCommandWindow','ebFfY','CommandWidth','adjustPosition_1for1','AutoBattleCancel','+%1','RgBwz','ActSeq_Motion_PerformAction','hVjKY','onDisabledPartyCommandSelection','deselect','_motion','ActSeq_ChangeSkew','SiKxM','jsScaleUp','_damagePopupArray','BTB','traitSet','alignBattleCoreDamageSprite','deathStateId','VvNPu','pause','%1Event','canMove','_autoBattleWindow','actorCommandAutoBattle','HomePosJS','ATK','createActors','_jumpMaxHeight','cVYTn','VisuMZ_1_MainMenuCore','BattleSystemBTB','BattleManager_onEscapeSuccess','_attackAnimationId','gErmC','BattleManager_endAction','ActSeq_Mechanics_AddBuffDebuff','icon','MAXMP','FnSBw','_injectAnimationSprite','BquAB','jyJPm','FhYFq','setupHpGaugeSprite','updateCommandNameWindow','Post','Scene_Battle_partyCommandWindowRect','SwitchMissEvade','canGuardBattleCore','close','CmdIconItem','setValue','isATB','_distortionSprite','Game_Action_makeTargets','maxLines','PostDamage%1JS','Spriteset_Battle_update','displayBattleCoreTransitionErrorMsg','playEnemyAttack','60aKABys','float','loadSvActor','windowAreaHeight','Frame','Game_Interpreter_updateWaitMode','ActSeq_Movement_HomeMoveToPoint','isFrameVisible','AnimationID','removeActor','_floatDuration','jkNnG','isMagicSkill','flashDuration','XGDDV','aCghP','hRxux','_checkOn','RRAFv','isAutoBattleCommandAdded','pICzL','XhqnC','_opacityDuration','changeAtbChargeTime','createActorCommandWindowBattleCore','ShakeFlinchDuration','_growDuration','isForOneBattleCore','statusWindowRectDefaultStyle','_forceAction','qBrVH','pteAn','multiTargetWindowRect','clearAllVisualCutins','adjustPosition_ScaleToFit','debuffAdd','adjustPosition_ScaleUp','CastPhysical','cWtbr','clearResult','_buttonKey','ChangeOrderBy','match','VisuMZ_3_BoostAction','DabGi','parallaxScrollYinvertEnemy','_escapeRatio','isSkewing','WtypeId','updateSkew','EULIL','WEAPON\x20SWAP','jtWLt','cpyQi','SgDbv','ALL_ACTORS','makeActions','JS\x20%1END\x20BATTLE','BattleManager_startBattle','SvWeaponMass-%1-%2','performEvasion','setAttack','isIncludedInEnemyWindow','playEnemyDamage','setupBattlebackBattleCore','motionType','_actorMultiTargetWindow','Mute','MotionSpeed','createString','smoothness','isNonSubmenuCancel','IconStypeMagic','Scene_Battle_onEnemyCancel','YUyTl','ActSeq_Inject_AnimationEnd','RztPN','mainFontSize','_battleCoreBattleResumeAfter','_defeatedEnemies','setBattleImpactTimeScale','drawItemStyleIcon','battleCamera','Actor','statusWindowRectBorderStyle','createDistortionSprite','setBattleZoom','Spriteset_Battle_updateActors','performActionEndMembers','TpbActiveChangeEnabled','addBuff','MDF','QlXib','clamp','needsSelectionBattleCore','OhjEv','Window_BattleLog_performMiss','BGnzX','updateSpin','StatusWindowAttachmentFrontOffsetY','updatePadding','isActing','JpCgS','_actorWindow','StepDuration','disperseDamage','die','statusTextAutoBattleStyle','gNxMk','makeBattleCommand','FollowTurn','-%1\x20MP','Game_BattlerBase_die','VXnqB','softDamageCapRate','_inputting','isEffecting','Sprite_Enemy_setHue','allowCollapse','VisuMZ_0_CoreEngine','irAxO','uiMenuStyle','waitCount','createActorCommandWindow','updateShadowBattleCore','DamageStyles','ParseWeaponNotetags','_armorPenetration','text\x20target','process_VisuMZ_BattleCore_jsFunctions','getWtypeIdWithName','WopwP','Targets','_actor','trim','odiqu','createBorderStylePortraitSprite','updateBorderSprite','clearMotion','sBiMx','ActSeq_Weapon_ClearActiveWeapon','QhekX','actorCommandEscape','createBattleFieldContainer','yvzSg','skillId','cancelButtonText','horzCells','ArRedRate','updateCancel','isDamagePopupRequested','WeaponTypeID','Window_BattleActor_show','CriticalColor','_weather','ActSeq_Projectile_Animation','resizeWindowXPStyle','JqLdh','kwkCU','eUnyR','JYcWJ','_executedValue','VisuMZ_2_HorrorEffects','bbNHV','removeOnceParallelInterpreter','enemyId','selectSymbol','Window_BattleLog_displayMiss','QhexJ','endAnimation','callNextMethod','duration','DefaultSoftScaler','Scene_Battle_initialize','rmYhM','CheckMapBattleEventValid','geknE','Sprite_Weapon_loadBitmap','destroyDamageSprite','createBattleField','makeActionList','GNCSI','ElementStatusCore','autoSelectPriority','ElMld','addSkillTypeCommand','members','Game_Action_setSkill','BindCommonEventKeysForGroup','updateShadowVisibility','_targetOffsetX','vhiwD','battleCommandName','skills','gainHalfActionsPTB','<CENTER>%1','STR','_tempEquipCheck','status','QadPG','Window_Options_addGeneralOptions','lZhOJ','ActSeq_Mechanics_EtbAction','_growWholeDuration','parallaxHue','actionBattleCoreJS','applyVariance','Scene_ItemBase_applyItem','330771wWautA','YBGjC','show','isAnyoneMoving','tCVei','WaitForMovement','_freezeMotionData','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','process_VisuMZ_BattleCore_DamageStyles','itemLineRect','OAVHp','checkSubstitute','arzIv','custom','drawItem','SideviewSelect','logWindowRect','ChSRW','updatePointAnimations','isForAnyoneFocusOpponents','Opacity','isCancelled','PreRegenerateJS','gAbCD','damageOffsetY','performAction','displayMpDamage','symbol','Game_Map_encounterList','statusWindowRectXPStyle','canBattlerMove','addDebuff','ZfHpo','ActSeq_Mechanics_RemoveState','_eventId','isETB','SkipPartyCmd','ftpbS','onMoveEnd','5736hXLTfQ','WaitCount','createBattleUIOffsetY','AddOption','forActor','BnEuk','StatusWindowSkinHide','DOwIi','Sprite_AnimationMV_updatePosition','Window_BattleLog_displayCritical','VisuMZ_2_BattleSystemPTB','qboLX','attack','_dragonbonesSpriteContainer','maxBattleMembers','BattleStartEvent','prototype','WaitForScale','substitute','Amp','JyTew','jgeqx','_skewWholeDuration','getConfigValue','onFloatEnd','updatePosition','battleOpacity','SNvaH','BattleManager_initMembers','shift','preparePartyRefresh','isPhysical','Scale','MultiTarget','BattleCore','Game_Battler_onBattleStart','filters','DigitGroupingDamageSprites','AUTO\x20BATTLE','tpbActorSwitchConditionsMet','Window_BattleLog_displayFailure','findIndex','makeAutoBattleActions','hasSkill','PostStartTurnJS','DistanceX','SmoothImage','setEventCallback','isAnyoneJumping','isBattleMember','setSkill','ParseSkillNotetags','fight','PopupShiftX','ParseAllNotetags','itemRect','TpbGaugeOffsetY','drawItemImage','isPartyCommandWindowDisabled','_tpbSceneChangeCacheActor','split','BattleLog','DwRvI','YyftN','NxGbF','MnRGU','formula','frontview_ui','stateRate','battleMove','_regionBattleback2','constructor','%1StartActionJS','MessageWait','BattlebackScale','alphabetic','_frontAttachmentSprite','_borderPortraitDuration','ActSeq_Element_ForceElements','_battlePortrait','Game_Battler_performActionStart','enemyNames','FxAuF','WOXeQ','addSkillCommands','_battleCoreAddedElements','EudKN','updateCallMenu','Window_BattleLog_performRecovery','redraw','hasBeenDefeatedBefore','POktF','autoBattleUseSkills','collapseType','swing','executeDamage','kfxdd','maxCols','command236','Strength','isItemCommandEnabled','exit','ENEMY_OFFSET_X','Game_BattlerBase_canAttack','isPlaytest','startTpbTurn','pageup','checkShowHideSkillNotetags','targetObjects','Ophtl','DKMFG','ParseClassNotetags','CreateCutinSettings','Game_System_initialize','createWeather','placeTimeGauge','_createCursorArea','ActSeq_Set_WholeActionSet','current\x20target','UrgAO','_frame','dataId','PopupDuration','_uiContainer','performAttackSlot','lOwDO','MANUAL','CNoeP','ScaleUp','csXtK','GuardFormulaJS','hpDamageFmt','Window_BattleLog_displayEvasion','ShowMissEvasion','NextTurn','TrOVn','currentSymbol','initMembersBattleCore','setHue','Scene_Map_initialize','arPenFlat','BattleManager_updatePhase','portraitFlipHorz','BQqdF','Window_ActorCommand_setup','clearFreezeMotionForWeapons','autoBattleStyle','extraHeight','addedDebuffs','attachSpritesToDistortionSprite','mRaoZ','CurrentTurn','blt','WaitForOpacity','eLBTY','ActSeq_Camera_FocusPoint','autoBattleWindowRect','tQaOp','RHlHW','battlerShadowScaleX','thrust','clearRect','ActSeq_Movement_FaceDirection','hitIndex','kvZos','_homeDuration','displayChangedStates','animationBaseDelay','isMagical','isMoving','partyCommandWindowRectDefaultStyle','selectedBattlers','vAplN','clearTargetBattlerKey','displayHpDamage','partyCommandWindowRectBorderStyle','makeActionOrders','PostEndTurnJS','updateSelectionEffect','alive\x20actors\x20not\x20user','isCTB','LBSkC','_linkedSprite','min','itemCri','ActSeq_ChangeAngle','neVpa','PsbRz','doesPageHaveOnceParallelStart','Game_Battler_clearDamagePopup','getDualWieldTimes','ShowFacesListStyle','YCyAY','isStatusAffected','priority','FUndM','eMyVH','_jumpDuration','WaitForEntrance','createHelpWindowBattleCore','wYYVt','setItem','alive\x20actors\x20not\x20target','transform','ArRedFlat','Scene_Battle_startEnemySelection','Scene_Battle_helpWindowRect','SvBattlerSolo-%1-%2','battleEffect','okButtonText','removeDamageSprite','BesuM','ActSeq_BattleLog_AddText','faceWidth','getAttackMotionSlot','movement','Window_BattleLog_performActionStart','HP_Rate','bossCollapse','Window_BattleLog_performAction','singleSkill','helpAreaHeight','1212672kdNgAS','StatusWindowAttachmentFrontOffsetX','VisuMZ_3_SideviewBattleUI','callOptions','createAttachedSprites','dmAxG','lWlIR','reverse','setupShockwaveImpactFilter','PostEndActionJS','performCastAnimation','createSeparateDamagePopups','StartName','isSelected','helpWindowRect','setBattleCameraPoint','canUse','Lozkd','updateBattleProcess','Arsgj','Mirror','PartyCmd','findTargetSprite','cDAhi','_isBattlerFlipped','-%1','actorCommandSingleSkill','updateVisibility','uBUrx','repositionCancelButtonBorderStyle','Window_BattleLog_refresh','BYCns','removeBuffsAuto','_callSceneOptions','PostDamageAsTargetJS','_targetIndex','findSymbolExt','ScaleToFit','dimColor1','isFloating','StyleON','freezeFrame','setLastPluginCommandInterpreter','buffRemove','ActSeq_Movement_HomeMoveToTarget','Scene_Battle_stop','isFightCommandEnabled','ActSeq_Element_AddElements','ZVGVz','IdPhS','iyRvu','autoSelectLastSelected','command357','jFKfX','VKuCe','performShakeFlinch','addAutoBattleCommands','isAnimationShownOnBattlePortrait','nchgD','_forcedHomeY','JS\x20ESCAPE\x20SUCCESS','All\x20Enemies','createStateSprite','evade','TextAlign','Scene_Battle_startActorSelection','iconHeight','TpbGaugeOffsetX','eKrbm','alive\x20friends\x20not\x20target','_handlers','ActSeq_Movement_BattleStep','isClicked','cPcyZ','helpAreaBottom','startActorCommandSelection','cdqhV','ActionSkillMsg1','spinBattler','globalAlpha','ActionSequence','position','width','sort','displayReflectionPlayBack','SvMotionIdleSolo-%1-%2','GrrYb','Sprite_Battler_isMoving','riAwO','animation','osTpq','fWwCQ','ActSeq_Impact_TimeStop','All\x20Allies','ActSeq_Impact_Oversaturate','centerFrontViewSprite','_cacheTextWidth','glitch','makeTargetSelectionMoreVisible','CmdIconEscape','CriticalDmgRate','pDcPS','ActSeq_Mechanics_OnceParallel','_colorType','attackMotions','isChanting','missed','skill','alterType','DIPmx','_offsetY','WaitForZoom','animationNextDelay','actionEffect','commandNameWindowCenter','startAction','portraitHue','processDefeat','ArPenRate','WaitCount1','Scene_Battle_commandFight','Window_BattleLog_displayActionResults','Game_BattlerBase_initMembers','hue','UrnnW','_effectType','ocFcY','setupIconTextPopup','BattleManager_startInput','performCounter','gainCurrentActionsFTB','startWeaponAnimation','setBattlerBattleCore','WGVjM','QRiyi','setHalfActionsPTB','_mainSprite','Game_Action_isForRandom','mtOeU','_opacityEasing','NameOffsetX','isBattleCoreTargetScope','eliIt','setSubject','_immortal','_angleRevertOnFinish','clearActiveWeaponSet','applyBattleCoreJS','Window_BattleLog_performMagicEvasion','measureTextWidth','isMVAnimation','forceAction','ActSeq_Impact_BlueRedInvert','visualCutinPortraitFilename','MP_Flat','rolZT','COeYd','ActSeq_Projectile_Picture','updateAction','ext','removeChild','EasingType','getBattlerFromKey','logActionList','Scene_Battle_onActorCancel','Game_Enemy_setup','moveToStartPositionBattleCore','changeCtbCastTime','gXkMe','BattleCmdList','ZDCST','onActorOk','gradientFillRect','getBattlerKeyTargets','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','createEnemyNames','fnordAddedStates','_homeEasing','ActionEnd','_enemySprites','AsUzE','deadMembers','makeTargets','KhNCO','QmsNf','onSelectAction','BattleDefeatJS','setupZoomBlurImpactFilter','Sprite_Battler_setHome','%1EndBattleJS','_floatHeight','occasion','applyGlobal','baNEW','QNcnK','processBattleCoreJS','Game_Action_setAttack','scope','TpGaugeOffsetY','EjeEs','gainTp','isForFriendBattleCore','SceneManager_push','Game_Action_evalDamageFormula','Scene_Battle_createAllWindows','uiInputPosition','_actionInputIndex','performDamage','sortDamageSprites','portraitIndex','bitmapWidth','updateStateSprite','Scene_Battle_logWindowRect','MotionIdle','push','displayCounter','Sprite_Battler_update','applyResultSwitches','CheckVisibleBattleNotetags','MotionAni','changeTurnOrderByCTB','updateInterpreter','TTBQU','getBattlePortraitFilename','createActionSequenceProjectile','ChantStyle','_padding','BattleManager_checkSubstitute','eZavd','_deathStateApplied','ActSeq_Mechanics_SwapWeapon','sortEnemies','PgSLh','_canLose','JS\x20%1START\x20ACTION','pQoKw','SoCWs','ActSeq_Impact_ZoomBlurPoint','Direction','_actorCommandWindow','setBlendColor','canAttack','_updateCursorFilterArea','onRegeneratePlayStateAnimation','isBorderPortraitSpriteVisible','CmdStyle','isInputting','commandNameWindowDrawBackground','sliceMin','ftiKO','command301','_cursorSprite','Sprite_Actor_setBattler','isWaiting','MPMEg','ActSeq_Cutin_EndVisualCutinEffectType','HXMoG','BattleManager_processAbort','WPgqV','canGuard','ActionAnimation','Armor-%1-%2','bWyeh','log','FusNv','_shakeFlinchPower','AnchorX','NameAttachStateIcon','PrioritySortActors','Scene_Battle_start','PreApplyAsUserJS','skillItemWindowRectMiddle','loadWindowskin','GetActionSequenceSpecialTarget','BaseTroopIDs','_skewDuration','oWyYs','wZRuO','VLZvt','Window_BattleLog_pushBaseLine','_wtypeIDs','iYbbU','resetBreakShield','battleInjectAni','_flashDuration','FrontViewSelect','addAnimationSpriteToContainer','battleMembers','playCancel','isSubjectValidForAnyoneSelect','forceMotion','ConfigManager_applyData','OffsetY','skillWindowRect','GzOKP','Sprite_Actor_moveToStartPosition','name','commandStyle','isTpb','_lines','Item-%1-%2','shouldHideBattleEndPopups','CmdTextAlign','walk','COMBATLOG','setupBattleCoreData','itemWindowRect','initVisibility','getCommonEventIdWithName','Sprite_Damage_createChildSprite','isForAnyone','oHJaD','Sprite_Enemy_update','makeData','compareBattlerSprites','BattleManager_onEncounter','MnrgY','SkewX','friendsUnit','isQueueOptionsMenu','ActSeq_Cutin_WaitForEntrance','isTeamBased','createCancelButton','PreStartActionJS','value1','picMe','JumpToLabel','Sprite_Enemy_initVisibility','makeCommandList','PreEndActionJS','WaitForExit','_createEffectsContainer','index','xkIaF','qoaqu','MRZoF','REDYs','getFullActionsPTB','eutQM','gWdMp','Scene_Battle_itemWindowRect','BngfD','StyleName','_helpWindow','placeStateIcon','isNextSceneBattleTransitionable','nqZaC','requestMotionRefresh','addCommand','Height','xgNYT','statusWindowRect','ActSeq_Mechanics_StbExtraAction','frameVisible','NameOffsetY','drawItemStyleIconText','unshift','NzAJy','hpHealingFmt','VisuMZ_1_SkillsStatesCore','battleGrow','updateWeather','Window_BattleLog_popupDamage','Victory','launchBattle','Sprite_Enemy_updateCollapse','reduce','isDead','cutinEnter','isPreviousSceneBattleTransitionable','getAttackMotion','_preBattleCommonEvent','AttackAnimation','emerge','zTBdg','pattern','lIrnA','cGmuS','GsoSI','hpDamage','getStypeIdWithName','windowskin','addActor','EhcGX','createChildSprite','focus','THPkX','vktQU','EnemyOffsetY','clearBattlerMotionTrailData','itemTextAlign','isOpen','addSingleSkillCommands','type','isForOne','hVsbr','PFvGK','commandEscape','DUyQH','ffszt','sleep','repeats','apcvO','head','setupActionSet','_targetOpacity','Lflrw','TgHtv','nkVmY','qEKMn','Sprite_Actor_setActorHome','_commonEventIDs','ActSeq_Motion_RefreshMotion','456angTpR','Sprite_Actor_updateShadow','EwAtP','_lineHeight','ActSeq_Horror_GlitchRemove','_branch','hide','Scene_Battle_terminate','ActSeq_Animation_CastAnimation','restore','TextFmt','isAnyoneSpinning','svBattlerAnchorX','CriticalHitFlat','mainSprite','ParseStateNotetags','BattleManager_checkBattleEnd','mSuda','resetResultSwitches','FLLbB','Window_BattleLog_displayMpDamage','Damage','_back2Sprite','VkVoy','ActSeq_Mechanics_PtbAlterCost','setBattleSkew','setupRgbSplitImpactFilter','startHomeMove','lCxsF','MP_Rate','WaitForEffect','right','RNWnP','performWeaponAnimation','hidden','PostDamageAsUserJS','iconText','vmahR','MfPeF','cBbPr','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','JykES','currentValue','VariableDmg','PWXoH','tpbCommandFight','HpGauge','NameLegacy','EnableSoftCap','nVsFo','ActSeq_Target_RandTarget','anchorX','_enemyID','updateShadow','iCJCU','ActSeq_Mechanics_VariablePopup','isActionSelectionValid','processRefresh','2992FXVVmY','guardSkillId','magicReflection','_cancelButton','playOnceParallelInterpreter','victory','LEPsU','forceSelect','sliceMax','weaponTypes','LHXlo','ZgMLO','placeGauge','_targets','ActSeq_Mechanics_Immortal','AttachStateOffsetY','updateEventMain','isAnyoneInjectAniPrepping','isSkillItemWindowsMiddle','PreEndBattleJS','commandOptions','vZXIj','VDrox','_angleDuration','createMultiTargetWindow','addFightCommand','_makeFontNameText','setActiveWeaponSlot','createEnemyWindow','vkZBG','HfrPz','wakvv','changePaintOpacity','Cenxx','xBRAz','compareEnemySprite','gstBM','jsScaleDown','COpPF','JS\x20BATTLE\x20DEFEAT','refreshActorPortrait','select','_subject','concat','BqYGG','alive\x20battlers\x20not\x20user','QFadi','ActSeq_Movement_Jump','animationShouldMirror','PostStartActionJS','messageSpeed','_effectDuration','HmjCm','QPTwt','charged','XcLik','clearElementChanges','visualCutinPortraitHue','SVqCS','BattleManager_inputtingAction','iyRDb','JOIRw','Game_Action_setItem','Window_BattleEnemy_hide','_action','bitmap','yObBP','Filename','createAllWindows','ActSeq_Animation_PlayAtCoordinate','updateStatusWindowPosition','filter','Scene_Battle_skillWindowRect','Sprite_Enemy_createStateIconSprite','FgrVB','hitFlat','createMultiTargetWindows','makeUniqueNames','battleJump','SkillItemStandardCols','battleCoreTpbMainPhase','ActSeq_Impact_MotionTrailRemove','_enemyWindowMode','XPActorCommandLines','alive\x20enemies\x20not\x20target','updateCollapse','rywuD','refreshMotion','displayActionResults','battleUIOffsetY','frontviewSpriteY','isSpinning','requestMotion','isForFriend','statusText','damageStyle','EnableDamageCap','boxHeight','_animationSprites','faceRect','ReflectPlayback','pop','shouldPopupDamage','Actions','WVNjK','igxZw','portraitFilename','Game_Battler_onBattleEnd','updateWaitMode','_targetBattlerKey','bxPKJ','YjOCN','performSubstitute','replace','checkCacheKey','round','ZRHTg','isOptionsCommandEnabled','zoomDuration','Game_Action_isForAliveFriend','Evmqi','command283','textWidth','autoBattleStart','createHpGaugeSprite','AggroControlSystem','VisuMZ_4_CombatLog','jjlWM','ActSeq_Mechanics_HpMpTp','VisuMZ_2_BattleSystemBTB','actions','length','reserveCommonEvent','setImmortal','tWVHq','gOnmG','isAlive','MAT','parameters','BattleManager_isTpbMainPhase','aliveMembers','changeCtbChargeTime','addChild','getChildIndex','aYKQH','_lastAction','svActorHorzCells','addGeneralOptions','Scene_Battle_createEnemyWindow','removeHorrorEffect','battleFloat','VIZej','FullActions','CastAnimation','startGrow','kfeco','Parse_Notetags_Action','setupBattleback','BattleManager_setup','UGbSF','Game_Action_apply','applyGuard','prev\x20target','nSlhj','ActSeq_Animation_ShowAnimation','UNTITLED','children','waitForAnimation','onActorCancel','ActSeq_Mechanics_PtbFullHalfAction','getSkillIdWithName','ActSeq_Mechanics_CustomDmgFormula','retreat','displayStartMessages','stypeId','cancelTargetSelectionVisibility','contains','_forActor','magicSkills','evaded','showHelpWindow','xNMGS','_item','toLowerCase','vVyFa','AmhuO','VisuMZ_3_ActSeqProjectiles','ActSeq_Mechanics_ArmorPenetration','%1Damage%2JS','ActSeq_Mechanics_StbRemoveExcessActions','_createDamageContainer','startVisualCutin','sGZVy','nJqXa','battleCorePreBattleCommonEvent','ActSeq_Mechanics_PtbConvert','xFLHw','ActSeq_Horror_TVCreate','ShowReflect','pXGFX','mpDamage','BattleLogRectJS','ActSeq_Camera_WaitForCamera','_targetHomeX','description','Game_Map_battleback2Name','changeWeather','MotionType','1:1','sbUPf','OfZjN','kIZsC','HVyuV','displayReflection','BattleLayout','EhAcO','isAnyoneGrowing','anchorY','isAnyoneFloating','CriticalHitRateJS','effect','_homeX','vbNov','setupFont','createTroopNote','Spriteset_Battle_createBattleField','arRedFlat','ActSeq_Inject_AnimationStart','actor','parallaxScrollY','mMInu','alterChange','hasStaticSvBattler','setupTextPopup','ITEM','registerDefeatedEnemy','OaioJ','AJjlJ','all\x20enemies','ZdgWI','applyFreezeMotionFrames','NameAlwaysSelectOnly','missle','Game_Actor_setup','getDefeatedEnemies','lfGJM','isUndecided','onBattleStart','_customDamageFormula','_battleCoreForcedElements','_emptyBitmap','loadSystem','QYfaj','enemy','VisuMZ_2_BattleSystemCTB','skillTypes','battleSpriteSkew','_makeCursorAlpha','dead\x20enemies','chantStyle','wholeActionSet','updateStaticSvBattlerFrames','JTpAj','ALL\x20SKILLS','sideview_ui','rltWk','alive\x20enemies','addCustomCommands','getEnemyIdWithName','Window_SkillList_maxCols','createDamageSprite','SILAS','revealNewWeaknesses','Game_Actor_makeActionList','isDeathStateAffected','createCommandNameWindow','ShowCurrentState','performTpbActiveCheckSwitch','maxTp','portraitType','dead\x20friends','drawText','context','processForcedAction','caFLP','createPartyCommandWindow','isCustomBattleScope','visible','_battlerHue','Game_Action_needsSelection','TrADs','refreshRequest','oBZqj','eraseState','GqsiB','activate','refresh','oOKXv','ClearBattleLog','wjPyG','ActSeq_Impact_MotionBlurTarget','PreDamage%1JS','extendTroopMembers','anchor','RbEIN','isForAnyoneFocusFriends','Game_Action_itemEffectAddNormalState','windowPadding','TPB','ActSeq_Motion_WaitMotionFrame','_itemWindow','Game_Battler_performDamage','front\x20base','%1RegenerateJS','Game_Action_setGuard','wait','ShowAddedDebuff','PostApplyAsUserJS','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','IvSGp','battleback1Name','IZxhH','criticalHitFlat','_multipliers','Game_Action_itemEffectAddAttackState','NFKCy','isOpponent','default','changeAtbCastTime','updateLink','isGrowing','weapons','createDigits','showAnimation','IKfTV','iPLZs','sxaym','giwZs','createContents','stepBack','addWindow','displayTpDamage','message1','Sprite_Actor_initMembers','TAEvD','drawActorFace','_tempBattler','drawItemImageListStyle','Sprite_Battler_damageOffsetY','ShowMpDmg','SvMotionIdleMass-%1-%2','ActSeq_Mechanics_TextPopup','hpAffected','isTurnBased','AsUser','onEnemyCancel','cameraOffsetDuration','JPobb','isHiddenSkill','textAlign','VarianceFormulaJS','process_VisuMZ_BattleCore_PreBattleCommonEvent','XiEKq','SgGwm','isCommandEnabled','_enemyId','QoL','xeBIY','onEncounterBattleCore','battleCommandIcon','_interpreter','_currentAngle','_regionBattleback1','battleProjectiles','XPSpriteYLocation','updateOpacity','battlerSprites','updateStyleOpacity','RegExp','ImdyF','coreEngineRepositionEnemies','ParseActorNotetags','AllEnemiesText','TimeScale','nameY','startMotion','commandAutoBattle','_enemyIDs','processVictory','DlTSW','getBattlePortraitOffsetX','iterateBattler','updateHpGaugePosition','updateAngleCalculations','resizeWindowBorderStyle','refreshStatusWindow','mjZVH','Sprite_Actor_updateBitmap','Game_BattlerBase_canGuard','helpWindowRectBorderStyle','ActSeq_Mechanics_StbExploit','randomTargets','startInput','NPFjP','clearForcedGameTroopSettingsBattleCore','_animation','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','NUM','boQpq','angle','drawSingleSkillCost','fillRect','item','isCustomActionSequence','BattleManager_makeActionOrders','yOvbf','LastSelected','fhoHP','command119','parent','ActSeq_Cutin_WaitForExit','poYlv','getBattlePortraitOffsetY','OWMFa','endVisualCutin','_targetGrowX','JS\x20%1START\x20BATTLE','drawItemBackground','ActSeq_Mechanics_Multipliers','time','StatusWindowSkinFilename','timeScale','xgJAS','BattleAI','changeBattlebacks','_stateSprite','offsetX','_requestRefresh','_battleCoreBattleStartEvent','isStateResist','Game_Temp_requestAnimation','selectPreviousCommand','fOkNT','create','ActorCmd','ActSeq_Impact_MotionBlurScreen','OhQqI','process_VisuMZ_BattleCore_PluginParams','LrKPj','VtBcn','fzaLV','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','attackStatesRate','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','_borderPortraitSprite','duTvx','JS\x20%1START\x20TURN','maxCommands','_index','useDigitGrouping','isAnyoneChangingOpacity','isCommonEventReserved','TsINm','Slot','mDLMU','performActionMotions','_shadowScaleY','targetsForFriends','ActSeq_Angle_WaitForAngle','waitForJump','WIDTH','drawIcon','ASzIL','_appeared','growBattler','getHalfActionsPTB','updateBossCollapse','portrait','addOptionsCommand','rGoLE','addChildAt','sJxOQ','clearOnceParallelInterpreters','NewPopupBottom','meetsSelectFrontviewActorConditions','Game_BattlerBase_refresh','PostStartBattleJS','isForOpponent','setTargetBattlerKey','Game_Troop_expTotal','attackAnimationIdSlot','BattleVictoryJS','Window_BattleStatus_drawItemImage','sLDNY','startPartyCommandSelection','Enemy','LaBHb','noSimilarSTypes','WaitForCamera','ShowFailure','refreshCursor','onBattleStartOnceParallels','StepDistanceX','isAutoBattle','startOpacity','JUhTS','ActionEffect','callUpdateHelp','updateJump','OverallFormulaJS','_dimmerSprite','vnlAB','_targetSkewY','VisuMZ_3_ActSeqCamera','ohZbS','updateForceAction','escape','ActSeq_Set_TargetActionSet','SkillItemBorderCols','displayEvasion','battleDisplayText','sZtmA','PostApplyJS','CreateCommonEventKeys','gwEfV','targetDistortionSpritePosition','setupMotionBlurImpactFilter','battlerName','createKeyJS','svShadow','Window_ActorCommand_initialize','CoreEngine','_logWindow','inHomePosition','drawGauge','hjoAY','_floatEasing','rzLdx','CheckSkillCommandShowSwitches','startMove','getNextSubjectFromPool','Window_BattleLog_displayTpDamage','selectAllEnemies','Shadow2','setBattlerFacePoint','_battleLayoutStyle','ActSeq_Mechanics_BoostPointsChange','updateEffectsContainer','ShowCosts','waitForMovement','Scene_Battle_onEnemyOk','JbwSf','addTextToCombatLog','isForOpponentBattleCore','backColor','Game_Action_applyGlobal','_opacityWholeDuration','YMybw','GtuEI','message2','_commonEventQueue','processTouch','battleStatusSprite','Omgcr','ShowButton','ScaleDown','drawItemImageXPStyle','startSpin','getTraitSetKeys','%1StartBattleJS','VariableHeal','createStateIconSprite','gainMp','isBypassDamageCap','ActSeq_Mechanics_RemoveBuffDebuff','getLastPluginCommandInterpreter','_stypeIDs','rowSpacing','cFOHa','Formula','Game_Battler_makeSpeed','Targets2','ActSeq_Movement_WaitForSkew','setFullActionsPTB','Game_Map_battleback1Name','setupNegativeImpactFilter','autoMeleeSingleTargetActionSet','ActSeq_Movement_WaitForFloat','Game_Action_clear','_statusType','makeSuccess','_shadowScaleX','_activeWeaponSlot','Angle','destroy','performRecovery','playOnceParallelTroopPage','_battleField','ShowActorGauge','pWGtu','Game_BattlerBase_eraseState','Scene_Map_updateCallMenu','lastBattleSkill','battleCommands','applyAngleChange','isBattleTest','Window_PartyCommand_initialize','update','dZStR','GZPUs','ActSeq_Impact_Negative','abs','vafsN','applyArmorModifiers','isCharging','PmCag','updateStart','setHelpWindow','Game_Interpreter_command283','_onceParallelInterpreters','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','battler','ReflectAnimation','slices','Style','Scene_Battle_selectNextCommand','ITcOe','displayItemMessage','updateTargetPosition','isCertainHit','guard','options','Game_Action_makeDamageValueDisperse','hZahL','processPostBattleCommonEvents','ActSeq_Movement_WaitForMovement','EUAfq','ActSeq_Mechanics_CtbOrder','ActSeq_Impact_ZoomBlurTargetCenter','jsOneForOne','targetBattlerContainerOpacity','getDamageStyle','initBattlePortrait','requestAnimation','DpopM','_statusWindow','updateHomeMove','_commandNameWindow','ActSeq_Horror_TVRemove','floor','bQUVG','onBattleStartBattleCore','xuKRy','isAttack','Scene_Battle_updateStatusWindowPosition','_hpGaugeSprite','ActSeq_BattleLog_DisplayAction','setCustomDamageFormula','ActSeq_Camera_Reset','_skewEasing','mpHealingFmt','Sprite_Actor_updateFrame','hSWeq','VisuMZ_2_DragonbonesUnion','rArNM','toUseBoostPoints','updateHelp','invokeAction','mainSpriteScaleX','iCWot','PostApplyAsTargetJS','center','CTB','map','dnZST','OffsetX','TextColor','ndsmF','ceil','applyHardDamageCap','_enemyWindow','_list','alive\x20friends\x20not\x20user','FlinchDuration','HP_Flat','setBattleAngle','commandFight','Wave','DisablePartyCmd','GetActionSequenceSpecialTargetWithFlags','_damages','ENEMY_OFFSET_Y','yZAuW','Name','clearHorrorEffects','alterCost','setActiveWeaponSet','flashColor','Pdegz','battlerSmoothImage','MhnZP','registerCommand','_borderPortraitTargetX','isAnyoneInjectAnimating','ShowPortraits','Duration','createAnimationSprite','battleSys','pha','isBattleSys','applyEasing','Radius','PostRegenerateJS','setText','prepareCustomActionSequence','Sprite_Enemy_setBattler','Scene_Options','inputtingAction','ylnts','Game_Battler_clearMotion','setBattleCameraTargets','cnaDK','_phase','VisuMZ_3_FrontviewBattleUI','displayBuffs','checkShowHideBattleNotetags','processBorderActor','State-%1-%2','ActSeq_DB_DragonbonesTimeScale','dimColor2','BattleSystemCTB','applyItem','ekTLx','Game_Troop_setup','endBattle','updateFloat','PreDamageAsUserJS','setLetter','regenerateAll','toUpperCase','Window_ItemList_maxCols','_back1Sprite','initMembers','JS\x20%1REGENERATE','isAnyProjectilePresent','updateAttachedSprites','dead','parseForcedGameTroopSettingsBattleCore','BG_TYPE','param','AdjustRect','Scene_Battle_createActorCommandWindow','EoZvs','refreshBattlerMotions','ShowWeapon','gtWKT','forceWeaponAnimation','ActSeq_Horror_GlitchCreate','Sprite_Actor_update','RAMKV','_text','itemHeight','Game_Map_setupBattleback','setup','Settings','States','mMCRR','Skills','getBattlePortrait','onAngleEnd','Class-%1-%2','_cache','damageContainer','#ffffff','tUmKr','attackTimesAdd','updateAttachmentSprites','addedStateObjects','_targetOffsetY','svBattlerName','jsScaleToFit','HelpEscape','onEncounter','njzXn','changeInputWindow','RVTrq','_effectsContainer','ZViwY','softDamageCap','commandStyleCheck','addChildToBack','iconIndex','CheckVisibleSwitchNotetags','VisuMZ_4_BreakShields','ActSeq_Projectile_Icon','targetActionSet','setEnemyWindowMode','canAlterActionCostPTB','createShadowSprite','uhwfu','ActSeq_Weapon_SetActiveWeapon','_offsetX','_battleCoreNoElement','saVJu','gaugeLineHeight','ActSeq_Target_PrevTarget','indexOf','ActSeq_BattleLog_Refresh','processActorCommandCancelTPB','process_VisuMZ_BattleCore_CreateRegExp','XYyzj','ShowHpDmg','removeStatesAuto','VisuMZ_2_BattleSystemATB','hitRate','ResetFocus','updateActors','process_VisuMZ_BattleCore_BaseTroops','repeatTargets','alive\x20opponents','tone','isOnCurrentMap','Game_Interpreter_PluginCommand','sItoD','xrVxM','moveBattlerHomeDistance','PRE-','_actions','VisuMZ_2_BattleSystemETB','Window_BattleLog_performDamage','refreshDimmerBitmap','ANkXY','HelpSkillType','WuuZp','YQixA','Sprite_Enemy_updateBossCollapse','open','pointY','ZydDK','apply','ActSeq_Movement_Scale','gainStoredBoostPoints','sXmCh','ActSeq_Weapon_NextActiveWeapon','_allTargets','StatusWindowSelectableBackHide','attackAnimationId2','OCRlX','setFrame','optDisplayTp','EmIaC','WaitComplete','putActiveBattlerOnTop','_homeY','HelpFight','ActSeq_Inject_WaitForInjectAni','ActSeq_Animation_AttackAnimation','_fauxAnimationSprites','GUARD','_createClientArea','svBattlerAnchorY','YUihI','origin','ActSeq_Movement_MoveBy','ConvertParams','closeBattleActorWindow','Game_Action_executeDamage','XTVIy','removeAnimationFromContainer','AnchorY','ActSeq_Horror_NoiseCreate','_growX','CcAVy','processOk','pXsJL','resize','updateOnceParallelInterpreters','Sprite_Battler_damageOffsetX','Scene_Battle_createHelpWindow','_targetHomeY','XPActorDefaultHeight','_motionType','DpxSJ','_lastRegenFrameCount','JVmVK','Scene_Map_launchBattle','BoostPoints','gDyLf','CcHox','isBattlerFlipped','rhKvR','_battlerName','snapForBackground','XYqNe','battleCoreResumeLaunchBattle','AsTarget','mmp','MOTIONS','cLvKa','addMeleeReturnActionSet','pTTmD','jcWMu','damageOffsetX','Text','initElementStatusCore','canEscape','addWeaponSwapCommand','faCra','addGuardCommand','ActSeq_Target_CurrentIndex','parallaxHueEnemyModifier','ActSeq_Motion_ClearFreezeFrame','makeSpeed','CalcEscapeRaiseJS','ActSeq_Mechanics_CtbSpeed','addedBuffs','sDOjC','\x5cI[%1]%2','command301_PreBattleEvent','textBaseline','Tlkcb','_drawTextBody','FlashColor','setActorHome','setSvBattlerSprite','ActSeq_Impact_ShockwaveCenterTargets','moveBattlerToPoint','Hxfwv','startDamagePopup','isRightInputMode','SwitchCritical','ZfECh','cutinExit','FPQnc','_windowLayer','PopupShiftY','makeDeepCopy','mainSpriteScaleY','Game_Interpreter_command301','Scene_Options_maxCommands','JyDIP','performAttack','battleStatusWindowAnimationContainer','ForceExploited','actionSplicePoint','SkewY','ActSeq_Movement_Opacity','checkSceneBattleTransitionable','WaitForFloat','applyForcedGameTroopSettingsBattleCore','battleZoom','speed','terminate','changeBattlerOpacity','svAnchorY','ChHPH','guBsp','battleInjectPrep','textSizeEx','effects','HrbnA','max','_damageContainer','FlashDuration','qDDNd','numRepeats','value','onEscapeFailure','opacity','CriticalHitMultiplier','Sprite_Battleback_adjustPosition','isItem','buffAdd','cDGQm','aAZUn','Window_BattleLog_performEvasion','notFocusValid','processRandomizedData','_enemyMultiTargetWindow','Intensity','DamageType%1','Buffs','YWYrl','_lastPluginCommandInterpreter','isAppeared','ActSeq_Movement_Skew','ActSeq_Cutin_EndVisualCutinEffectAll','autoMeleeMultiTargetActionSet','removeAnimation','VisuMZ_2_WeaponSwapSystem','isPartyTpbInputtable','freezeTime','svAnchorX','vEqyT','_duration','addEscapeCommand','ShowSubstitute','PerformAction','ButtonAssist','virtualClick','updatePhase','Window_BattleLog_clear','addItemCommand','_additionalSprites','_floatWholeDuration','isDTB','updateMotionCount','AutoMeleeSolo','Game_Party_addActor','gfUhy','gaugeX','createDamageContainer','arRedRate','createEffectActionSet','EHqer','dying','VisuMZ_2_BattleSystemSTB','ActSeq_Movement_Float','Sprite_StateIcon_updateFrame','BattleManager_startAction','Sprite_Battler_updatePosition','placeActorName','ConvertCount','MIN_SAFE_INTEGER','critical','makeTargetSprites','KHyiI','WaitForNewLine','StatusWindowAttachmentBack','calcWindowHeight','_weaponSprite','battleEnd','MpGaugeOffsetY','_lastEnemy','isSTB','battleCameraData','gainBravePoints','battleUIOffsetX','textColor','Window_BattleLog_performActionEnd','addLoadListener','#%1','isActor','ImjoJ','mainSpriteHeight','WaitForProjectile','HalfActions','ShowHide','ActSeqImpact','startAttackWeaponAnimation','extraPositionScaledY','%1StartTurnJS','DistanceAdjust','setupBlueRedInvertImpactFilter','ChargeRate','isActiveTpb','AgSnx','FHoMM','loadBattleback2','_targetFloatHeight','getInputButtonString','TargetLocation','JS\x20%1APPLY\x20%2','selectNextCommandTpb','_battlerContainer','ActSeq_Animation_AttackAnimation2','_skillIDs','lyoxJ','mpDamageFmt','attackSkillId','fontSize','turnOrderChangeOTB','compatibilityVisible','PrioritySortActive','VisuMZ_2_BattleSystemOTB','_enemies','FGQmE','equipSlots','ActSeq_Impact_ShockwaveEachTargets','commandName','CastCertain','ScaleX','ApplyImmortal','Game_Action_itemHit','isMeleeSingleTargetAction','isVisualHpGaugeDisplayed','battlerShadowScaleY','iconWidth','_forcedBattlers','onGrowEnd','ooFYi','battleback2Name','isPreviousScene','hbJqX','eFsDj','SKILLS','ZMcgs','_active','PreDamageAsTargetJS','_skillWindow','makeEscapeRatio','HitFlat','vWfWw','applyCritical','dXCts','requestRefresh','ZNQTC','TP_Rate','maxItems','hddUv','cancel','TvEtK','MpGaugeOffsetX','_forcing','gPOAr','lSxaZ','Sprite_Enemy_updateStateSprite','drawItemImagePortraitStyle','addAttackCommand','isDisplayEmergedEnemies','jumpBattler','Window_BattleLog_update','lastFilename','_indent','lCNoY','displayCritical','updateRefresh','qKoBn','Game_Battler_forceAction','ActiveTpbOptionsMessage','performCollapse','ACTOR_OFFSET_Y','OQkFf','useItem','bgType','drawBackgroundRect','JMYWJ','rec','setupDamagePopup','aYFzR','shadow','Game_BattlerBase_addNewState','Window_BattleLog_performCounter','applySoftDamageCap','_partyCommandWindow','_tpbState','_updateFilterArea','loadBitmap','bitmapHeight','yYaSY','createMainSprite','_forcedBattleLayout','pQhPD','setActionState','EscapeSuccessJS','playReflection','dzzhL','zpzDq','isBusy','currentExt','Skill-%1-%2','padding','_animationContainer','TpGaugeOffsetX','checkAutoCustomActionSequenceNotetagEffect','ActSeq_Mechanics_ActiveChainInputDisable','_flipScaleX','pgyuT','_selectionEffectCount','ICBWp','qPXIl','evalDamageFormula','active','string','performActionStart','abnormal','trueRandomTarget','ytaFZ','needsActorInputCancel','displayFailure','getItemDamageAmountLabelOriginal','DefeatEvent','move','bsedS','_updateCursorArea','mtnZI','_endingBattle','addBattleCoreAutoBattleStyleCommand','Elements','TrUeR','ActSeq_Animation_WaitForAnimation','createBattleUIOffsetX','performMagicEvasion','YBXyv','processAbort','WaitForSkew','checkTpbInputOpen','_growY','_waitMode','xzqud','_spriteset','OuHnc','isAlwaysVisible','BTestBypass','prepareBorderActor','expTotal','getItemDamageAmountTextOriginal','return\x200','motionIdle','addShowHpGaugeCommand','Linear','Scene_Party','StepDistanceY','stop','Game_Action_isForFriend','jump','isChangingOpacity','stepForward','_svBattlerData','IFXlD','VxIJv','hFhwK','isBattleFlipped','isDebuffAffected','JPLYJ','BreakShields','swapEnemyIDs','waitForNewLine','Index','NzPWW','performJump','troop','createAttachmentSprites','DEF','ShuffleArray','pushBaseLine','isConfused','jqKAM','setHandler','usePremadeActionSequence','_target','equips','displayChangedBuffs','NxkQj','HiiTQ','removeImmortal','setHelpWindowItem','BattleManager_processVictory','AchPc','gmmBK','clone','getItemDamageAmountTextBattleCore','HelpAutoBattle','alive\x20battlers','isForAliveFriend','14495530iRgMxy','crpMO','turn','qLkve','addAutoBattleCommand','parse','kvqhe','PopupPosition','cxzyD','updateBattlebackBitmap','gUlSN','Sprite_Battler_updateMain','createPartyCommandWindowBattleCore','Bhfgx','value2','_baseY','QQoJl','drawItemStatusListStyle','drawTextTopAligned','NrjBz','SOrbA','weaponImageId','parallaxScrollX','Xmvog','jHCKn','updateBattlerContainer','Game_BattlerBase_isStateResist','updateBorderStyle','loadBattleback1','opponentsUnit','oVWIb','RevertAngle','AqkcU','alterActionCostPTB','AniDuration','extraPositionX','ActSeq_BattleLog_WaitForBattleLog','iWRxz','eRKrS','autoBattle','weatherType','isForRandom','battleAnimation','drawTextEx','mhp','applyData','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','isPTB','DefaultSoftCap','izFZi','lyNOc','updateFrame','stateMotionIndex','boxWidth','motionSpeed','portraitFlipVert','ActSeq_Mechanics_BreakShieldChange','TTzoK','hasSvBattler','isCurrentItemEnabled','lVObB','nGPGT','ExtraSettings','AutoBattleRect','displayRemovedStates','wMTEe','undecided','opacityStart','result','command3011','jLKyT','PopupOffsetY','surprise','ActSeq_Zoom_Scale','_tpbNeedsPartyCommand','getMenuImage','Window_BattleLog_performReflection','itemEffectAddNormalState','lPkeo','moveToStartPosition','Destination','OCqnt','moveBattlerDistance','zpZtH','ActSeq_BattleLog_PopBaseLine','skew','NEOuc','qatMr','StatusWindowAttachmentFront','ActSeq_Element_Clear','ActSeq_Mechanics_DamagePopup','clearFreezeMotion','ATwNs','selectNextActor','442910KAtDga','updateKeyboardKeys','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','_shadowSprite','getNextDamagePopup','battleAngle','process_VisuMZ_BattleCore_Failsafes','baFdP','selectNextCommand','BcPav','_enemy','partyCommandWindowRect','MrQtJ','CommandVisible','LUK','_lastHpDamage','criticalHitRate','Flhtx','setCommonEvent','VisuMZ_2_PartySystem','TLdei','FTXzm','ATTACK','sSlVW','adjustFlippedBattlefield','isForAliveFriendBattleCore','contentsOpacity','currentAction','displayCurrentState','ActSeq_BattleLog_UI','_battler','BattleManager_processDefeat','jAZTo','lukEffectRate','sBJsQ','hVmWO','WaitForAnimation','updateScale','JSON','isMeleeMultiTargetAction','tdPtr','setBackgroundType','updateGrow','gTeid','_shakeFlinchDuration','DMNCu','VHXNz','setBattleCameraOffset','setupMotion','startFloat','Window_BattleLog_performSubstitute','isShownOnBattlePortrait','Game_Battler_onTurnEnd','setCursorRect','KJZVH','clearBattleRefreshRequest','Zwggt','inBattle','inputting','JYEFT','_buttonText','svActor','ANTI_TINT_UI','Window_Options_statusText','CmdIconAutoBattle','_baseLineStack','BhUYR','MAXHP','attackAnimationId1','startActorSelection','commandSymbol','traitObjects','xORrt','NameFontSize','addNewState','wLBQh','getBattlerKeyTargetReplacement','Scene_Boot_onDatabaseLoaded','addSingleSkillCommand','createAnimationContainer','Sprite_Battler_initMembers','drain','_svBattlerSprite','IconStypeNorm','ActSeq_Movement_Spin','animationId','battleSkew','ActSeq_Mechanics_DeathBreak','performMiss','WaitForAngle','left','updateFlip','qVSTS','freezeMotion','isSceneBattle','ShowEnemyGauge','alterBreakShield','VisuMZ_2_AggroControlSystem','initialize','ALL_ENEMIES','lqLjq','skewDuration','qgbpz','setTroopPage','showEnemyAttackAnimation','_drawTextOutline','Enemy-%1-%2','ActSeq_Impact_ShockwavePoint','not\x20focus','updateMain','scale','Window_BattleLog_popBaseLine','ACTOR_OFFSET_X','isBuffAffected','createTargetsJS','PreStartTurnJS','all\x20actors','HitRate','reDSq','drawSkillCost','Rate','setupOversaturateImpactFilter','canInput','isAtbChargingState','PreStartBattleJS','8361oUwoec','isFlipped','oNDYL','isBattleRefreshRequested','weatherPower','onBattleEndBattleCore','KxyDI','PreApply%1JS','_actionBattlers','DEKDM','join','_tempActor','Window_BattleEnemy_show','hrurs','Window_BattleActor_hide','VisuMZ_3_VisualCutinEffect','ZevSd','EqYLe','BbYmR','Pre','parallaxScrollXinvertEnemy','canAddSkillCommand','updateUiContainerPosition','WindowWidth','sdUYK','ShowCounter','setupCriticalEffect','djYmn','BattleManager_cancelActorInput','AddHpGaugeOption','alterPriority','eWxaG','allBattleMembers','MaxLines','wtnYP','process_VisuMZ_BattleCore_Notetags','battlelog','FocusY','sGdhI','_battlerKeyCache','RVUwv','validTargets','casting','ktSkh','onTurnEnd','_enemyNameContainer','svBattlerData','AS\x20USER','innerWidth','subject','BattleManager_endBattle','setBattler','FlinchDistanceX','JS\x20ESCAPE\x20FAILURE','EscapeFail','CSNKg','PreEndTurnJS','_currentActor','setupBattleCore','SkillsStatesCore','JS\x20%1DAMAGE\x20%2','becomeSTBExploited','displayAction','hUAOh','pagedown','bHqqj','iRhrZ','Game_Action_setSubject','Spriteset_Battle_createLowerLayer','Window_BattleActor_processTouch','_scene','Setting','hLnQY','isJumping','commandNameWindowDrawText','slice','_jumpWholeDuration','onHomeMoveEnd','setHome','wdjfE','gainFullActionsPTB','jAZUu','visualCutinPortraitType','makeTargetsBattleCoreJS','mainSpriteWidth','displayAddedStates','UQHGs','lWJoD','GkWUk','isForRandomBattleCore','allowRandomSpeed','innerHeight','callOkHandler','addBattleCoreAutoBattleStartupCommand','tpIjN','alive\x20opponents\x20not\x20target','isEnemy','_updateClientArea','egsju','all\x20targets','nLVGC','_flinched','addPartyCommand','_baseX','setupWeaponAnimation','oHaME','ConvertActionSequenceTarget','selectAll','regenerateAllBattleCore','CastMagical','_forcedHomeX','random','targetSpritePosition','process_VisuMZ_BattleCore_CommonEventKeys','contents','atbInterrupt','autoSelect','StateIconOffsetY','DefaultHardCap','isForAll','Window_BattleStatus_initialize','djxcg','isTpbCharged','POST-','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','NhXfe','ActSeq_Motion_FreezeMotionFrame','skewBattler','BindCommonEventKeysForObj','linkSprite','filterArea','isBorderStylePortraitShown','applyImmortal','_speed','pvZUE'];_0x3233=function(){return _0x1aa1a9;};return _0x3233();}var label=_0x54b1a4(0x387),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x54b1a4(0x661)](function(_0x10ce2f){const _0x3821e0=_0x54b1a4;return _0x10ce2f[_0x3821e0(0x334)]&&_0x10ce2f[_0x3821e0(0x6e6)]['includes']('['+label+']');})[0x0];VisuMZ[label][_0x54b1a4(0x916)]=VisuMZ[label][_0x54b1a4(0x916)]||{},VisuMZ[_0x54b1a4(0x97a)]=function(_0x21dd2f,_0x3e01f9){const _0x2c5d81=_0x54b1a4;for(const _0x4761b2 in _0x3e01f9){if(_0x4761b2[_0x2c5d81(0x298)](/(.*):(.*)/i)){if('xAlLy'===_0x2c5d81(0x420))this[_0x2c5d81(0x79b)](_0x2c5d81(0x904));else{const _0x798531=String(RegExp['$1']),_0x44e07d=String(RegExp['$2'])['toUpperCase']()[_0x2c5d81(0x2f4)]();let _0xf744ee,_0x52d5c6,_0x242bb1;switch(_0x44e07d){case _0x2c5d81(0x7b1):_0xf744ee=_0x3e01f9[_0x4761b2]!==''?Number(_0x3e01f9[_0x4761b2]):0x0;break;case'ARRAYNUM':_0x52d5c6=_0x3e01f9[_0x4761b2]!==''?JSON[_0x2c5d81(0xb06)](_0x3e01f9[_0x4761b2]):[],_0xf744ee=_0x52d5c6[_0x2c5d81(0x8bb)](_0x59e6bc=>Number(_0x59e6bc));break;case'EVAL':_0xf744ee=_0x3e01f9[_0x4761b2]!==''?eval(_0x3e01f9[_0x4761b2]):null;break;case _0x2c5d81(0xd38):_0x52d5c6=_0x3e01f9[_0x4761b2]!==''?JSON['parse'](_0x3e01f9[_0x4761b2]):[],_0xf744ee=_0x52d5c6[_0x2c5d81(0x8bb)](_0x46b149=>eval(_0x46b149));break;case _0x2c5d81(0xb85):_0xf744ee=_0x3e01f9[_0x4761b2]!==''?JSON[_0x2c5d81(0xb06)](_0x3e01f9[_0x4761b2]):'';break;case'ARRAYJSON':_0x52d5c6=_0x3e01f9[_0x4761b2]!==''?JSON['parse'](_0x3e01f9[_0x4761b2]):[],_0xf744ee=_0x52d5c6[_0x2c5d81(0x8bb)](_0x18b3d3=>JSON['parse'](_0x18b3d3));break;case _0x2c5d81(0xd2b):_0xf744ee=_0x3e01f9[_0x4761b2]!==''?new Function(JSON[_0x2c5d81(0xb06)](_0x3e01f9[_0x4761b2])):new Function(_0x2c5d81(0xad1));break;case'ARRAYFUNC':_0x52d5c6=_0x3e01f9[_0x4761b2]!==''?JSON['parse'](_0x3e01f9[_0x4761b2]):[],_0xf744ee=_0x52d5c6[_0x2c5d81(0x8bb)](_0x3057fb=>new Function(JSON['parse'](_0x3057fb)));break;case _0x2c5d81(0x332):_0xf744ee=_0x3e01f9[_0x4761b2]!==''?String(_0x3e01f9[_0x4761b2]):'';break;case'ARRAYSTR':_0x52d5c6=_0x3e01f9[_0x4761b2]!==''?JSON['parse'](_0x3e01f9[_0x4761b2]):[],_0xf744ee=_0x52d5c6['map'](_0x4f2ff3=>String(_0x4f2ff3));break;case'STRUCT':_0x242bb1=_0x3e01f9[_0x4761b2]!==''?JSON[_0x2c5d81(0xb06)](_0x3e01f9[_0x4761b2]):{},_0x21dd2f[_0x798531]={},VisuMZ['ConvertParams'](_0x21dd2f[_0x798531],_0x242bb1);continue;case _0x2c5d81(0xca5):_0x52d5c6=_0x3e01f9[_0x4761b2]!==''?JSON['parse'](_0x3e01f9[_0x4761b2]):[],_0xf744ee=_0x52d5c6['map'](_0x30da3f=>VisuMZ[_0x2c5d81(0x97a)]({},JSON[_0x2c5d81(0xb06)](_0x30da3f)));break;default:continue;}_0x21dd2f[_0x798531]=_0xf744ee;}}}return _0x21dd2f;},(_0x53e0d5=>{const _0x26c40c=_0x54b1a4,_0x5fd6a2=_0x53e0d5[_0x26c40c(0x56b)];for(const _0x32a765 of dependencies){if(!Imported[_0x32a765]){if(_0x26c40c(0x5cf)!=='FvtkZ'){alert(_0x26c40c(0x7df)[_0x26c40c(0xd76)](_0x5fd6a2,_0x32a765)),SceneManager[_0x26c40c(0x3ca)]();break;}else{if(this['isHidden']())return![];if(this[_0x26c40c(0x6a2)]()&&this[_0x26c40c(0x9f2)]())return!![];if(this[_0x26c40c(0xc3c)]()&&this[_0x26c40c(0xb3b)]()){if(this[_0x26c40c(0x5b2)]()&&this[_0x26c40c(0x2e4)]())return![];}else{if(this[_0x26c40c(0x5b2)]())return![];}return!![];}}}const _0x15cd98=_0x53e0d5[_0x26c40c(0x6e6)];if(_0x15cd98['match'](/\[Version[ ](.*?)\]/i)){const _0x380f8e=Number(RegExp['$1']);_0x380f8e!==VisuMZ[label]['version']&&(alert(_0x26c40c(0xcb1)['format'](_0x5fd6a2,_0x380f8e)),SceneManager['exit']());}if(_0x15cd98[_0x26c40c(0x298)](/\[Tier[ ](\d+)\]/i)){const _0x17f6e0=Number(RegExp['$1']);_0x17f6e0<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'['format'](_0x5fd6a2,_0x17f6e0,tier)),SceneManager[_0x26c40c(0x3ca)]()):tier=Math[_0x26c40c(0x9db)](_0x17f6e0,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x26c40c(0x916)],_0x53e0d5[_0x26c40c(0x6a4)]);})(pluginData),VisuMZ[_0x54b1a4(0xca4)]=function(_0x295157){const _0x110a8c=_0x54b1a4;let _0x50c908=[];for(const _0x550d47 of _0x295157){_0x50c908=_0x50c908[_0x110a8c(0x645)](VisuMZ['ConvertActionSequenceTarget'](_0x550d47));}return _0x50c908[_0x110a8c(0x661)](_0x295892=>_0x295892);},VisuMZ[_0x54b1a4(0xc46)]=function(_0x38ee54){const _0x1356af=_0x54b1a4,_0x279958=BattleManager['allBattleMembers']()['filter'](_0xafdbe4=>_0xafdbe4&&_0xafdbe4[_0x1356af(0x9f2)]()),_0x4f0264=BattleManager[_0x1356af(0x644)],_0x3f016c=BattleManager['_target'],_0x19572b=BattleManager[_0x1356af(0x966)]?BattleManager[_0x1356af(0x966)][_0x1356af(0xc27)](0x0):_0x279958;_0x38ee54=_0x38ee54[_0x1356af(0x6d1)]()[_0x1356af(0x2f4)]();if(_0x38ee54===_0x1356af(0xd7c))return _0x1356af(0x6aa)===_0x1356af(0x258)?(this['iterateBattler'](_0x19cd4d[0x0],_0x5752df[0x1],_0x51d47e=>{const _0x594f67=_0x1356af;!_0x51d47e[_0x594f67(0x72c)]()&&(_0x51d47e[_0x594f67(0x4da)](_0x306ed4[0x2],_0x4d4b8a[0x3]),_0x26929c[_0x594f67(0x4da)](_0x51d47e));}),!![]):[_0x4f0264];else{if(_0x38ee54===_0x1356af(0x3db))return[_0x3f016c];else{if(_0x38ee54===_0x1356af(0x6bc)){if(_0x1356af(0xb66)===_0x1356af(0xb66)){if(_0x3f016c){const _0x4006e1=_0x19572b['indexOf'](_0x3f016c);return _0x4006e1>=0x0?[_0x19572b[_0x4006e1-0x1]||_0x3f016c]:[_0x3f016c];}}else{const _0x4751d6=_0x52ccd4[_0x1356af(0x940)](_0x3200b0);return _0x4751d6>=0x0?[_0x5bb69c[_0x4751d6+0x1]||_0x5eb8b7]:[_0x239609];}}else{if(_0x38ee54===_0x1356af(0x2ee)){if(_0x3f016c){if(_0x1356af(0x5bb)===_0x1356af(0x772))return this['svBattlerData']()['shadow'];else{const _0x170bc9=_0x19572b[_0x1356af(0x940)](_0x3f016c);return _0x170bc9>=0x0?[_0x19572b[_0x170bc9+0x1]||_0x3f016c]:[_0x3f016c];}}}else{if(_0x38ee54===_0x1356af(0xc3f)){if(_0x1356af(0x789)!==_0x1356af(0x294))return _0x19572b;else{if(!_0x56db2b)return;if(!this[_0x1356af(0x8a9)])return;if(_0x15719a['isActor']()){}else{if(_0x4aee79[_0x1356af(0xc3c)]()){if(this['constructor']===_0xbf9ca5&&!_0x924a95[_0x1356af(0xb3b)]())return;}}this['_hpGaugeSprite'][_0x1356af(0x915)](_0x356995,'hp');}}else{if(_0x38ee54===_0x1356af(0x5c4))return[_0x4f0264]['concat'](_0x19572b);else{if(_0x38ee54===_0x1356af(0xbcb)){if(_0x1356af(0x98e)===_0x1356af(0x545))this[_0x1356af(0xbc1)](...arguments);else return _0x279958[_0x1356af(0x661)](_0x2d5ae6=>_0x2d5ae6!==_0x4f0264&&!_0x19572b[_0x1356af(0xd4a)](_0x2d5ae6)&&_0x2d5ae6[_0x1356af(0x9ea)]());}else{if(_0x38ee54==='special')return _0x1356af(0xb8c)==='LkGhf'?_0x2bbf9c['BattleCore'][_0x1356af(0x916)][_0x1356af(0x458)][_0x1356af(0x362)]:[VisuMZ[_0x1356af(0x554)]()];else{if(_0x38ee54['match'](/SPECIAL (.*)>/i)){if(_0x1356af(0xcfb)!==_0x1356af(0xcfb)){if(this[_0x1356af(0x3dd)])_0x714ff4=_0x2fe790[_0x1356af(0x9db)](0x0,this[_0x1356af(0x3dd)][_0x1356af(0xdd7)]-0x4);}else{const _0x30c79e=String(RegExp['$1'])['split'](',')[_0x1356af(0x8bb)](_0x1ec7b3=>_0x1ec7b3[_0x1356af(0x2f4)]());return[VisuMZ[_0x1356af(0x8cb)](_0x30c79e)];}}}}}}}}}}if(_0x4f0264){if(_0x38ee54==='alive\x20friends')return _0x1356af(0x569)===_0x1356af(0xb68)?_0x1bad02[_0x1356af(0x387)][_0x1356af(0xd42)][_0x1356af(0xd6c)](this):_0x4f0264['friendsUnit']()['aliveMembers']();else{if(_0x38ee54===_0x1356af(0x8c4))return _0x4f0264[_0x1356af(0x581)]()[_0x1356af(0x6a6)]()[_0x1356af(0x661)](_0x3b96ca=>_0x3b96ca!==_0x4f0264);else{if(_0x38ee54===_0x1356af(0x488))return _0x4f0264['friendsUnit']()[_0x1356af(0x6a6)]()[_0x1356af(0x661)](_0x52a505=>_0x52a505!==_0x3f016c);else{if(_0x38ee54===_0x1356af(0x732))return _0x4f0264[_0x1356af(0x581)]()[_0x1356af(0x4f8)]();else{if(_0x38ee54[_0x1356af(0x298)](/FRIEND INDEX (\d+)/i)){const _0x144edb=Number(RegExp['$1']);return[_0x4f0264[_0x1356af(0x581)]()[_0x1356af(0x328)]()[_0x144edb]];}}}}}if(_0x38ee54===_0x1356af(0x94d))return _0x4f0264[_0x1356af(0xb1e)]()['aliveMembers']();else{if(_0x38ee54===_0x1356af(0xc3b)){if(_0x1356af(0x8a6)!==_0x1356af(0x4a8))return _0x4f0264[_0x1356af(0xb1e)]()[_0x1356af(0x6a6)]()['filter'](_0x1face7=>_0x1face7!==_0x3f016c);else _0x3acdca['BattleCore'][_0x1356af(0x916)][_0x1356af(0xc85)][_0x1356af(0x368)]&&(this[_0x1356af(0xc39)](),this[_0x1356af(0xabd)]());}else{if(_0x38ee54==='dead\x20opponents')return _0x1356af(0x656)===_0x1356af(0x656)?_0x4f0264['opponentsUnit']()[_0x1356af(0x4f8)]():_0x15d27b['CoreEngine']['Settings'][_0x1356af(0x788)][_0x1356af(0x38a)];else{if(_0x38ee54[_0x1356af(0x298)](/OPPONENT INDEX (\d+)/i)){const _0x285f20=Number(RegExp['$1']);return[_0x4f0264[_0x1356af(0xb1e)]()[_0x1356af(0x328)]()[_0x285f20]];}}}}}if(_0x38ee54==='alive\x20actors')return $gameParty['aliveMembers']();else{if(_0x38ee54===_0x1356af(0x418))return $gameParty['aliveMembers']()[_0x1356af(0x661)](_0x1e05b7=>_0x1e05b7!==_0x4f0264);else{if(_0x38ee54===_0x1356af(0x42f))return _0x1356af(0x2ca)!==_0x1356af(0x27e)?$gameParty[_0x1356af(0x6a6)]()[_0x1356af(0x661)](_0x8e8a4b=>_0x8e8a4b!==_0x3f016c):this['svBattlerData']()[_0x1356af(0x613)];else{if(_0x38ee54===_0x1356af(0xced))return $gameParty[_0x1356af(0x4f8)]();else{if(_0x38ee54['match'](/ACTOR INDEX (\d+)/i)){const _0x5a0323=Number(RegExp['$1']);return[$gameParty[_0x1356af(0x328)]()[_0x5a0323]];}else{if(_0x38ee54['match'](/ACTOR ID (\d+)/i)){const _0x243c45=Number(RegExp['$1']);return[$gameActors[_0x1356af(0x6fe)](_0x243c45)];}}}}}}if(_0x38ee54===_0x1356af(0x724))return $gameTroop['aliveMembers']();else{if(_0x38ee54===_0x1356af(0xd6d))return $gameTroop[_0x1356af(0x6a6)]()[_0x1356af(0x661)](_0x5d7835=>_0x5d7835!==_0x4f0264);else{if(_0x38ee54===_0x1356af(0x66e))return $gameTroop['aliveMembers']()[_0x1356af(0x661)](_0x5c82c5=>_0x5c82c5!==_0x3f016c);else{if(_0x38ee54===_0x1356af(0x71c)){if(_0x1356af(0x348)===_0x1356af(0x593))this['_actorCommandWindow'][_0x1356af(0x883)](this[_0x1356af(0x59a)]),this[_0x1356af(0xa92)][_0x1356af(0x883)](this[_0x1356af(0x59a)]);else return $gameTroop[_0x1356af(0x4f8)]();}else{if(_0x38ee54['match'](/ENEMY INDEX (\d+)/i)){const _0x411b74=Number(RegExp['$1']);return[$gameTroop[_0x1356af(0x328)]()[_0x411b74]];}else{if(_0x38ee54[_0x1356af(0x298)](/ENEMY ID (\d+)/i)){const _0x4638b7=Number(RegExp['$1']);return $gameTroop[_0x1356af(0x6a6)]()[_0x1356af(0x661)](_0x556fcb=>_0x556fcb['enemyId']()===_0x4638b7);}}}}}}if(_0x38ee54===_0x1356af(0xaff))return _0x279958[_0x1356af(0x661)](_0x271e88=>_0x271e88['isAlive']());else{if(_0x38ee54===_0x1356af(0x647))return _0x279958[_0x1356af(0x661)](_0x5e90a4=>_0x5e90a4[_0x1356af(0x6a2)]()&&_0x5e90a4!==_0x4f0264);else{if(_0x38ee54===_0x1356af(0xcab))return _0x279958[_0x1356af(0x661)](_0x9582cf=>_0x9582cf['isAlive']()&&_0x9582cf!==_0x3f016c);else{if(_0x38ee54===_0x1356af(0xd68)){if(_0x1356af(0xa8d)!=='aYFzR')_0x1f0c03[_0x1356af(0x387)][_0x1356af(0x484)][_0x1356af(0xd6c)](this),this[_0x1356af(0x4a5)]();else return _0x279958[_0x1356af(0x661)](_0x1bc776=>_0x1bc776[_0x1356af(0x5b2)]());}}}}return[];},VisuMZ[_0x54b1a4(0x554)]=function(){return BattleManager['_target'];},VisuMZ['GetActionSequenceSpecialTargetWithFlags']=function(_0x4528d0){const _0x4afa4e=_0x54b1a4;return BattleManager[_0x4afa4e(0xaf2)];},PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0xcec),_0x232467=>{const _0x2a7659=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2a7659(0x97a)](_0x232467,_0x232467);const _0x469284=$gameTemp[_0x2a7659(0x859)](),_0x3a0f58=BattleManager[_0x2a7659(0x65a)],_0x3871d7=BattleManager['_subject'],_0xadbfdd=BattleManager[_0x2a7659(0x966)]?BattleManager[_0x2a7659(0x966)][_0x2a7659(0xc27)](0x0):[],_0x4e713d=BattleManager[_0x2a7659(0x82e)];if(!_0x469284||!_0x3a0f58||!_0x3871d7)return;if(!_0x3a0f58[_0x2a7659(0x7b6)]())return;if(_0x232467['DisplayAction'])_0x4e713d['displayAction'](_0x3871d7,_0x3a0f58[_0x2a7659(0x7b6)]());_0x232467[_0x2a7659(0xa54)]&&_0x4e713d['push'](_0x2a7659(0xc60),_0x3871d7,_0xadbfdd,!![]);if(_0x232467['ActionStart'])_0x4e713d[_0x2a7659(0x519)]('performActionStart',_0x3871d7,_0x3a0f58);if(_0x232467[_0x2a7659(0x343)])_0x4e713d[_0x2a7659(0x519)](_0x2a7659(0x83f));if(_0x232467[_0x2a7659(0x6b3)])_0x4e713d[_0x2a7659(0x519)](_0x2a7659(0x44d),_0x3871d7,_0x3a0f58);if(_0x232467[_0x2a7659(0xb83)])_0x4e713d[_0x2a7659(0x519)]('waitForAnimation');_0x469284[_0x2a7659(0xc6a)](_0x2a7659(0xc00));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x3da),_0x2a513d=>{const _0x494345=_0x54b1a4;if(!SceneManager[_0x494345(0xbbd)]())return;VisuMZ[_0x494345(0x97a)](_0x2a513d,_0x2a513d);const _0x4c2329=$gameTemp[_0x494345(0x859)](),_0x4ba49f=BattleManager['_action'],_0x1b86ac=BattleManager[_0x494345(0x644)],_0x1fda2d=BattleManager[_0x494345(0x966)]?BattleManager[_0x494345(0x966)]['slice'](0x0):[],_0x3c9b1f=BattleManager[_0x494345(0x82e)],_0x3b2f6f=_0x2a513d['DualWield']??![];if(!_0x4c2329||!_0x4ba49f||!_0x1b86ac)return;if(!_0x4ba49f['item']())return;let _0x15b649=_0x3b2f6f?_0x3c9b1f[_0x494345(0x423)](_0x1b86ac):0x1;for(let _0x25a4d0=0x0;_0x25a4d0<_0x15b649;_0x25a4d0++){if(_0x494345(0x3b8)===_0x494345(0x944))return _0x52b237(_0x56cc84['$1'])||0x0;else{_0x3b2f6f&&_0x1b86ac[_0x494345(0xa2c)]()&&_0x3c9b1f['push'](_0x494345(0x8d2),_0x1b86ac,_0x25a4d0);if(_0x2a513d[_0x494345(0x9ff)])_0x3c9b1f[_0x494345(0x519)]('performAction',_0x1b86ac,_0x4ba49f);if(_0x2a513d['WaitCount']>0x0)_0x3c9b1f[_0x494345(0x519)](_0x494345(0x2e8),_0x2a513d[_0x494345(0x366)]);if(_0x2a513d[_0x494345(0x547)])_0x3c9b1f[_0x494345(0x519)](_0x494345(0x767),_0x1b86ac,_0x1fda2d,_0x4ba49f['item']()[_0x494345(0xbb4)]);if(_0x2a513d[_0x494345(0xb83)])_0x3c9b1f[_0x494345(0x519)](_0x494345(0x6c1));for(const _0x4f2b60 of _0x1fda2d){if(_0x494345(0xd85)===_0x494345(0xd85)){if(!_0x4f2b60)continue;if(_0x2a513d[_0x494345(0x814)])_0x3c9b1f['push'](_0x494345(0x4b4),_0x1b86ac,_0x4f2b60);}else{if(!_0x53c4db[_0x494345(0x387)][_0x494345(0x916)][_0x494345(0x6f0)][_0x494345(0x8da)])return![];if(_0x20e378[_0x494345(0x91a)]())return!![];return _0x27057a[_0x494345(0x24f)]&&_0xaeb61f[_0x494345(0xb4c)]();}}}}if(_0x3b2f6f&&_0x1b86ac[_0x494345(0xa2c)]()){if(_0x494345(0xb42)===_0x494345(0x625))return _0x4827ab['jsScaleUp'][_0x494345(0xd6c)](this);else _0x3c9b1f[_0x494345(0x519)](_0x494345(0x4d5),_0x1b86ac);}if(_0x2a513d[_0x494345(0xa54)])_0x3c9b1f['push'](_0x494345(0xc60),_0x1b86ac,_0x1fda2d,![]);_0x4c2329[_0x494345(0xc6a)](_0x494345(0xc00));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x81f),_0x2fa236=>{const _0x3d4609=_0x54b1a4;if(!SceneManager[_0x3d4609(0xbbd)]())return;VisuMZ['ConvertParams'](_0x2fa236,_0x2fa236);const _0x5e47e5=$gameTemp[_0x3d4609(0x859)](),_0x522f84=BattleManager['_action'],_0x5a6b2c=BattleManager['_subject'],_0x1c1cf5=BattleManager['_allTargets']?BattleManager[_0x3d4609(0x966)]['slice'](0x0):[],_0x5092a9=BattleManager[_0x3d4609(0x82e)],_0x5dcb47=_0x2fa236[_0x3d4609(0xc97)]??![];if(!_0x5e47e5||!_0x522f84||!_0x5a6b2c)return;if(!_0x522f84[_0x3d4609(0x7b6)]())return;let _0x3bc816=_0x5dcb47?_0x5092a9[_0x3d4609(0x423)](_0x5a6b2c):0x1;for(let _0x3d1ea2=0x0;_0x3d1ea2<_0x3bc816;_0x3d1ea2++){for(const _0x2a04d6 of _0x1c1cf5){if('faCra'!==_0x3d4609(0x9a5)){if(this[_0x3d4609(0x5b2)]())return;this[_0x3d4609(0x4d3)]=!![],this[_0x3d4609(0x528)]=![];}else{if(!_0x2a04d6)continue;_0x5dcb47&&_0x5a6b2c[_0x3d4609(0xa2c)]()&&_0x5092a9[_0x3d4609(0x519)]('setActiveWeaponSet',_0x5a6b2c,_0x3d1ea2);if(_0x2fa236[_0x3d4609(0x9ff)])_0x5092a9[_0x3d4609(0x519)](_0x3d4609(0x357),_0x5a6b2c,_0x522f84);if(_0x2fa236[_0x3d4609(0x4ba)]>0x0)_0x5092a9[_0x3d4609(0x519)](_0x3d4609(0x2e8),_0x2fa236[_0x3d4609(0x4ba)]);if(_0x2fa236[_0x3d4609(0x547)])_0x5092a9['push']('showAnimation',_0x5a6b2c,[_0x2a04d6],_0x522f84[_0x3d4609(0x7b6)]()[_0x3d4609(0xbb4)]);if(_0x2fa236['WaitCount2']>0x0)_0x5092a9[_0x3d4609(0x519)](_0x3d4609(0x2e8),_0x2fa236[_0x3d4609(0xd39)]);if(_0x2fa236['ActionEffect'])_0x5092a9[_0x3d4609(0x519)](_0x3d4609(0x4b4),_0x5a6b2c,_0x2a04d6);}}}_0x5dcb47&&_0x5a6b2c['isActor']()&&_0x5092a9[_0x3d4609(0x519)](_0x3d4609(0x4d5),_0x5a6b2c);if(_0x2fa236['ApplyImmortal'])_0x5092a9[_0x3d4609(0x519)](_0x3d4609(0xc60),_0x5a6b2c,_0x1c1cf5,![]);_0x5e47e5[_0x3d4609(0xc6a)](_0x3d4609(0xc00));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Set_FinishAction',_0x179feb=>{const _0x4f2c71=_0x54b1a4;if(!SceneManager[_0x4f2c71(0xbbd)]())return;VisuMZ[_0x4f2c71(0x97a)](_0x179feb,_0x179feb);const _0x1701bd=$gameTemp[_0x4f2c71(0x859)](),_0x412172=BattleManager[_0x4f2c71(0x65a)],_0x3114b2=BattleManager['_subject'],_0x5a445c=BattleManager[_0x4f2c71(0x966)]?BattleManager[_0x4f2c71(0x966)][_0x4f2c71(0xc27)](0x0):[],_0x3a4dc6=BattleManager[_0x4f2c71(0x82e)];if(!_0x1701bd||!_0x412172||!_0x3114b2)return;if(!_0x412172[_0x4f2c71(0x7b6)]())return;if(_0x179feb['ApplyImmortal'])_0x3a4dc6['push'](_0x4f2c71(0xc60),_0x3114b2,_0x5a445c,![]);if(_0x179feb[_0x4f2c71(0xa1d)])_0x3a4dc6[_0x4f2c71(0x519)](_0x4f2c71(0xae5));if(_0x179feb[_0x4f2c71(0x5fe)])_0x3a4dc6[_0x4f2c71(0x519)](_0x4f2c71(0xd9f));if(_0x179feb[_0x4f2c71(0x744)])_0x3a4dc6[_0x4f2c71(0x519)](_0x4f2c71(0x207));if(_0x179feb[_0x4f2c71(0x4f5)])_0x3a4dc6[_0x4f2c71(0x519)]('performActionEnd',_0x3114b2);if(_0x179feb[_0x4f2c71(0x343)])_0x3a4dc6['push'](_0x4f2c71(0x83f));_0x1701bd[_0x4f2c71(0xc6a)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x41e),_0x40291a=>{const _0x3b7840=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3b7840(0x81b)])return;VisuMZ[_0x3b7840(0x97a)](_0x40291a,_0x40291a);const _0x1fa746=$gameTemp[_0x3b7840(0x859)](),_0x24659d=_0x40291a[_0x3b7840(0xbb8)];if(!_0x1fa746)return;$gameScreen[_0x3b7840(0x8c7)](_0x40291a[_0x3b7840(0x86b)],_0x40291a[_0x3b7840(0x8db)],_0x40291a['EasingType']);if(_0x24659d)_0x1fa746[_0x3b7840(0xc6a)](_0x3b7840(0xb64));}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],'ActSeq_Angle_Reset',_0x5b5b4e=>{const _0x51088a=_0x54b1a4;if(!SceneManager[_0x51088a(0xbbd)]())return;if(!Imported[_0x51088a(0x81b)])return;VisuMZ[_0x51088a(0x97a)](_0x5b5b4e,_0x5b5b4e);const _0x708531=$gameTemp[_0x51088a(0x859)](),_0x562c57=_0x5b5b4e['WaitForAngle'];if(!_0x708531)return;$gameScreen[_0x51088a(0x8c7)](0x0,_0x5b5b4e[_0x51088a(0x8db)],_0x5b5b4e['EasingType']);if(_0x562c57)_0x708531['setWaitMode'](_0x51088a(0xb64));}),PluginManager['registerCommand'](pluginData['name'],_0x54b1a4(0x7ee),_0x187d87=>{const _0x7c4837=_0x54b1a4;if(!SceneManager[_0x7c4837(0xbbd)]())return;if(!Imported[_0x7c4837(0x81b)])return;const _0x1d2e73=$gameTemp[_0x7c4837(0x859)]();if(!_0x1d2e73)return;_0x1d2e73[_0x7c4837(0xc6a)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xd5d),_0x149c6a=>{const _0xedabbc=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xedabbc(0x97a)](_0x149c6a,_0x149c6a);const _0xe36f2=$gameTemp[_0xedabbc(0x859)](),_0x235abe=BattleManager['_action'],_0x3202ab=BattleManager['_subject'],_0x422a47=VisuMZ[_0xedabbc(0xca4)](_0x149c6a[_0xedabbc(0x2f2)]),_0x2b0621=_0x149c6a['Mirror'],_0x1ec7d2=BattleManager[_0xedabbc(0x82e)];if(!_0xe36f2||!_0x235abe||!_0x3202ab)return;if(!_0x235abe['item']())return;let _0x585808=_0x235abe[_0xedabbc(0x7b6)]()[_0xedabbc(0xbb4)];if(_0x585808<0x0)_0x585808=_0x3202ab[_0xedabbc(0xba3)]();$gameTemp[_0xedabbc(0x89d)](_0x422a47,_0x585808,_0x2b0621),_0x149c6a[_0xedabbc(0xb83)]&&(_0xedabbc(0x42d)==='wYYVt'?_0xe36f2[_0xedabbc(0xc6a)]('battleAnimation'):_0x30680a['BattleCore']['JS'][_0x495856][_0xedabbc(0xd6c)](this,this['subject'](),this[_0xedabbc(0xc0d)](),_0x4ca51b,_0x470667));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x972),_0x1b330a=>{const _0x37fa9a=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x37fa9a(0x97a)](_0x1b330a,_0x1b330a);const _0x26ca84=$gameTemp['getLastPluginCommandInterpreter'](),_0x3cc443=BattleManager[_0x37fa9a(0x644)],_0x1cce1e=VisuMZ[_0x37fa9a(0xca4)](_0x1b330a[_0x37fa9a(0x2f2)]),_0x519f59=_0x1b330a[_0x37fa9a(0x457)],_0x8d6612=BattleManager['_logWindow'];if(!_0x26ca84||!_0x3cc443)return;const _0x145d8d=_0x3cc443[_0x37fa9a(0xba3)]();$gameTemp[_0x37fa9a(0x89d)](_0x1cce1e,_0x145d8d,_0x519f59);if(_0x1b330a[_0x37fa9a(0xb83)]){if('ACNIr'==='RJeAk'){if(this['_actor']){if(!_0x1813c6[_0x37fa9a(0xc17)][_0x37fa9a(0x51d)](this[_0x37fa9a(0x2f3)],_0x8e67a4))return!![];if(!_0x5dc19a[_0x37fa9a(0xc17)][_0x37fa9a(0x932)](this[_0x37fa9a(0x2f3)],_0x43717f))return!![];if(!_0x495b76[_0x37fa9a(0xc17)]['CheckVisibleSkillNotetags'](this[_0x37fa9a(0x2f3)],_0x1e6460))return!![];}}else _0x26ca84['setWaitMode'](_0x37fa9a(0xb2b));}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0xa43),_0x4a7e56=>{const _0x8a0c8d=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x8a0c8d(0x97a)](_0x4a7e56,_0x4a7e56);const _0x327f44=_0x5c2e9f[_0x8a0c8d(0x804)](_0x4a7e56[_0x8a0c8d(0x7e9)]);if(_0x327f44<=0x0)return;const _0x41b43f=$gameTemp[_0x8a0c8d(0x859)](),_0x5c2e9f=BattleManager[_0x8a0c8d(0x644)],_0x3c2df3=VisuMZ[_0x8a0c8d(0xca4)](_0x4a7e56['Targets']),_0x39d5f5=_0x4a7e56[_0x8a0c8d(0x457)],_0x5492f5=BattleManager['_logWindow'];if(!_0x41b43f||!_0x5c2e9f)return;$gameTemp[_0x8a0c8d(0x89d)](_0x3c2df3,_0x327f44,_0x39d5f5),_0x4a7e56[_0x8a0c8d(0xb83)]&&(_0x8a0c8d(0xd80)!==_0x8a0c8d(0xd59)?_0x41b43f['setWaitMode'](_0x8a0c8d(0xb2b)):(this[_0x8a0c8d(0x86a)]=this[_0x8a0c8d(0x86a)]||0x0,this[_0x8a0c8d(0x86a)]++,this[_0x8a0c8d(0x91d)]={}));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x5e8),_0x31e89a=>{const _0x45432c=_0x54b1a4;if(!SceneManager[_0x45432c(0xbbd)]())return;VisuMZ[_0x45432c(0x97a)](_0x31e89a,_0x31e89a);const _0x2aba6e=$gameTemp['getLastPluginCommandInterpreter'](),_0x19648c=BattleManager['_action'],_0x517219=_0x31e89a[_0x45432c(0x457)],_0x5085e3=VisuMZ['CreateActionSequenceTargets'](_0x31e89a[_0x45432c(0x2f2)]);if(!_0x2aba6e||!_0x19648c)return;if(!_0x19648c['item']())return;for(const _0x31d4a8 of _0x5085e3){if(_0x45432c(0xb97)===_0x45432c(0xb97)){if(!_0x31d4a8)continue;_0x31d4a8[_0x45432c(0x44d)](_0x19648c,_0x517219);}else return!_0x1ed22c[_0x45432c(0xb98)]()?this['command301_PreBattleEvent'](_0x2dd24a):_0x50fd14[_0x45432c(0x387)][_0x45432c(0x9c4)][_0x45432c(0xd6c)](this,_0x44cf7d);}if(_0x31e89a[_0x45432c(0xb83)])_0x2aba6e[_0x45432c(0xc6a)]('battleAnimation');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Animation_ChangeBattlePortrait',_0x375d75=>{const _0x2c8d20=_0x54b1a4;VisuMZ[_0x2c8d20(0x97a)](_0x375d75,_0x375d75);const _0x4a9889=$gameTemp[_0x2c8d20(0x859)](),_0x25aa83=VisuMZ[_0x2c8d20(0xca4)](_0x375d75[_0x2c8d20(0x2f2)]),_0x43a820=_0x375d75[_0x2c8d20(0x65d)];if(!_0x43a820)return;for(const _0x5e66f9 of _0x25aa83){if(!_0x5e66f9)continue;if(!_0x5e66f9[_0x2c8d20(0xa2c)]())continue;_0x5e66f9[_0x2c8d20(0xc93)](_0x43a820);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x65f),_0x587710=>{const _0x57c131=_0x54b1a4;if(!SceneManager[_0x57c131(0xc22)])return;if(!SceneManager[_0x57c131(0xc22)][_0x57c131(0xaca)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x57c131(0x97a)](_0x587710,_0x587710);const _0x456d48=$gameTemp[_0x57c131(0x859)](),_0x37ac9e=Math[_0x57c131(0x68d)](_0x587710[_0x57c131(0xc8e)]),_0xce66f0=Math[_0x57c131(0x68d)](_0x587710[_0x57c131(0x95f)]);$gameTemp['requestPointAnimation'](_0x37ac9e,_0xce66f0,_0x587710[_0x57c131(0x276)],_0x587710[_0x57c131(0x457)],_0x587710[_0x57c131(0x2b1)]);if(_0x587710[_0x57c131(0x96d)]&&_0x456d48){if('ITcOe'!==_0x57c131(0x88c))return _0xab350f[_0x57c131(0xaf2)];else SceneManager[_0x57c131(0xc22)][_0x57c131(0xaca)][_0x57c131(0x350)](),_0x456d48[_0x57c131(0xc6a)](_0x57c131(0xb2b));}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x6be),_0x5f0b8e=>{const _0x286b96=_0x54b1a4;if(!SceneManager[_0x286b96(0xbbd)]())return;VisuMZ[_0x286b96(0x97a)](_0x5f0b8e,_0x5f0b8e);const _0x41abc5=$gameTemp['getLastPluginCommandInterpreter'](),_0x4e3000=VisuMZ['CreateActionSequenceTargets'](_0x5f0b8e['Targets']),_0x2573f3=_0x5f0b8e['AnimationID'],_0x384fab=_0x5f0b8e[_0x286b96(0x457)];if(!_0x41abc5)return;$gameTemp[_0x286b96(0x89d)](_0x4e3000,_0x2573f3,_0x384fab);if(_0x5f0b8e[_0x286b96(0xb83)])_0x41abc5[_0x286b96(0xc6a)]('battleAnimation');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xac0),_0x6a4e8c=>{const _0x53cf0c=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;const _0x1b7938=$gameTemp[_0x53cf0c(0x859)]();if(!_0x1b7938)return;_0x1b7938[_0x53cf0c(0xc6a)](_0x53cf0c(0xb2b));}),PluginManager['registerCommand'](pluginData['name'],_0x54b1a4(0x439),_0x26f17e=>{const _0xbcb14f=_0x54b1a4;if(!SceneManager[_0xbcb14f(0xbbd)]())return;VisuMZ['ConvertParams'](_0x26f17e,_0x26f17e);const _0x3111a8=BattleManager[_0xbcb14f(0x82e)],_0x1421ef=_0x26f17e[_0xbcb14f(0xcd4)]&&Imported[_0xbcb14f(0x698)];_0x3111a8[_0xbcb14f(0xcd7)](_0x26f17e[_0xbcb14f(0x9a1)]),_0x1421ef&&Imported[_0xbcb14f(0x698)]&&$gameSystem[_0xbcb14f(0x842)](_0x26f17e[_0xbcb14f(0x9a1)]||'',_0x26f17e[_0xbcb14f(0xd73)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],'ActSeq_BattleLog_Clear',_0x50b5a9=>{const _0x1f4a13=_0x54b1a4;if(!SceneManager[_0x1f4a13(0xbbd)]())return;const _0x347070=BattleManager[_0x1f4a13(0x82e)];_0x347070[_0x1f4a13(0x207)]();}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x8aa),_0x3d0147=>{const _0x33aa32=_0x54b1a4;if(!SceneManager[_0x33aa32(0xbbd)]())return;const _0x1818b3=$gameTemp['getLastPluginCommandInterpreter'](),_0x2ca52d=BattleManager[_0x33aa32(0x65a)],_0x2e1dd8=BattleManager[_0x33aa32(0x644)],_0x593a79=BattleManager[_0x33aa32(0x82e)];if(!_0x1818b3||!_0x2ca52d||!_0x2e1dd8)return;if(!_0x2ca52d[_0x33aa32(0x7b6)]())return;_0x593a79[_0x33aa32(0xc1a)](_0x2e1dd8,_0x2ca52d[_0x33aa32(0x7b6)]()),_0x1818b3[_0x33aa32(0xc6a)](_0x33aa32(0xc00));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xb55),_0x171814=>{const _0x213a42=_0x54b1a4;if(!SceneManager[_0x213a42(0xbbd)]())return;const _0x57480b=BattleManager[_0x213a42(0x82e)];_0x57480b['popBaseLine']();}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x20e),_0xbeabf2=>{const _0x40c3a5=_0x54b1a4;if(!SceneManager[_0x40c3a5(0xbbd)]())return;const _0x43a501=BattleManager[_0x40c3a5(0x82e)];_0x43a501[_0x40c3a5(0xaed)]();}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x941),_0x16895f=>{const _0x2b9ecf=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;const _0x45905a=BattleManager['_logWindow'];_0x45905a[_0x2b9ecf(0x742)]();}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xb7c),_0x51256c=>{const _0x757268=_0x54b1a4;if(!SceneManager[_0x757268(0xbbd)]())return;VisuMZ['ConvertParams'](_0x51256c,_0x51256c),SceneManager[_0x757268(0xc22)][_0x757268(0x217)](_0x51256c[_0x757268(0xa31)]);}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xb25),_0x52d2d1=>{const _0x26c4cc=_0x54b1a4;if(!SceneManager[_0x26c4cc(0xbbd)]())return;const _0x373dab=$gameTemp[_0x26c4cc(0x859)]();_0x373dab[_0x26c4cc(0xc6a)](_0x26c4cc(0xc00));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xcee),_0x580ca4=>{const _0x184038=_0x54b1a4;if(!SceneManager[_0x184038(0xbbd)]())return;const _0x46cba3=$gameTemp[_0x184038(0x859)](),_0x5cf2c6=BattleManager[_0x184038(0x82e)];_0x5cf2c6['waitForNewLine'](),_0x46cba3['setWaitMode'](_0x184038(0xc00));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xd03),_0x488723=>{const _0x19ab00=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x19ab00(0x81b)])return;VisuMZ[_0x19ab00(0x97a)](_0x488723,_0x488723);const _0x58ddf8=$gameScreen[_0x19ab00(0xa25)]();_0x58ddf8[_0x19ab00(0xd8b)]=_0x488723[_0x19ab00(0xc23)];}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x400),_0x304688=>{const _0x1ecff4=_0x54b1a4;if(!SceneManager[_0x1ecff4(0xbbd)]())return;if(!Imported[_0x1ecff4(0x81b)])return;VisuMZ[_0x1ecff4(0x97a)](_0x304688,_0x304688);const _0x42f2d6=$gameTemp[_0x1ecff4(0x859)](),_0x592323=_0x304688['WaitForCamera'];$gameScreen[_0x1ecff4(0x452)](_0x304688['FocusX'],_0x304688[_0x1ecff4(0xc01)],_0x304688[_0x1ecff4(0x8db)],_0x304688[_0x1ecff4(0x4e4)]);if(_0x592323)_0x42f2d6[_0x1ecff4(0xc6a)]('battleCamera');}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0xd0b),_0xd2747=>{const _0x56f6cf=_0x54b1a4;if(!SceneManager[_0x56f6cf(0xbbd)]())return;if(!Imported[_0x56f6cf(0x81b)])return;VisuMZ['ConvertParams'](_0xd2747,_0xd2747);const _0x3349a7=$gameTemp['getLastPluginCommandInterpreter'](),_0x2993c5=VisuMZ['CreateActionSequenceTargets'](_0xd2747[_0x56f6cf(0x2f2)]),_0x2b61fd=_0xd2747['WaitForCamera'];$gameScreen[_0x56f6cf(0x8ea)](_0x2993c5,_0xd2747[_0x56f6cf(0x8db)],_0xd2747[_0x56f6cf(0x4e4)]);if(_0x2b61fd)_0x3349a7[_0x56f6cf(0xc6a)](_0x56f6cf(0x2c0));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x22e),_0x32b689=>{const _0x352cd5=_0x54b1a4;if(!SceneManager[_0x352cd5(0xbbd)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x352cd5(0x97a)](_0x32b689,_0x32b689);const _0x270584=$gameTemp[_0x352cd5(0x859)](),_0x20f641=_0x32b689['WaitForCamera'];$gameScreen[_0x352cd5(0xb8e)](_0x32b689[_0x352cd5(0x8bd)],_0x32b689[_0x352cd5(0x567)],_0x32b689['Duration'],_0x32b689[_0x352cd5(0x4e4)]);if(_0x20f641)_0x270584[_0x352cd5(0xc6a)]('battleCamera');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x8ac),_0x32bbf8=>{const _0x42b0fe=_0x54b1a4;if(!SceneManager[_0x42b0fe(0xbbd)]())return;if(!Imported[_0x42b0fe(0x81b)])return;VisuMZ[_0x42b0fe(0x97a)](_0x32bbf8,_0x32bbf8);const _0x1628d5=$gameTemp[_0x42b0fe(0x859)](),_0x49366a=_0x32bbf8[_0x42b0fe(0x949)],_0x1e446b=_0x32bbf8['ResetOffset'],_0x18700f=_0x32bbf8['WaitForCamera'];if(_0x49366a){if(_0x42b0fe(0xaf5)!=='cPGNP'){const _0x28f700=Math[_0x42b0fe(0x68d)](Graphics['width']/0x2),_0x1eaa7b=Math[_0x42b0fe(0x68d)](Graphics[_0x42b0fe(0xdd7)]/0x2);$gameScreen[_0x42b0fe(0x452)](_0x28f700,_0x1eaa7b,_0x32bbf8[_0x42b0fe(0x8db)],_0x32bbf8[_0x42b0fe(0x4e4)]);}else return this[_0x42b0fe(0x4d3)];}_0x1e446b&&$gameScreen[_0x42b0fe(0xb8e)](0x0,0x0,_0x32bbf8[_0x42b0fe(0x8db)],_0x32bbf8[_0x42b0fe(0x4e4)]);if(_0x18700f)_0x1628d5['setWaitMode'](_0x42b0fe(0x2c0));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x6e4),_0x4f2d05=>{const _0x356407=_0x54b1a4;if(!SceneManager[_0x356407(0xbbd)]())return;if(!Imported[_0x356407(0x81b)])return;const _0x5c01b4=$gameTemp[_0x356407(0x859)]();if(!_0x5c01b4)return;_0x5c01b4[_0x356407(0xc6a)](_0x356407(0x2c0));}),VisuMZ[_0x54b1a4(0x387)]['CreateCutinSettings']=function(_0x1e347e){const _0x4c8de9=_0x54b1a4;_0x1e347e['portraitFilename']='';const _0x2aa04f=VisuMZ['VisualCutinEffect'][_0x4c8de9(0x3d5)](_0x1e347e),_0x3f3538=VisuMZ[_0x4c8de9(0xca4)](_0x1e347e['Targets'])[0x0]||null;if(_0x3f3538){if('kZwMK'==='kZwMK'){_0x2aa04f[_0x4c8de9(0x684)]=_0x3f3538[_0x4c8de9(0x4dc)](),_0x2aa04f[_0x4c8de9(0x514)]=_0x3f3538['visualCutinPortraitIndex'](),_0x2aa04f[_0x4c8de9(0x4b7)]=_0x3f3538[_0x4c8de9(0x653)](),_0x2aa04f[_0x4c8de9(0x731)]=_0x3f3538[_0x4c8de9(0xc2e)]();if(_0x3f3538[_0x4c8de9(0xc3c)]()){_0x3f3538[_0x4c8de9(0xcff)]()&&(_0x2aa04f['portraitFlipHorz']=!_0x2aa04f[_0x4c8de9(0x3f3)]);_0x3f3538['flipVisualCutinVert']()&&(_0x2aa04f[_0x4c8de9(0xb38)]=!_0x2aa04f[_0x4c8de9(0xb38)]);if(_0x2aa04f['portraitType']===_0x4c8de9(0xb9c)){if('qgbpz'===_0x4c8de9(0xbc5))_0x2aa04f[_0x4c8de9(0x3f3)]=!_0x2aa04f[_0x4c8de9(0x3f3)];else{if(this[_0x4c8de9(0x8ec)]==='turn'){if(_0x5be4df[_0x4c8de9(0x7e7)]())return![];}return _0x5f6e7c[_0x4c8de9(0x387)][_0x4c8de9(0x5f0)][_0x4c8de9(0xd6c)](this);}}_0x1e347e[_0x4c8de9(0xb3f)][_0x4c8de9(0xbf0)]&&(_0x2aa04f[_0x4c8de9(0xb17)]*=-0x1);if(_0x1e347e['ExtraSettings'][_0x4c8de9(0x29b)]){if(_0x4c8de9(0x4c9)===_0x4c8de9(0x4c9))_0x2aa04f[_0x4c8de9(0x6ff)]*=-0x1;else{const _0x38d565=this[_0x4c8de9(0x7b6)]()[_0x4c8de9(0x508)];if(_0x38d565[_0x4c8de9(0x298)](/RANDOM/i))return![];if(_0x38d565[_0x4c8de9(0x298)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x38d565[_0x4c8de9(0x298)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x38d565['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x38d565[_0x4c8de9(0x298)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return _0x1d180a[_0x4c8de9(0x387)]['Game_Action_needsSelection'][_0x4c8de9(0xd6c)](this);}}_0x2aa04f[_0x4c8de9(0x33a)]+=_0x1e347e[_0x4c8de9(0xb3f)][_0x4c8de9(0x9a8)]??0x0;}}else{if(!_0x239ba2['isSceneBattle']())return;_0x589271[_0x4c8de9(0x97a)](_0x3906d5,_0x3892cb);const _0xfd75c0=_0x3f0d1d[_0x4c8de9(0xcc1)];_0x23bb2b[_0x4c8de9(0xc22)][_0x4c8de9(0x61e)](_0xfd75c0);}}return _0x2aa04f;},PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],'ActSeq_Cutin_AddVisualCutinEffect',_0x111e74=>{const _0x131521=_0x54b1a4;if(!SceneManager[_0x131521(0xbbd)]())return;if(!Imported[_0x131521(0xbeb)])return;VisuMZ[_0x131521(0x97a)](_0x111e74,_0x111e74);const _0x424ae3=VisuMZ[_0x131521(0x387)]['CreateCutinSettings'](_0x111e74);SceneManager[_0x131521(0xc22)][_0x131521(0x6d9)](_0x424ae3);const _0x2b1541=$gameTemp['getLastPluginCommandInterpreter']();_0x2b1541&&_0x111e74[_0x131521(0x42b)]&&_0x2b1541['setWaitMode'](_0x131521(0x5b3));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x9f4),_0x3d7bd6=>{const _0x438a93=_0x54b1a4;if(!SceneManager[_0x438a93(0xbbd)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ['ConvertParams'](_0x3d7bd6,_0x3d7bd6),SceneManager[_0x438a93(0xc22)][_0x438a93(0x28f)]();const _0x507df6=$gameTemp[_0x438a93(0x859)]();_0x507df6&&_0x3d7bd6[_0x438a93(0x58d)]&&_0x507df6['setWaitMode'](_0x438a93(0x9be));}),PluginManager['registerCommand'](pluginData['name'],_0x54b1a4(0x542),_0x39173f=>{const _0x5cdaa3=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x5cdaa3(0x97a)](_0x39173f,_0x39173f);const _0x534a45=_0x39173f['type'][_0x5cdaa3(0x6d1)]()[_0x5cdaa3(0x2f4)]();SceneManager[_0x5cdaa3(0xc22)][_0x5cdaa3(0x7c2)](_0x534a45);const _0x875dc7=$gameTemp['getLastPluginCommandInterpreter']();_0x875dc7&&_0x39173f[_0x5cdaa3(0x58d)]&&(_0x5cdaa3(0xab9)==='cuPkI'?_0x360ba9[_0x5cdaa3(0xaca)]['processAnimationRequests']():_0x875dc7[_0x5cdaa3(0xc6a)](_0x5cdaa3(0x9be)));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x583),_0x1dfb80=>{const _0x35c51d=_0x54b1a4;if(!SceneManager[_0x35c51d(0xbbd)]())return;if(!Imported[_0x35c51d(0xbeb)])return;const _0x5be3e8=$gameTemp[_0x35c51d(0x859)]();_0x5be3e8[_0x35c51d(0xc6a)](_0x35c51d(0x5b3));}),PluginManager['registerCommand'](pluginData['name'],_0x54b1a4(0x7be),_0x590d52=>{const _0xec3eac=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xec3eac(0xbeb)])return;const _0x528b6a=$gameTemp[_0xec3eac(0x859)]();_0x528b6a[_0xec3eac(0xc6a)]('cutinExit');}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],'ActSeq_DB_DragonbonesMotionAni',_0x13da7f=>{const _0x28b887=_0x54b1a4;if(!SceneManager[_0x28b887(0xbbd)]())return;if(!Imported[_0x28b887(0x8b1)])return;VisuMZ[_0x28b887(0x97a)](_0x13da7f,_0x13da7f);const _0x82e0c6=VisuMZ[_0x28b887(0xca4)](_0x13da7f[_0x28b887(0x2f2)]),_0x2eebf9=_0x13da7f[_0x28b887(0x51e)]['toLowerCase']()['trim']();for(const _0x1f3a56 of _0x82e0c6){if(!_0x1f3a56)continue;_0x1f3a56['requestDragonbonesAnimation'](_0x2eebf9);}}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x8f2),_0x28ed0f=>{const _0x2a1204=_0x54b1a4;if(!SceneManager[_0x2a1204(0xbbd)]())return;if(!Imported[_0x2a1204(0x8b1)])return;VisuMZ[_0x2a1204(0x97a)](_0x28ed0f,_0x28ed0f);const _0x3953de=VisuMZ['CreateActionSequenceTargets'](_0x28ed0f['Targets']),_0x21b627=_0x28ed0f[_0x2a1204(0x799)];for(const _0x322078 of _0x3953de){if(!_0x322078)continue;_0x322078['dragonbonesData']()[_0x2a1204(0x7c9)]=_0x21b627;}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x472),_0x469c02=>{const _0x4a8205=_0x54b1a4;if(!SceneManager[_0x4a8205(0xbbd)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ['ConvertParams'](_0x469c02,_0x469c02);const _0x3f03b0=BattleManager[_0x4a8205(0x65a)],_0x104d60=_0x469c02[_0x4a8205(0xabe)];if(!_0x3f03b0)return;_0x3f03b0[_0x4a8205(0x3ba)]=_0x104d60;}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xb5a),_0x1f61c3=>{const _0x318a3f=_0x54b1a4;if(!SceneManager[_0x318a3f(0xbbd)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x54fe93=BattleManager['_action'];if(!_0x54fe93)return;_0x54fe93[_0x318a3f(0x652)]();}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x3b3),_0x26b377=>{const _0x34b642=_0x54b1a4;if(!SceneManager[_0x34b642(0xbbd)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x34b642(0x97a)](_0x26b377,_0x26b377);const _0x4a6a96=BattleManager[_0x34b642(0x65a)],_0x572348=_0x26b377[_0x34b642(0xabe)];if(!_0x4a6a96)return;_0x4a6a96[_0x34b642(0x713)]=_0x572348;}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Element_NullElements',_0x1746a8=>{const _0x408972=_0x54b1a4;if(!SceneManager[_0x408972(0xbbd)]())return;if(!Imported[_0x408972(0xcbe)])return;const _0x411508=BattleManager[_0x408972(0x65a)];if(!_0x411508)return;_0x411508[_0x408972(0x93c)]=!![];}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],'ActSeq_Horror_Clear',_0x587536=>{const _0x452f40=_0x54b1a4;if(!Imported[_0x452f40(0x310)])return;if(!SceneManager[_0x452f40(0xbbd)]())return;VisuMZ['ConvertParams'](_0x587536,_0x587536);const _0x23b3ee=VisuMZ[_0x452f40(0xca4)](_0x587536[_0x452f40(0x2f2)]);for(const _0x73aca1 of _0x23b3ee){if(!_0x73aca1)continue;_0x73aca1[_0x452f40(0x6af)](_0x452f40(0xcba)),_0x73aca1[_0x452f40(0x6af)](_0x452f40(0x4a4)),_0x73aca1['removeHorrorEffect']('tv'),_0x73aca1[_0x452f40(0x8d0)]();}$gamePlayer[_0x452f40(0x742)]();}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x90f),_0x579e81=>{const _0x306b68=_0x54b1a4;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x306b68(0xbbd)]())return;VisuMZ['ConvertParams'](_0x579e81,_0x579e81);const _0x374f9e=VisuMZ[_0x306b68(0xca4)](_0x579e81[_0x306b68(0x2f2)]),_0x49575c=_0x306b68(0x4a4);_0x579e81[_0x306b68(0x53b)]=Math[_0x306b68(0x8c0)](_0x579e81[_0x306b68(0x889)]/0x2),_0x579e81[_0x306b68(0x622)]=_0x579e81['slices'],_0x579e81[_0x306b68(0x73d)]=!![];for(const _0x414e99 of _0x374f9e){if(!_0x414e99)continue;_0x414e99[_0x306b68(0xdbe)](_0x49575c,_0x579e81);}$gamePlayer[_0x306b68(0x742)]();}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x5e4),_0x230474=>{const _0x2726ef=_0x54b1a4;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x230474,_0x230474);const _0x5f1e8a=VisuMZ['CreateActionSequenceTargets'](_0x230474[_0x2726ef(0x2f2)]);for(const _0x4b8840 of _0x5f1e8a){if(!_0x4b8840)continue;_0x4b8840[_0x2726ef(0x6af)](_0x2726ef(0x4a4));}$gamePlayer[_0x2726ef(0x742)]();}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x980),_0x5f5a93=>{const _0xe81117=_0x54b1a4;if(!Imported[_0xe81117(0x310)])return;if(!SceneManager[_0xe81117(0xbbd)]())return;VisuMZ[_0xe81117(0x97a)](_0x5f5a93,_0x5f5a93);const _0x2bc6dc=VisuMZ[_0xe81117(0xca4)](_0x5f5a93[_0xe81117(0x2f2)]),_0x27ca48=_0xe81117(0xcba);for(const _0x49717d of _0x2bc6dc){if(!_0x49717d)continue;_0x49717d['setHorrorEffectSettings'](_0x27ca48,_0x5f5a93);}$gamePlayer[_0xe81117(0x742)]();}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xc82),_0x2b6244=>{const _0xb96fb=_0x54b1a4;if(!Imported[_0xb96fb(0x310)])return;if(!SceneManager[_0xb96fb(0xbbd)]())return;VisuMZ[_0xb96fb(0x97a)](_0x2b6244,_0x2b6244);const _0x49bb96=VisuMZ[_0xb96fb(0xca4)](_0x2b6244[_0xb96fb(0x2f2)]);for(const _0x343ea7 of _0x49bb96){if(!_0x343ea7)continue;_0x343ea7[_0xb96fb(0x6af)](_0xb96fb(0xcba));}$gamePlayer[_0xb96fb(0x742)]();}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x6df),_0x158359=>{const _0x3f639e=_0x54b1a4;if(!Imported[_0x3f639e(0x310)])return;if(!SceneManager[_0x3f639e(0xbbd)]())return;VisuMZ['ConvertParams'](_0x158359,_0x158359);const _0x5b1824=VisuMZ[_0x3f639e(0xca4)](_0x158359[_0x3f639e(0x2f2)]),_0x3747bc='tv';for(const _0x1fce8d of _0x5b1824){if(!_0x1fce8d)continue;_0x1fce8d['setHorrorEffectSettings'](_0x3747bc,_0x158359);}$gamePlayer[_0x3f639e(0x742)]();}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x8a2),_0x2a168c=>{const _0x17711a=_0x54b1a4;if(!Imported[_0x17711a(0x310)])return;if(!SceneManager[_0x17711a(0xbbd)]())return;VisuMZ[_0x17711a(0x97a)](_0x2a168c,_0x2a168c);const _0x168d4a=VisuMZ[_0x17711a(0xca4)](_0x2a168c[_0x17711a(0x2f2)]);for(const _0x1436af of _0x168d4a){if('qtBUP'!==_0x17711a(0x5e2)){if(!_0x1436af)continue;_0x1436af[_0x17711a(0x6af)]('tv');}else{const _0x2a2933=this[_0x17711a(0x94f)]()?this[_0x17711a(0x360)]:0x0,_0x4d0b72=_0x102f96[_0x17711a(0xd3a)];this[_0x17711a(0xd0d)](_0x4d0b72,_0x2a2933),this['_list']=_0x221685[_0x17711a(0x9c2)](this['_list']);const _0x3a4445={'code':0xbc3,'indent':this[_0x17711a(0xa7d)],'parameters':_0x4af645['makeDeepCopy'](_0x5dd9ff)};return this[_0x17711a(0x8c3)]['splice'](this['_index']+0x1,0x0,_0x3a4445),!![];}}$gamePlayer['refresh']();}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x4db),_0x39e61f=>{const _0x3f5ab0=_0x54b1a4;if(!Imported[_0x3f5ab0(0xd1c)])return;const _0x3aca9a=SceneManager[_0x3f5ab0(0xc22)][_0x3f5ab0(0xaca)];if(!_0x3aca9a)return;if(VisuMZ[_0x3f5ab0(0xa32)][_0x3f5ab0(0xc92)]<=1.04){alert(_0x3f5ab0(0xb61)),SceneManager[_0x3f5ab0(0x3ca)]();return;}VisuMZ['ConvertParams'](_0x39e61f,_0x39e61f);const _0x47645a=_0x39e61f[_0x3f5ab0(0x216)];_0x3aca9a[_0x3f5ab0(0xa37)](_0x47645a);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Impact_ColorBreak',_0x53c2d9=>{const _0x270be3=_0x54b1a4;if(!SceneManager[_0x270be3(0xbbd)]())return;if(!Imported[_0x270be3(0xd1c)])return;const _0x521f19=SceneManager[_0x270be3(0xc22)]['_spriteset'];if(!_0x521f19)return;VisuMZ[_0x270be3(0x97a)](_0x53c2d9,_0x53c2d9);const _0x9ee47=_0x53c2d9['Intensity']||0x1,_0x257e29=_0x53c2d9['Duration']||0x1,_0xde775a=_0x53c2d9['EasingType']||'Linear';_0x521f19[_0x270be3(0x5fa)](_0x9ee47,_0x257e29,_0xde775a);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Impact_Desaturate',_0x8ec2d3=>{const _0x370f29=_0x54b1a4;if(!Imported[_0x370f29(0xd1c)])return;const _0x55b8f9=SceneManager[_0x370f29(0xc22)][_0x370f29(0xaca)];if(!_0x55b8f9)return;if(VisuMZ[_0x370f29(0xa32)][_0x370f29(0xc92)]<=1.04){alert(_0x370f29(0xb61)),SceneManager[_0x370f29(0x3ca)]();return;}VisuMZ[_0x370f29(0x97a)](_0x8ec2d3,_0x8ec2d3);const _0x5ba858=_0x8ec2d3['Enable'];_0x55b8f9[_0x370f29(0xd3d)](_0x5ba858);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x7d7),_0x30879f=>{const _0x4522e3=_0x54b1a4;if(!SceneManager[_0x4522e3(0xbbd)]())return;if(!Imported[_0x4522e3(0xd1c)])return;const _0x97a103=SceneManager[_0x4522e3(0xc22)][_0x4522e3(0xaca)];if(!_0x97a103)return;VisuMZ['ConvertParams'](_0x30879f,_0x30879f);const _0x4ff740=Number(_0x30879f[_0x4522e3(0x86b)])||0x0,_0x49c26c=Number(_0x30879f[_0x4522e3(0xbd7)]),_0x15e713=_0x30879f[_0x4522e3(0x8db)]||0x1,_0x3d75b9=_0x30879f['EasingType']||_0x4522e3(0xad4);_0x97a103[_0x4522e3(0x828)](_0x4ff740,_0x49c26c,_0x15e713,_0x3d75b9);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x746),_0x350d0d=>{const _0x5a76e0=_0x54b1a4;if(!SceneManager[_0x5a76e0(0xbbd)]())return;if(!Imported[_0x5a76e0(0xd1c)])return;const _0x2a0c1e=SceneManager[_0x5a76e0(0xc22)][_0x5a76e0(0xaca)];if(!_0x2a0c1e)return;VisuMZ['ConvertParams'](_0x350d0d,_0x350d0d);const _0x5d464f=Number(_0x350d0d[_0x5a76e0(0x86b)])||0x0,_0x27ad12=Number(_0x350d0d[_0x5a76e0(0xbd7)]),_0x3f0f2c=_0x350d0d[_0x5a76e0(0x8db)]||0x1,_0xe8c00b=_0x350d0d[_0x5a76e0(0x4e4)]||_0x5a76e0(0xad4),_0x153c82=VisuMZ[_0x5a76e0(0xca4)](_0x350d0d['Targets']);for(const _0x1c0417 of _0x153c82){if(!_0x1c0417)continue;if(!_0x1c0417[_0x5a76e0(0x887)]())continue;_0x1c0417[_0x5a76e0(0x887)]()[_0x5a76e0(0x828)](_0x5d464f,_0x27ad12,_0x3f0f2c,_0xe8c00b);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Impact_MotionTrailCreate',_0x4bdd5b=>{const _0x59e308=_0x54b1a4;if(!SceneManager[_0x59e308(0xbbd)]())return;if(!Imported[_0x59e308(0xd1c)])return;VisuMZ[_0x59e308(0x97a)](_0x4bdd5b,_0x4bdd5b);const _0x39ceb4={'delay':_0x4bdd5b['delay'],'duration':_0x4bdd5b[_0x59e308(0x319)],'hue':_0x4bdd5b[_0x59e308(0x4be)],'opacityStart':_0x4bdd5b[_0x59e308(0xb44)],'tone':_0x4bdd5b[_0x59e308(0x94e)],'visible':!![]},_0x76074f=VisuMZ[_0x59e308(0xca4)](_0x4bdd5b[_0x59e308(0x2f2)]);for(const _0x4f127e of _0x76074f){if(_0x59e308(0x63b)===_0x59e308(0x63b)){if(!_0x4f127e)continue;_0x4f127e[_0x59e308(0xc6b)](_0x39ceb4);}else{if(!_0xbc7732['isSceneBattle']())return!![];const _0x1a8cb7=['Scene_Options',_0x59e308(0xad5)];return _0x1a8cb7[_0x59e308(0xd4a)](_0x1c53e1[_0x59e308(0x56b)]);}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x66b),_0x206d84=>{const _0x483a35=_0x54b1a4;if(!SceneManager[_0x483a35(0xbbd)]())return;if(!Imported[_0x483a35(0xd1c)])return;VisuMZ[_0x483a35(0x97a)](_0x206d84,_0x206d84);const _0x466802=VisuMZ[_0x483a35(0xca4)](_0x206d84[_0x483a35(0x2f2)]);for(const _0x59df93 of _0x466802){if(_0x483a35(0x3e4)!==_0x483a35(0x3e4)){if(!_0x3fc04a[_0x483a35(0xbbd)]())return;if(!_0x47ea72[_0x483a35(0x81b)])return;_0x4bb855[_0x483a35(0x97a)](_0x36737b,_0x4d7864);const _0x3bd9d3=_0x491020[_0x483a35(0xa25)]();_0x3bd9d3[_0x483a35(0xd8b)]=_0x17ebe7['Setting'];}else{if(!_0x59df93)continue;_0x59df93[_0x483a35(0x5c8)]();}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x87c),_0x265248=>{const _0x3a79cd=_0x54b1a4;if(!Imported[_0x3a79cd(0xd1c)])return;const _0x260536=SceneManager[_0x3a79cd(0xc22)][_0x3a79cd(0xaca)];if(!_0x260536)return;if(VisuMZ[_0x3a79cd(0xa32)]['version']<=1.04){if(_0x3a79cd(0xaac)==='qPXIl'){alert(_0x3a79cd(0xb61)),SceneManager[_0x3a79cd(0x3ca)]();return;}else{this[_0x3a79cd(0xd8a)]=_0x322678[_0x3a79cd(0x8d3)]||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x1767b9[_0x3a79cd(0x9c2)](this['_flashColor']),this[_0x3a79cd(0x55f)]=_0x44c9a3[_0x3a79cd(0x27b)]||0x0;const _0x16bcfd=this[_0x3a79cd(0xa48)](),_0x741044=_0x1455b0[_0x3a79cd(0x8a3)](_0x16bcfd*0x1e),_0x1daf7a=this[_0x3a79cd(0x5c3)](_0x741044,_0x16bcfd);_0x1daf7a[_0x3a79cd(0x65b)][_0x3a79cd(0xa28)]=_0x1e0c92['getColor'](_0xbf72cd[_0x3a79cd(0xa28)]),_0x1daf7a[_0x3a79cd(0x65b)][_0x3a79cd(0x733)](_0x1d3c9f,0x0,0x0,_0x741044,_0x16bcfd,_0x3a79cd(0x8b9)),_0x1daf7a['dy']=0x0;}}VisuMZ[_0x3a79cd(0x97a)](_0x265248,_0x265248);const _0x2c60a0=_0x265248[_0x3a79cd(0x216)];_0x260536[_0x3a79cd(0x863)](_0x2c60a0);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x4a1),_0xf4278c=>{const _0xca2763=_0x54b1a4;if(!Imported[_0xca2763(0xd1c)])return;const _0x14c566=SceneManager[_0xca2763(0xc22)][_0xca2763(0xaca)];if(!_0x14c566)return;if(VisuMZ[_0xca2763(0xa32)]['version']<=1.04){if('SpsUt'===_0xca2763(0x847)){_0x4143d3=_0x1556fd[_0xca2763(0x387)]['JS'][_0x32dc51]['call'](this,this[_0xca2763(0xc0d)](),_0x1874d5,_0x3e8e91,_0x237180);if(_0x509f1b)_0x44d970=_0x310e10;}else{alert(_0xca2763(0xb61)),SceneManager[_0xca2763(0x3ca)]();return;}}VisuMZ[_0xca2763(0x97a)](_0xf4278c,_0xf4278c);const _0x111e90=_0xf4278c[_0xca2763(0x216)];_0x14c566[_0xca2763(0xbd8)](_0x111e90);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xbca),_0x207985=>{const _0x4b8b18=_0x54b1a4;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x110f5b=SceneManager[_0x4b8b18(0xc22)][_0x4b8b18(0xaca)];if(!_0x110f5b)return;VisuMZ[_0x4b8b18(0x97a)](_0x207985,_0x207985);const _0x1f8e13=_0x207985['X']||0x0,_0x1a26b0=_0x207985['Y']||0x0,_0x262e63=_0x207985[_0x4b8b18(0x378)]||0x0,_0x26cd4f=_0x207985['Wave']||0x0,_0x121c39=_0x207985[_0x4b8b18(0x8db)]||0x1;_0x110f5b['setupShockwaveImpactFilter'](_0x1f8e13,_0x1a26b0,_0x262e63,_0x26cd4f,_0x121c39);}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0xa50),_0x30a243=>{const _0x4b212f=_0x54b1a4;if(!SceneManager[_0x4b212f(0xbbd)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x134c3c=SceneManager[_0x4b212f(0xc22)][_0x4b212f(0xaca)];if(!_0x134c3c)return;VisuMZ[_0x4b212f(0x97a)](_0x30a243,_0x30a243);const _0x341ac3=VisuMZ['CreateActionSequenceTargets'](_0x30a243[_0x4b212f(0x2f2)]),_0x29d5de=_0x30a243[_0x4b212f(0xa3f)],_0x30f476=_0x30a243[_0x4b212f(0x8bd)]||0x0,_0x503c36=_0x30a243[_0x4b212f(0x567)]||0x0,_0x548ee1=_0x30a243[_0x4b212f(0x378)]||0x0,_0x11ac58=_0x30a243[_0x4b212f(0x8c9)]||0x0,_0x259767=_0x30a243[_0x4b212f(0x8db)]||0x1;for(const _0x53d00e of _0x341ac3){if(!_0x53d00e)continue;if(!_0x53d00e['battler']())continue;const _0x25c049=_0x53d00e[_0x4b212f(0x887)]();let _0x23b5b3=_0x25c049[_0x4b212f(0xc43)],_0x540a2f=_0x25c049[_0x4b212f(0xb10)];_0x23b5b3+=(Graphics[_0x4b212f(0x495)]-Graphics[_0x4b212f(0xb36)])/0x2,_0x540a2f+=(Graphics[_0x4b212f(0xdd7)]-Graphics[_0x4b212f(0x67b)])/0x2;if(_0x29d5de[_0x4b212f(0x298)](/front/i))_0x23b5b3+=(_0x53d00e[_0x4b212f(0xc3c)]()?0x1:-0x1)*_0x25c049['mainSpriteWidth']()/0x2;else{if(_0x29d5de['match'](/back/i)){if(_0x4b212f(0xc59)!==_0x4b212f(0x1f2))_0x23b5b3+=(_0x53d00e[_0x4b212f(0xc3c)]()?-0x1:0x1)*_0x25c049[_0x4b212f(0xc30)]()/0x2;else{let _0x28dddf=this[_0x4b212f(0x369)]()?_0x3190f7['ALL_ACTORS']:_0x497fc1[_0x4b212f(0xbc2)];if(_0x1230b7[_0x4b212f(0x2e5)]&&_0x2d6c7d['SHOW_BUTTON']){this[_0x4b212f(0x296)]=this[_0x4b212f(0x369)]()?_0x4b212f(0xc1c):'pageup',this[_0x4b212f(0xb9b)]=_0x31be7f[_0x4b212f(0xa3e)](this['_buttonKey']);const _0x2b47b9=_0xf36c24[_0x4b212f(0x82d)]['Settings']['ButtonAssist'][_0x4b212f(0x5ea)];_0x28dddf=_0x2b47b9[_0x4b212f(0xd76)](this['_buttonText'],_0x28dddf);}this[_0x4b212f(0x59f)](_0x28dddf,_0x4b212f(0xc47));}}}if(_0x29d5de[_0x4b212f(0x298)](/head/i))_0x540a2f-=_0x25c049[_0x4b212f(0xa2e)]();else _0x29d5de[_0x4b212f(0x298)](/center/i)&&(_0x4b212f(0xd30)!==_0x4b212f(0xd30)?this[_0x4b212f(0x6a8)](this[_0x4b212f(0x3e0)]):_0x540a2f-=_0x25c049[_0x4b212f(0xa2e)]()/0x2);_0x23b5b3+=_0x30f476,_0x540a2f+=_0x503c36,_0x134c3c[_0x4b212f(0x44b)](_0x23b5b3,_0x540a2f,_0x548ee1,_0x11ac58,_0x259767);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x9b7),_0x7848d0=>{const _0x518972=_0x54b1a4;if(!SceneManager[_0x518972(0xbbd)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xf97c37=SceneManager[_0x518972(0xc22)][_0x518972(0xaca)];if(!_0xf97c37)return;VisuMZ[_0x518972(0x97a)](_0x7848d0,_0x7848d0);const _0x257141=VisuMZ[_0x518972(0xca4)](_0x7848d0['Targets']),_0x212030=_0x7848d0[_0x518972(0xa3f)],_0x12b131=_0x7848d0[_0x518972(0x8bd)]||0x0,_0x555cb0=_0x7848d0[_0x518972(0x567)]||0x0,_0xb9c06a=_0x7848d0[_0x518972(0x378)]||0x0,_0x48b1de=_0x7848d0[_0x518972(0x8c9)]||0x0,_0x35ac0f=_0x7848d0[_0x518972(0x8db)]||0x1,_0x50e3da=Math[_0x518972(0x41c)](..._0x257141[_0x518972(0x8bb)](_0x2aa282=>_0x2aa282['battler']()[_0x518972(0xc43)]-_0x2aa282['battler']()[_0x518972(0xc30)]()/0x2)),_0x4093ce=Math[_0x518972(0x9db)](..._0x257141[_0x518972(0x8bb)](_0x875ffc=>_0x875ffc[_0x518972(0x887)]()['_baseX']+_0x875ffc[_0x518972(0x887)]()[_0x518972(0xc30)]()/0x2)),_0x109b95=Math[_0x518972(0x41c)](..._0x257141[_0x518972(0x8bb)](_0x396402=>_0x396402[_0x518972(0x887)]()['_baseY']-_0x396402[_0x518972(0x887)]()['mainSpriteHeight']())),_0x5610d7=Math[_0x518972(0x9db)](..._0x257141['map'](_0x239cdf=>_0x239cdf['battler']()[_0x518972(0xb10)])),_0x1782f6=_0x257141[_0x518972(0x661)](_0x53573a=>_0x53573a[_0x518972(0xa2c)]())['length'],_0x32235e=_0x257141[_0x518972(0x661)](_0x17b620=>_0x17b620[_0x518972(0xc3c)]())[_0x518972(0x69d)];let _0x2f5328=0x0,_0x1fc01c=0x0;if(_0x212030[_0x518972(0x298)](/front/i))_0x2f5328=_0x1782f6>=_0x32235e?_0x50e3da:_0x4093ce;else{if(_0x212030[_0x518972(0x298)](/middle/i))_0x2f5328=(_0x50e3da+_0x4093ce)/0x2,melee=-0x1;else _0x212030['match'](/back/i)&&(_0x2f5328=_0x1782f6>=_0x32235e?_0x4093ce:_0x50e3da);}if(_0x212030[_0x518972(0x298)](/head/i))_0x1fc01c=_0x109b95;else{if(_0x212030[_0x518972(0x298)](/center/i))_0x1fc01c=(_0x109b95+_0x5610d7)/0x2;else _0x212030[_0x518972(0x298)](/base/i)&&(_0x1fc01c=_0x5610d7);}_0x2f5328+=(Graphics[_0x518972(0x495)]-Graphics['boxWidth'])/0x2,_0x1fc01c+=(Graphics[_0x518972(0xdd7)]-Graphics[_0x518972(0x67b)])/0x2,_0x2f5328+=_0x12b131,_0x1fc01c+=_0x555cb0,_0xf97c37[_0x518972(0x44b)](_0x2f5328,_0x1fc01c,_0xb9c06a,_0x48b1de,_0x35ac0f);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Impact_TimeScale',_0x593e3f=>{const _0x27138d=_0x54b1a4;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1b9c86=SceneManager[_0x27138d(0xc22)][_0x27138d(0xaca)];if(!_0x1b9c86)return;if(VisuMZ[_0x27138d(0xa32)]['version']<=1.04){alert(_0x27138d(0xb61)),SceneManager[_0x27138d(0x3ca)]();return;}VisuMZ['ConvertParams'](_0x593e3f,_0x593e3f);const _0x41556c=$gameTemp[_0x27138d(0x859)](),_0x31a761=Math[_0x27138d(0x9db)](0.01,_0x593e3f[_0x27138d(0x385)]);$gameTemp[_0x27138d(0x2be)](_0x31a761,_0x41556c);}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x49f),_0x1427b6=>{const _0x2347a9=_0x54b1a4;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x18893f=SceneManager[_0x2347a9(0xc22)]['_spriteset'];if(!_0x18893f)return;if(VisuMZ[_0x2347a9(0xa32)][_0x2347a9(0xc92)]<=1.04){if(_0x2347a9(0x646)!=='BqYGG')_0x2b7c8e=_0x540438(_0x2de568['$1']),_0x3a8e2a=_0x48f246(_0x3ccf98['$2']);else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}}VisuMZ[_0x2347a9(0x97a)](_0x1427b6,_0x1427b6);const _0x330e49=$gameTemp[_0x2347a9(0x859)](),_0x3f49c8=_0x1427b6['ms']||0x1;VisuMZ[_0x2347a9(0xa32)][_0x2347a9(0x9f9)](_0x3f49c8,_0x330e49);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x530),_0x2529f4=>{const _0x1c13df=_0x54b1a4;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5115e2=SceneManager[_0x1c13df(0xc22)][_0x1c13df(0xaca)];if(!_0x5115e2)return;VisuMZ[_0x1c13df(0x97a)](_0x2529f4,_0x2529f4);const _0x293feb=_0x2529f4['X']||0x0,_0x3516fa=_0x2529f4['Y']||0x0,_0x1317c3=_0x2529f4[_0x1c13df(0x3c8)]||0x0,_0x29db20=_0x2529f4[_0x1c13df(0x8e1)]||0x0,_0x110db2=_0x2529f4[_0x1c13df(0x8db)]||0x1,_0x56e45b=_0x2529f4[_0x1c13df(0x4e4)]||_0x1c13df(0xad4);_0x5115e2['setupZoomBlurImpactFilter'](_0x1317c3,_0x293feb,_0x3516fa,_0x29db20,_0x110db2,_0x56e45b);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x898),_0x36f1f0=>{const _0x16999b=_0x54b1a4;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2c66a0=SceneManager['_scene'][_0x16999b(0xaca)];if(!_0x2c66a0)return;VisuMZ[_0x16999b(0x97a)](_0x36f1f0,_0x36f1f0);const _0x34cf87=VisuMZ[_0x16999b(0xca4)](_0x36f1f0[_0x16999b(0x2f2)]),_0x30211d=_0x36f1f0[_0x16999b(0xa3f)],_0x1b1158=_0x36f1f0[_0x16999b(0x8bd)]||0x0,_0xde0077=_0x36f1f0[_0x16999b(0x567)]||0x0,_0x35d4ea=_0x36f1f0['Strength']||0x0,_0x3db299=_0x36f1f0['Radius']||0x0,_0x36d993=_0x36f1f0[_0x16999b(0x8db)]||0x1,_0x312e53=_0x36f1f0[_0x16999b(0x4e4)]||_0x16999b(0xad4),_0x57d490=Math[_0x16999b(0x41c)](..._0x34cf87['map'](_0x15265d=>_0x15265d['battler']()[_0x16999b(0xc43)]-_0x15265d[_0x16999b(0x887)]()['mainSpriteWidth']()/0x2)),_0x12c2e0=Math[_0x16999b(0x9db)](..._0x34cf87['map'](_0xf6142f=>_0xf6142f[_0x16999b(0x887)]()[_0x16999b(0xc43)]+_0xf6142f[_0x16999b(0x887)]()[_0x16999b(0xc30)]()/0x2)),_0x18ee20=Math[_0x16999b(0x41c)](..._0x34cf87[_0x16999b(0x8bb)](_0x3d58ea=>_0x3d58ea[_0x16999b(0x887)]()['_baseY']-_0x3d58ea['battler']()[_0x16999b(0xa2e)]())),_0x1e7ae3=Math[_0x16999b(0x9db)](..._0x34cf87[_0x16999b(0x8bb)](_0x253e93=>_0x253e93[_0x16999b(0x887)]()['_baseY'])),_0x1ebb36=_0x34cf87[_0x16999b(0x661)](_0x368dd0=>_0x368dd0[_0x16999b(0xa2c)]())['length'],_0x15eff5=_0x34cf87[_0x16999b(0x661)](_0x15da4c=>_0x15da4c[_0x16999b(0xc3c)]())[_0x16999b(0x69d)];let _0x3a1065=0x0,_0x3448bd=0x0;if(_0x30211d[_0x16999b(0x298)](/front/i))_0x3a1065=_0x1ebb36>=_0x15eff5?_0x57d490:_0x12c2e0;else{if(_0x30211d['match'](/middle/i)){if('BEMug'!==_0x16999b(0xcd0))_0x3a1065=(_0x57d490+_0x12c2e0)/0x2,melee=-0x1;else{const _0x2446fc=this[_0x16999b(0x28e)](_0x2d907b),_0x270fa7=new _0x4fb8bf(_0x2446fc,_0x114960);this[_0x16999b(0x76e)](_0x270fa7),_0x35f477?this[_0x16999b(0x2b0)]=_0x270fa7:this[_0x16999b(0x9ec)]=_0x270fa7;}}else _0x30211d[_0x16999b(0x298)](/back/i)&&(_0x3a1065=_0x1ebb36>=_0x15eff5?_0x12c2e0:_0x57d490);}if(_0x30211d[_0x16999b(0x298)](/head/i)){if(_0x16999b(0x8d6)!==_0x16999b(0x49e))_0x3448bd=_0x18ee20;else return this[_0x16999b(0x618)]();}else{if(_0x30211d['match'](/center/i)){if(_0x16999b(0x8eb)==='NHDZu')return _0x275e76[_0x16999b(0x661)](_0x4631d4=>_0x4631d4[_0x16999b(0x5b2)]());else _0x3448bd=(_0x18ee20+_0x1e7ae3)/0x2;}else _0x30211d[_0x16999b(0x298)](/base/i)&&(_0x3448bd=_0x1e7ae3);}_0x3a1065+=(Graphics[_0x16999b(0x495)]-Graphics[_0x16999b(0xb36)])/0x2,_0x3448bd+=(Graphics[_0x16999b(0xdd7)]-Graphics['boxHeight'])/0x2,_0x3a1065+=_0x1b1158,_0x3448bd+=_0xde0077,_0x2c66a0[_0x16999b(0x4fe)](_0x35d4ea,_0x3a1065,_0x3448bd,_0x3db299,_0x36d993,_0x312e53);}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x6fd),_0x48ae08=>{const _0x3f67ea=_0x54b1a4;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x378d49=SceneManager[_0x3f67ea(0xc22)][_0x3f67ea(0xaca)];if(!_0x378d49)return;if(VisuMZ['ActSeqImpact'][_0x3f67ea(0xc92)]<=1.05){if(_0x3f67ea(0xcdd)==='Nmcra')_0xe65b64[_0x3f67ea(0x387)][_0x3f67ea(0xd18)][_0x3f67ea(0xd6c)](this),_0x19c981['BattleCore'][_0x3f67ea(0x916)][_0x3f67ea(0x60e)][_0x3f67ea(0x870)]&&this[_0x3f67ea(0x696)]();else{alert(_0x3f67ea(0xb61)),SceneManager[_0x3f67ea(0x3ca)]();return;}}VisuMZ['ConvertParams'](_0x48ae08,_0x48ae08);const _0xeeb11b=VisuMZ[_0x3f67ea(0xca4)](_0x48ae08[_0x3f67ea(0x2f2)]),_0x5573b0={'filename':_0x48ae08[_0x3f67ea(0x65d)],'horzCells':_0x48ae08[_0x3f67ea(0x301)]||0x1,'vertCells':_0x48ae08['vertCells']||0x1,'frameDelay':_0x48ae08['frameDelay']||0x1,'smooth':_0x48ae08[_0x3f67ea(0xd41)]||![],'anchorX':_0x48ae08[_0x3f67ea(0x613)]||0x0,'anchorY':_0x48ae08[_0x3f67ea(0x6f3)]||0x0,'offsetX':_0x48ae08[_0x3f67ea(0x7ce)]||0x0,'offsetY':_0x48ae08[_0x3f67ea(0xdd5)]||0x0};for(const _0x3f83e8 of _0xeeb11b){if(!_0x3f83e8)continue;if(!_0x3f83e8[_0x3f67ea(0x887)]())continue;_0x3f83e8[_0x3f67ea(0x887)]()[_0x3f67ea(0xdce)](_0x5573b0);}const _0xcb8e79=$gameTemp[_0x3f67ea(0x859)]();_0xcb8e79&&_0xcb8e79[_0x3f67ea(0xc6a)](_0x3f67ea(0x9d7));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x2b9),_0x52c82a=>{const _0x3a5ed2=_0x54b1a4;if(!Imported[_0x3a5ed2(0xd1c)])return;const _0x52c2bb=SceneManager[_0x3a5ed2(0xc22)][_0x3a5ed2(0xaca)];if(!_0x52c2bb)return;if(VisuMZ[_0x3a5ed2(0xa32)]['version']<=1.05){alert(_0x3a5ed2(0xb61)),SceneManager[_0x3a5ed2(0x3ca)]();return;}VisuMZ['ConvertParams'](_0x52c82a,_0x52c82a);const _0x14cca4=VisuMZ['CreateActionSequenceTargets'](_0x52c82a[_0x3a5ed2(0x2f2)]);for(const _0x1ef9d2 of _0x14cca4){if(!_0x1ef9d2)continue;if(!_0x1ef9d2['battler']())continue;_0x1ef9d2[_0x3a5ed2(0x887)]()[_0x3a5ed2(0xcc7)]();}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xc67),_0x486777=>{const _0x1b7dc4=_0x54b1a4;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x526264=SceneManager[_0x1b7dc4(0xc22)][_0x1b7dc4(0xaca)];if(!_0x526264)return;if(VisuMZ['ActSeqImpact'][_0x1b7dc4(0xc92)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x1b7dc4(0x3ca)]();return;}VisuMZ[_0x1b7dc4(0x97a)](_0x486777,_0x486777);const _0x538cd6=VisuMZ['CreateActionSequenceTargets'](_0x486777[_0x1b7dc4(0x2f2)]),_0x2ffda9=_0x486777[_0x1b7dc4(0x245)];for(const _0x273349 of _0x538cd6){if(_0x1b7dc4(0x7ea)===_0x1b7dc4(0x7ea)){if(!_0x273349)continue;if(!_0x273349[_0x1b7dc4(0x887)]())continue;_0x273349[_0x1b7dc4(0x887)]()[_0x1b7dc4(0xdd9)](_0x2ffda9);}else this[_0x1b7dc4(0x5a7)](_0x1b7dc4(0x9ca)),_0x3b5169[_0x1b7dc4(0x8b5)](_0x42ad8e,_0x4ed0f9),this[_0x1b7dc4(0x318)]();}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x971),_0x1e246a=>{const _0x166fc7=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;const _0x313d12=$gameTemp[_0x166fc7(0x859)]();if(!_0x313d12)return;_0x313d12['setWaitMode'](_0x166fc7(0x55e));}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x200),_0x5d2e6e=>{const _0x3eadb3=_0x54b1a4;if(!SceneManager[_0x3eadb3(0xbbd)]())return;VisuMZ[_0x3eadb3(0x97a)](_0x5d2e6e,_0x5d2e6e);const _0x3b6d25=$gameTemp[_0x3eadb3(0x859)](),_0x3cd625=BattleManager[_0x3eadb3(0x65a)],_0x237b48=BattleManager['_subject'],_0x5b0a68=BattleManager['_logWindow'];if(!_0x3b6d25||!_0x3cd625||!_0x237b48)return;if(!_0x3cd625[_0x3eadb3(0x7b6)]())return;const _0xde95ae=VisuMZ['CreateActionSequenceTargets'](_0x5d2e6e[_0x3eadb3(0x2f2)]);for(const _0x166ebc of _0xde95ae){if(!_0x166ebc)continue;_0x5b0a68[_0x3eadb3(0x519)]('actionEffect',_0x237b48,_0x166ebc);}_0x3b6d25['setWaitMode'](_0x3eadb3(0xc00));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xaa7),_0x1daaf0=>{const _0x30646c=_0x54b1a4;if(!SceneManager[_0x30646c(0xbbd)]())return;if(!Imported[_0x30646c(0x214)])return;$gameTemp['_performActionEnd']=!![];}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x255),_0x4e5ee8=>{const _0x3d7acb=_0x54b1a4;if(!SceneManager[_0x3d7acb(0xbbd)]())return;VisuMZ['ConvertParams'](_0x4e5ee8,_0x4e5ee8);const _0x4670cd=[_0x3d7acb(0xba2),'MAXMP',_0x3d7acb(0x24b),_0x3d7acb(0xaeb),_0x3d7acb(0x6a3),_0x3d7acb(0x2c9),'AGI',_0x3d7acb(0xb6d)],_0x30241d=_0x4e5ee8[_0x3d7acb(0x9ef)],_0x237bed=_0x4e5ee8['Debuffs'],_0x4a182b=_0x4e5ee8['Turns'],_0x479526=VisuMZ[_0x3d7acb(0xca4)](_0x4e5ee8[_0x3d7acb(0x2f2)]);for(const _0x2a106f of _0x479526){if(_0x3d7acb(0x7c1)===_0x3d7acb(0x2f9)){if(!_0x3ee206[_0x3d7acb(0xbbd)]())return;if(!_0x45c33c['VisuMZ_3_ActSeqCamera'])return;_0x11e39a[_0x3d7acb(0x97a)](_0x481ab6,_0x5769c1);const _0x45463c=_0x4ae130[_0x3d7acb(0x859)](),_0x591140=_0x33990c[_0x3d7acb(0x80c)];_0x3685d7[_0x3d7acb(0xb8e)](_0x3ee6a7[_0x3d7acb(0x8bd)],_0x27d7e6['OffsetY'],_0x1ec04f[_0x3d7acb(0x8db)],_0x5c61d1['EasingType']);if(_0x591140)_0x45463c[_0x3d7acb(0xc6a)](_0x3d7acb(0x2c0));}else{if(!_0x2a106f)continue;for(const _0x1c8175 of _0x30241d){if(_0x3d7acb(0xdc4)!==_0x3d7acb(0xdc4))this[_0x3d7acb(0xbc1)](...arguments);else{const _0x4c0e59=_0x4670cd[_0x3d7acb(0x940)](_0x1c8175[_0x3d7acb(0x8fd)]()[_0x3d7acb(0x2f4)]());_0x4c0e59>=0x0&&_0x4c0e59<=0x7&&_0x2a106f[_0x3d7acb(0x2c8)](_0x4c0e59,_0x4a182b);}}for(const _0x91898c of _0x237bed){if(_0x3d7acb(0x30c)!==_0x3d7acb(0x30c)){if(_0x5b1ede){const _0x2a9fd4=_0x1dd225[_0x3d7acb(0x940)](_0x5a38a2);return _0x2a9fd4>=0x0?[_0x18c8f1[_0x2a9fd4-0x1]||_0x30adc5]:[_0x4f9444];}}else{const _0x2cf8ec=_0x4670cd[_0x3d7acb(0x940)](_0x91898c[_0x3d7acb(0x8fd)]()[_0x3d7acb(0x2f4)]());_0x2cf8ec>=0x0&&_0x2cf8ec<=0x7&&_0x2a106f[_0x3d7acb(0x35d)](_0x2cf8ec,_0x4a182b);}}}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],'ActSeq_Mechanics_AddState',_0x59ee28=>{const _0x33af90=_0x54b1a4;if(!SceneManager[_0x33af90(0xbbd)]())return;VisuMZ[_0x33af90(0x97a)](_0x59ee28,_0x59ee28);const _0x2d68db=_0x59ee28[_0x33af90(0x917)],_0x187180=VisuMZ['CreateActionSequenceTargets'](_0x59ee28[_0x33af90(0x2f2)]);for(const _0x48093f of _0x187180){if(!_0x48093f)continue;for(const _0x13ab78 of _0x2d68db){_0x48093f['addState'](_0x13ab78);}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x6d5),_0x282b21=>{const _0x521aae=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x282b21,_0x282b21);const _0x25725a=BattleManager[_0x521aae(0x65a)],_0x52487f={'arPenRate':_0x282b21[_0x521aae(0x4b9)],'arPenFlat':_0x282b21[_0x521aae(0xd44)],'arRedRate':_0x282b21[_0x521aae(0x302)],'arRedFlat':_0x282b21[_0x521aae(0x431)]};_0x25725a[_0x521aae(0x2ed)]=_0x52487f;}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_AnalyzeWeakness',_0xde9883=>{const _0x1934b2=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x1934b2(0x97a)](_0xde9883,_0xde9883);const _0x1d46a1=VisuMZ[_0x1934b2(0xca4)](_0xde9883[_0x1934b2(0x2f2)]),_0x21e6cd=_0xde9883[_0x1934b2(0xd71)]||0x1;for(const _0x126a4d of _0x1d46a1){if(_0x1934b2(0x8d4)!==_0x1934b2(0xabf)){if(!_0x126a4d)continue;if(!_0x126a4d['isEnemy']())continue;_0x126a4d[_0x1934b2(0x72a)](_0x21e6cd);}else _0x32ec3f+=_0x2dfa9,_0x46d241+=_0x3bac17;}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],'ActSeq_Mechanics_AtbGauge',_0x15047a=>{const _0x54e491=_0x54b1a4;if(!SceneManager[_0x54e491(0xbbd)]())return;if(!Imported[_0x54e491(0x947)])return;if(!BattleManager[_0x54e491(0x266)]())return;VisuMZ[_0x54e491(0x97a)](_0x15047a,_0x15047a);const _0x45e516=VisuMZ[_0x54e491(0xca4)](_0x15047a[_0x54e491(0x2f2)]),_0xc63a94=_0x15047a[_0x54e491(0xa38)],_0x19494d=_0x15047a[_0x54e491(0xa38)],_0x5f0f44=_0x15047a['Interrupt'];for(const _0xac29c5 of _0x45e516){if(_0x54e491(0xa68)!==_0x54e491(0x52f)){if(!_0xac29c5)continue;if(_0xac29c5[_0x54e491(0xbda)]())_0xac29c5[_0x54e491(0x285)](_0xc63a94);else{if(_0xac29c5['isAtbCastingState']()){if(_0x54e491(0x590)!=='xkIaF')this[_0x54e491(0xaa4)][_0x54e491(0x6a8)](_0x1123d2),_0x4c46fe[_0x54e491(0xb9d)]&&(this['_animationContainer']['x']=this[_0x54e491(0x92c)]['x'],this[_0x54e491(0xaa4)]['y']=this[_0x54e491(0x92c)]['y']);else{_0xac29c5[_0x54e491(0x762)](_0x19494d);if(_0x5f0f44)_0xac29c5[_0x54e491(0xc4f)]();}}}}else this[_0x54e491(0x60d)](),this[_0x54e491(0x48e)]();}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x83c),_0x5f4d66=>{const _0x5a61d3=_0x54b1a4;if(!SceneManager[_0x5a61d3(0xbbd)]())return;if(!Imported[_0x5a61d3(0x299)])return;VisuMZ[_0x5a61d3(0x97a)](_0x5f4d66,_0x5f4d66);const _0x22fddc=VisuMZ[_0x5a61d3(0xca4)](_0x5f4d66[_0x5a61d3(0x2f2)]),_0x3df923=_0x5f4d66[_0x5a61d3(0x990)];for(const _0x1d6090 of _0x22fddc){if(!_0x1d6090)continue;_0x1d6090[_0x5a61d3(0x963)](_0x3df923);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],'ActSeq_Mechanics_BoostPointsStoreData',_0x5bed4d=>{const _0x36d063=_0x54b1a4;if(!SceneManager[_0x36d063(0xbbd)]())return;if(!Imported[_0x36d063(0x299)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x36d063(0x97a)](_0x5bed4d,_0x5bed4d);const _0x594d97=_0x5bed4d[_0x36d063(0xc94)];$gameVariables[_0x36d063(0x265)](_0x594d97,BattleManager['_subject'][_0x36d063(0x8b3)]());}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xb39),_0x517e45=>{const _0x224882=_0x54b1a4;if(!SceneManager[_0x224882(0xbbd)]())return;if(!Imported[_0x224882(0x933)])return;VisuMZ[_0x224882(0x97a)](_0x517e45,_0x517e45);const _0x40c0c7=VisuMZ[_0x224882(0xca4)](_0x517e45['Targets']),_0x53d17e=_0x517e45[_0x224882(0xae3)];for(const _0x4bcfb0 of _0x40c0c7){if(!_0x4bcfb0)continue;if(_0x4bcfb0[_0x224882(0xd57)]())continue;if(!_0x4bcfb0[_0x224882(0xd55)]())continue;_0x4bcfb0[_0x224882(0xbbf)](_0x53d17e);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Mechanics_BreakShieldReset',_0x2a1e58=>{const _0xd1fc07=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xd1fc07(0x933)])return;VisuMZ[_0xd1fc07(0x97a)](_0x2a1e58,_0x2a1e58);const _0x4a5419=VisuMZ[_0xd1fc07(0xca4)](_0x2a1e58[_0xd1fc07(0x2f2)]);for(const _0x4ebc59 of _0x4a5419){if(!_0x4ebc59)continue;if(_0x4ebc59[_0xd1fc07(0xd57)]())continue;if(!_0x4ebc59[_0xd1fc07(0xd55)]())continue;_0x4ebc59[_0xd1fc07(0x55d)]();}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],'ActSeq_Mechanics_BtbGain',_0x45a649=>{const _0x189d7e=_0x54b1a4;if(!SceneManager[_0x189d7e(0xbbd)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager['isBTB']())return;VisuMZ[_0x189d7e(0x97a)](_0x45a649,_0x45a649);const _0x48c106=VisuMZ[_0x189d7e(0xca4)](_0x45a649[_0x189d7e(0x2f2)]),_0x345b8b=_0x45a649['BravePoints'];for(const _0x305ddf of _0x48c106){if(_0x189d7e(0x77f)!==_0x189d7e(0x707)){if(!_0x305ddf)continue;_0x305ddf[_0x189d7e(0xa26)](_0x345b8b);}else this[_0x189d7e(0x7a3)](),this[_0x189d7e(0x876)]();}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Mechanics_Collapse',_0x196376=>{const _0x6acd2=_0x54b1a4;if(!SceneManager[_0x6acd2(0xbbd)]())return;VisuMZ['ConvertParams'](_0x196376,_0x196376);const _0x14bf68=$gameTemp[_0x6acd2(0x859)](),_0x4f9180=BattleManager[_0x6acd2(0x65a)],_0x13d5cc=BattleManager[_0x6acd2(0x644)];if(!_0x14bf68||!_0x4f9180||!_0x13d5cc)return;if(!_0x4f9180['item']())return;const _0x184f48=VisuMZ[_0x6acd2(0xca4)](_0x196376[_0x6acd2(0x2f2)]);for(const _0x4cecae of _0x184f48){if(!_0x4cecae)continue;_0x196376['ForceDeath']&&(_0x6acd2(0xd40)!==_0x6acd2(0xb74)?(_0x4cecae[_0x6acd2(0xaf7)](),_0x4cecae[_0x6acd2(0x1f1)](_0x4cecae[_0x6acd2(0x243)]())):_0x59406d=_0x37dbc1['max'](_0x172a1f,_0x566941));if(_0x4cecae[_0x6acd2(0x72c)]()){if(_0x6acd2(0xadf)!==_0x6acd2(0x428))_0x4cecae[_0x6acd2(0xa84)]();else return this[_0x6acd2(0x829)]()[_0x6acd2(0x298)](/\$/i);}}_0x14bf68[_0x6acd2(0xc6a)](_0x6acd2(0x435));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x897),_0xcc4521=>{const _0x31d563=_0x54b1a4;if(!SceneManager[_0x31d563(0xbbd)]())return;if(!Imported[_0x31d563(0x718)])return;if(!BattleManager[_0x31d563(0x419)]())return;VisuMZ['ConvertParams'](_0xcc4521,_0xcc4521);const _0xe3c8e8=VisuMZ['CreateActionSequenceTargets'](_0xcc4521['Targets']),_0x78307b=_0xcc4521[_0x31d563(0x297)];for(const _0x3b1c03 of _0xe3c8e8){if(_0x31d563(0x80a)!==_0x31d563(0x80a))this[_0x31d563(0x4cb)]['y']=this['height']*0.5,this['_mainSprite']['y']+=_0x2b45e0['randomInt'](this[_0x31d563(0x54c)])*(_0x1ed663['random']()<0.5?-0x1:0x1);else{if(!_0x3b1c03)continue;_0x3b1c03[_0x31d563(0x51f)](_0x78307b);}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x9ac),_0x5013b9=>{const _0x16579d=_0x54b1a4;if(!SceneManager[_0x16579d(0xbbd)]())return;if(!Imported[_0x16579d(0x718)])return;if(!BattleManager[_0x16579d(0x419)]())return;VisuMZ[_0x16579d(0x97a)](_0x5013b9,_0x5013b9);const _0x324506=VisuMZ['CreateActionSequenceTargets'](_0x5013b9['Targets']),_0x5ddbf6=_0x5013b9['ChargeRate'],_0xa42296=_0x5013b9['ChargeRate'];for(const _0x67a043 of _0x324506){if('wwXFb'!==_0x16579d(0x31e)){if(!_0x67a043)continue;if(_0x67a043[_0x16579d(0xa93)]==='charging')_0x16579d(0xcf0)!=='yjLXN'?_0x67a043[_0x16579d(0x6a7)](_0x5ddbf6):_0x46dddc*=this['subject']()[_0x16579d(0x8de)];else{if(_0x67a043['_tpbState']===_0x16579d(0xc06)){if('KEAss'!=='KEAss'){if(this[_0x16579d(0xadc)]!==_0x1f1b3c)return this[_0x16579d(0xadc)];return this[_0x16579d(0x574)](),this[_0x16579d(0xadc)];}else _0x67a043[_0x16579d(0x4ea)](_0xa42296);}}}else{if(!this['_shadowSprite'])return;if(this['_battler']&&this[_0x16579d(0xb7d)][_0x16579d(0xc7a)]()){const _0x2540ae=this[_0x16579d(0xb62)][_0x16579d(0x65b)];this[_0x16579d(0xb62)][_0x16579d(0x96a)](0x0,0x0,_0x2540ae['width'],_0x2540ae[_0x16579d(0xdd7)]);}else this['_shadowSprite'][_0x16579d(0x96a)](0x0,0x0,0x0,0x0);}}}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x6c5),_0x594a97=>{const _0x191bb5=_0x54b1a4;if(!SceneManager[_0x191bb5(0xbbd)]())return;VisuMZ['ConvertParams'](_0x594a97,_0x594a97);const _0x3ed226=BattleManager[_0x191bb5(0x65a)];if(!_0x3ed226)return;let _0x212b0a=_0x594a97[_0x191bb5(0x85d)];_0x3ed226[_0x191bb5(0x8ab)](_0x212b0a);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xb5b),_0x45bdf1=>{const _0x34e629=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x34e629(0x97a)](_0x45bdf1,_0x45bdf1);const _0x572d7e=VisuMZ['CreateActionSequenceTargets'](_0x45bdf1[_0x34e629(0x2f2)]);for(const _0x2eb741 of _0x572d7e){if(!_0x2eb741)continue;if(_0x2eb741[_0x34e629(0x680)]())_0x2eb741[_0x34e629(0x9ba)]();}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xbb6),_0x1b4008=>{const _0x50af0e=_0x54b1a4;if(!SceneManager[_0x50af0e(0xbbd)]())return;VisuMZ[_0x50af0e(0x97a)](_0x1b4008,_0x1b4008);const _0x40fd27=$gameTemp[_0x50af0e(0x859)](),_0x1c39f2=BattleManager[_0x50af0e(0x644)],_0x4e79f1=_0x1b4008[_0x50af0e(0x589)];if(!_0x40fd27)return;if(!_0x1c39f2)return;_0x1c39f2&&_0x1c39f2[_0x50af0e(0x5b2)]()&&_0x4e79f1[_0x50af0e(0x8fd)]()[_0x50af0e(0x2f4)]()!==_0x50af0e(0x6bf)&&_0x40fd27[_0x50af0e(0x7bc)]([_0x4e79f1]);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Mechanics_EnemyEscape',_0x2967d4=>{const _0x552cd4=_0x54b1a4;if(!SceneManager[_0x552cd4(0xbbd)]())return;VisuMZ[_0x552cd4(0x97a)](_0x2967d4,_0x2967d4);const _0x429259=VisuMZ[_0x552cd4(0xca4)](_0x2967d4[_0x552cd4(0x2f2)]);for(const _0xebdca4 of _0x429259){if(!_0xebdca4)continue;if(!_0xebdca4[_0x552cd4(0xc3c)]())continue;_0xebdca4[_0x552cd4(0x81e)]();}}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x338),_0x14ce23=>{const _0x3ab036=_0x54b1a4;if(!SceneManager[_0x3ab036(0xbbd)]())return;if(!Imported[_0x3ab036(0x956)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x3ab036(0x97a)](_0x14ce23,_0x14ce23);const _0x470e18=_0x14ce23[_0x3ab036(0x22c)];BattleManager[_0x3ab036(0x644)]&&BattleManager[_0x3ab036(0x644)][_0x3ab036(0x581)]()[_0x3ab036(0xd02)](_0x470e18);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xd8e),_0x5bd2dc=>{const _0x18c37f=_0x54b1a4;if(!SceneManager[_0x18c37f(0xbbd)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager['isFTB']())return;VisuMZ['ConvertParams'](_0x5bd2dc,_0x5bd2dc);const _0x482546=_0x5bd2dc[_0x18c37f(0x22c)];if(BattleManager['_subject']){if(_0x18c37f(0xd61)==='JExBB')BattleManager[_0x18c37f(0x644)][_0x18c37f(0x581)]()[_0x18c37f(0x4c5)](_0x482546);else{if(this[_0x18c37f(0x2bd)]===_0x563063)this[_0x18c37f(0xd21)]();if(!_0x5b4a9f)return;if(this[_0x18c37f(0x2bd)][_0x18c37f(0xd4a)](_0x1d61d2))return;this[_0x18c37f(0x2bd)][_0x18c37f(0x519)](_0x2d0daf),this['_defeatedEnemies'][_0x18c37f(0x496)]((_0x257d08,_0x38732a)=>_0x257d08-_0x38732a);}}}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x69a),_0x30145f=>{const _0x58ee4e=_0x54b1a4;if(!SceneManager[_0x58ee4e(0xbbd)]())return;VisuMZ[_0x58ee4e(0x97a)](_0x30145f,_0x30145f);const _0x540127=VisuMZ[_0x58ee4e(0xca4)](_0x30145f['Targets']),_0xe69e86=_0x30145f[_0x58ee4e(0x43e)],_0xcda92=_0x30145f[_0x58ee4e(0x8c6)],_0x1503b0=_0x30145f[_0x58ee4e(0x5fd)],_0x63dbb7=_0x30145f[_0x58ee4e(0x4dd)],_0x4fb5a1=_0x30145f[_0x58ee4e(0xa6d)],_0x18da64=_0x30145f['TP_Flat'],_0x205b6a=_0x30145f['ShowPopup'];for(const _0x6886a2 of _0x540127){if(_0x58ee4e(0x487)!==_0x58ee4e(0x7f9)){if(!_0x6886a2)continue;const _0xda5fd1=_0x6886a2[_0x58ee4e(0x6a2)](),_0x169666=Math[_0x58ee4e(0x68d)](_0xe69e86*_0x6886a2[_0x58ee4e(0xb2d)]+_0xcda92),_0x2ac4b4=Math[_0x58ee4e(0x68d)](_0x1503b0*_0x6886a2[_0x58ee4e(0x99a)]+_0x63dbb7),_0x205d7b=Math[_0x58ee4e(0x68d)](_0x4fb5a1*_0x6886a2[_0x58ee4e(0x730)]()+_0x18da64);if(_0x169666!==0x0)_0x6886a2[_0x58ee4e(0xc73)](_0x169666);if(_0x2ac4b4!==0x0)_0x6886a2[_0x58ee4e(0x856)](_0x2ac4b4);if(_0x205d7b!==0x0)_0x6886a2[_0x58ee4e(0x50b)](_0x205d7b);if(_0x205b6a)_0x6886a2[_0x58ee4e(0x9ba)]();_0xda5fd1&&_0x6886a2[_0x58ee4e(0x5b2)]()&&_0x6886a2[_0x58ee4e(0xa84)]();}else this[_0x58ee4e(0x830)]();}}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x628),_0x1fc64a=>{const _0x5238a5=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5238a5(0x97a)](_0x1fc64a,_0x1fc64a);const _0x27c888=VisuMZ['CreateActionSequenceTargets'](_0x1fc64a[_0x5238a5(0x2f2)]);for(const _0x42ec99 of _0x27c888){if(!_0x42ec99)continue;_0x42ec99[_0x5238a5(0x69f)](_0x1fc64a['Immortal']);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x7c6),_0x5d433a=>{const _0x4cedbd=_0x54b1a4;if(!SceneManager[_0x4cedbd(0xbbd)]())return;VisuMZ['ConvertParams'](_0x5d433a,_0x5d433a);const _0x55d27e=BattleManager[_0x4cedbd(0x65a)],_0x1b9cd0={'criticalHitRate':_0x5d433a[_0x4cedbd(0xc9f)],'criticalHitFlat':_0x5d433a[_0x4cedbd(0x5ed)],'criticalDmgRate':_0x5d433a[_0x4cedbd(0x4a7)],'criticalDmgFlat':_0x5d433a[_0x4cedbd(0x222)],'damageRate':_0x5d433a[_0x4cedbd(0xd37)],'damageFlat':_0x5d433a['DamageFlat'],'hitRate':_0x5d433a[_0x4cedbd(0xbd4)],'hitFlat':_0x5d433a[_0x4cedbd(0xa67)]};_0x55d27e[_0x4cedbd(0x75d)]=_0x1b9cd0;}),PluginManager['registerCommand'](pluginData['name'],_0x54b1a4(0x4a9),_0x3f8ffa=>{const _0x40d1c9=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3f8ffa,_0x3f8ffa);const _0x1b4101=_0x3f8ffa['CommonEventID'];SceneManager[_0x40d1c9(0xc22)][_0x40d1c9(0x61e)](_0x1b4101);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_OtbOrder',_0x499d2b=>{const _0x1fb4c5=_0x54b1a4;if(!SceneManager[_0x1fb4c5(0xbbd)]())return;if(!Imported[_0x1fb4c5(0xa4c)])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x1fb4c5(0x97a)](_0x499d2b,_0x499d2b);const _0x46f08b=VisuMZ[_0x1fb4c5(0xca4)](_0x499d2b[_0x1fb4c5(0x2f2)]);for(const _0x1aa36d of _0x46f08b){if('bsrnw'!==_0x1fb4c5(0x225)){if(!_0x1aa36d)continue;let _0xbc9ab6=_0x499d2b[_0x1fb4c5(0x3fc)],_0xe6b985=_0x499d2b[_0x1fb4c5(0x3eb)],_0x33096e=_0x499d2b[_0x1fb4c5(0x2dc)];BattleManager[_0x1fb4c5(0xbe4)][_0x1fb4c5(0xd4a)](_0x1aa36d)?_0xbc9ab6+=_0x33096e:_0x1fb4c5(0xc96)===_0x1fb4c5(0xc96)?_0xe6b985+=_0x33096e:_0x4691a1-=_0x4e7d22['mainSpriteHeight']()/0x2,BattleManager[_0x1fb4c5(0xa49)](_0x1aa36d,-_0xbc9ab6,![]),BattleManager[_0x1fb4c5(0xa49)](_0x1aa36d,-_0xe6b985,!![]);}else{if(this['actor']()[_0x1fb4c5(0xd77)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x173002(_0x1fffa3['$1']);else{if(this[_0x1fb4c5(0x6fe)]()[_0x1fb4c5(0xd77)][_0x1fb4c5(0x298)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x219954(_0x30df2c['$2']);}return 0x0;}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x5f8),_0xbaa717=>{const _0x2fd721=_0x54b1a4;if(!SceneManager[_0x2fd721(0xbbd)]())return;if(!Imported[_0x2fd721(0x36f)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x2fd721(0x97a)](_0xbaa717,_0xbaa717);const _0x41a356=BattleManager[_0x2fd721(0x644)]['friendsUnit'](),_0x1faa3f=_0xbaa717['Override'],_0x1020d0=_0xbaa717[_0x2fd721(0x701)]||'unchanged',_0x872a3c=_0xbaa717[_0x2fd721(0x4af)]||'unchanged',_0x3fb42c=_0xbaa717[_0x2fd721(0x8d1)]||0x0,_0x9460e2=_0xbaa717[_0x2fd721(0xbfa)]||0x0;(_0x41a356[_0x2fd721(0x937)]()||_0x1faa3f)&&(_0x1faa3f&&(_0x41a356[_0x2fd721(0xceb)]=_0x41a356['_ptbActionCost']||{},_0x41a356[_0x2fd721(0xceb)][_0x2fd721(0x427)]=0x0),_0x41a356[_0x2fd721(0xb22)](_0x1020d0,_0x872a3c,_0x3fb42c,_0x9460e2));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x6dd),_0x7c3334=>{const _0xa8d4f=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xa8d4f(0x36f)])return;if(!BattleManager['isPTB']())return;VisuMZ['ConvertParams'](_0x7c3334,_0x7c3334);const _0x3d7be0=BattleManager[_0xa8d4f(0x644)][_0xa8d4f(0x581)]();let _0x277856=Math[_0xa8d4f(0x9db)](_0x7c3334[_0xa8d4f(0xa18)],0x0),_0x56280c=_0x3d7be0[_0xa8d4f(0x594)](),_0x6d552=_0x3d7be0[_0xa8d4f(0x7f5)]();while(_0x277856--){if(_0x56280c<=0x0&&_0x6d552<=0x0){if(_0xa8d4f(0xd70)===_0xa8d4f(0xa71)){const _0x1df00b=this[_0xa8d4f(0x8cc)][this[_0xa8d4f(0x8cc)][_0xa8d4f(0x69d)]-0x1];_0x1df00b&&(_0x3e1102['x']=_0x1df00b['x']+_0x5c322e[_0xa8d4f(0x39a)]*_0x1d9d7d,_0x2ad8d6['y']=_0x1df00b['y']+_0x462c39[_0xa8d4f(0x9c1)]);}else break;}else _0x56280c>0x0?(_0x56280c--,_0x6d552++):'NzAJy'!==_0xa8d4f(0x5a8)?this['_linkedSprite']=_0x1630b1:_0x6d552--;}_0x3d7be0[_0xa8d4f(0x861)](_0x56280c),_0x3d7be0[_0xa8d4f(0x4ca)](_0x6d552);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x6c3),_0x224449=>{const _0x469064=_0x54b1a4;if(!SceneManager[_0x469064(0xbbd)]())return;if(!Imported[_0x469064(0x36f)])return;if(!BattleManager[_0x469064(0xb30)]())return;VisuMZ[_0x469064(0x97a)](_0x224449,_0x224449);const _0x3913b5=BattleManager[_0x469064(0x644)]['friendsUnit']();let _0x45da92=_0x224449[_0x469064(0x6b2)],_0x8a236=_0x224449[_0x469064(0xa30)];_0x3913b5[_0x469064(0xc2c)](_0x45da92),_0x3913b5[_0x469064(0x330)](_0x8a236);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x858),_0xe7f4bc=>{const _0xc5d132=_0x54b1a4;if(!SceneManager[_0xc5d132(0xbbd)]())return;VisuMZ[_0xc5d132(0x97a)](_0xe7f4bc,_0xe7f4bc);const _0x1b4fea=['MAXHP',_0xc5d132(0x257),'ATK',_0xc5d132(0xaeb),_0xc5d132(0x6a3),_0xc5d132(0x2c9),_0xc5d132(0xcb8),_0xc5d132(0xb6d)],_0x4b6d1f=_0xe7f4bc[_0xc5d132(0x9ef)],_0x2aa2e5=_0xe7f4bc[_0xc5d132(0xcce)],_0x21d19b=VisuMZ[_0xc5d132(0xca4)](_0xe7f4bc['Targets']);for(const _0x2076e6 of _0x21d19b){if(_0xc5d132(0x651)!==_0xc5d132(0x651)){if(!(_0x4ef7d4[_0xc5d132(0x387)]['Settings'][_0xc5d132(0x7d6)][_0xc5d132(0x83e)]??!![]))return;const _0x2d257d=this['commandSymbol'](_0x6d0f77);if(![_0xc5d132(0x371),'guard','singleSkill']['includes'](_0x2d257d))return;const _0x32af94=this['itemLineRect'](_0x3a5989);let _0x6e3ee0=null;if(_0x2d257d===_0xc5d132(0x371))_0x6e3ee0=_0x20428f[this[_0xc5d132(0x2f3)][_0xc5d132(0xa47)]()];else _0x2d257d===_0xc5d132(0x890)?_0x6e3ee0=_0x340202[this[_0xc5d132(0x2f3)][_0xc5d132(0x61b)]()]:_0x6e3ee0=_0xbcd127[this[_0xc5d132(0x8c3)][_0x3239d8][_0xc5d132(0x4e2)]];this['drawSkillCost'](this[_0xc5d132(0x2f3)],_0x6e3ee0,_0x32af94['x'],_0x32af94['y'],_0x32af94[_0xc5d132(0x495)]);}else{if(!_0x2076e6)continue;for(const _0x6607f of _0x4b6d1f){if('lKlke'!=='QGfoD'){const _0x28b698=_0x1b4fea[_0xc5d132(0x940)](_0x6607f[_0xc5d132(0x8fd)]()[_0xc5d132(0x2f4)]());_0x28b698>=0x0&&_0x28b698<=0x7&&_0x2076e6[_0xc5d132(0xbd0)](_0x28b698)&&_0x2076e6[_0xc5d132(0xdd3)](_0x28b698);}else this[_0xc5d132(0x7d0)]=!![],_0x51c2b5['reserveCommonEvent'](_0x5e942b[_0xc5d132(0x374)]),_0x5ba6d7['updateInterpreter'](),_0x1efdda['_interpreter'][_0xc5d132(0x5b6)]=!![];}for(const _0x4a33d5 of _0x2aa2e5){const _0x3632cd=_0x1b4fea[_0xc5d132(0x940)](_0x4a33d5[_0xc5d132(0x8fd)]()[_0xc5d132(0x2f4)]());_0x3632cd>=0x0&&_0x3632cd<=0x7&&_0x2076e6[_0xc5d132(0xae1)](_0x3632cd)&&_0x2076e6[_0xc5d132(0xdd3)](_0x3632cd);}}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x35f),_0x4eea33=>{const _0x47e2f5=_0x54b1a4;if(!SceneManager[_0x47e2f5(0xbbd)]())return;VisuMZ['ConvertParams'](_0x4eea33,_0x4eea33);const _0x5c3af3=_0x4eea33[_0x47e2f5(0x917)],_0x1e16fd=VisuMZ['CreateActionSequenceTargets'](_0x4eea33[_0x47e2f5(0x2f2)]);for(const _0x197705 of _0x1e16fd){if(!_0x197705)continue;for(const _0x4c2da3 of _0x5c3af3){_0x197705['removeState'](_0x4c2da3);}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x7aa),_0x355bcc=>{const _0x56f942=_0x54b1a4;if(!SceneManager[_0x56f942(0xbbd)]())return;if(!Imported[_0x56f942(0xa12)])return;if(!BattleManager[_0x56f942(0xa24)]())return;VisuMZ[_0x56f942(0x97a)](_0x355bcc,_0x355bcc);const _0x2b95cb=_0x355bcc['Exploited'],_0x710283=VisuMZ[_0x56f942(0xca4)](_0x355bcc[_0x56f942(0x2f2)]),_0x2249d1=_0x355bcc[_0x56f942(0x9c9)],_0x3a2f41=_0x355bcc['Exploiter'],_0x36fb61=_0x355bcc['ForceExploiter'],_0x9723e4=BattleManager[_0x56f942(0x65a)];if(_0x2b95cb){if(_0x56f942(0x64f)!==_0x56f942(0x2da))for(const _0x22b4fd of _0x710283){if(_0x56f942(0x6ee)===_0x56f942(0xc8c)){if(!_0x47d89e[_0x56f942(0xc22)]['_uiContainer'])return;_0x3f2a8c[_0x56f942(0xc22)][_0x56f942(0x3e0)]['addChild'](_0x4d5c76);}else{if(!_0x22b4fd)continue;if(_0x22b4fd===user)continue;if(_0x2249d1)_0x22b4fd[_0x56f942(0x20d)](![]);_0x22b4fd[_0x56f942(0xc19)](BattleManager[_0x56f942(0x644)],_0x9723e4);}}else return _0x30489a[_0x56f942(0xc22)]['battleLayoutStyle']()==='border'?_0x3c7675[_0x56f942(0x387)][_0x56f942(0x916)][_0x56f942(0x6f0)][_0x56f942(0x820)]:_0x28d956[_0x56f942(0x387)][_0x56f942(0x916)][_0x56f942(0x6f0)][_0x56f942(0x669)];}if(_0x3a2f41&&BattleManager[_0x56f942(0x644)]){if(_0x36fb61)BattleManager[_0x56f942(0x644)][_0x56f942(0x20d)](![]);const _0x24b58f=_0x710283[0x0];BattleManager[_0x56f942(0xd9c)](_0x24b58f,_0x9723e4);}}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x5a3),_0x4ad3dc=>{const _0x1590f2=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1590f2(0xa12)])return;if(!BattleManager[_0x1590f2(0xa24)]())return;VisuMZ[_0x1590f2(0x97a)](_0x4ad3dc,_0x4ad3dc);const _0x3e7b45=_0x4ad3dc[_0x1590f2(0x681)];if(BattleManager[_0x1590f2(0x644)]){if('vJzBy'!=='vJzBy'){const _0x476fac=this[_0x1590f2(0x408)]();if(_0x476fac>=0x0){const _0x184b51=this[_0x1590f2(0x369)]()?_0x1590f2(0xc1c):_0x1590f2(0x3cf);_0x592bb9[_0x1590f2(0xa01)](_0x184b51);}}else BattleManager[_0x1590f2(0x644)]['stbGainInstant'](_0x3e7b45);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x6d7),_0x544061=>{const _0x4668ad=_0x54b1a4;if(!SceneManager[_0x4668ad(0xbbd)]())return;if(!Imported[_0x4668ad(0xa12)])return;if(!BattleManager[_0x4668ad(0xa24)]())return;VisuMZ['ConvertParams'](_0x544061,_0x544061);let _0x511182=_0x544061[_0x4668ad(0x681)];if(BattleManager[_0x4668ad(0x644)]){if(_0x4668ad(0x30e)!==_0x4668ad(0x60c)){BattleManager[_0x4668ad(0x644)][_0x4668ad(0x955)]=BattleManager[_0x4668ad(0x644)]['_actions']||[];while(_0x511182--){if(_0x4668ad(0x73c)===_0x4668ad(0xbfe))return![];else{if(BattleManager[_0x4668ad(0x644)][_0x4668ad(0x955)][_0x4668ad(0x69d)]<=0x0)break;BattleManager[_0x4668ad(0x644)][_0x4668ad(0x955)][_0x4668ad(0x382)]();}}}else this[_0x4668ad(0x501)]=(this['_floatHeight']*(_0x3baf9c-0x1)+this[_0x4668ad(0xa3d)])/_0xddaf35;}}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x529),_0xf9d116=>{const _0x31ce8b=_0x54b1a4;if(!SceneManager[_0x31ce8b(0xbbd)]())return;if(!Imported[_0x31ce8b(0x9f7)])return;VisuMZ[_0x31ce8b(0x97a)](_0xf9d116,_0xf9d116);const _0x847cf=VisuMZ[_0x31ce8b(0xca4)](_0xf9d116[_0x31ce8b(0x2f2)]),_0x24a4a9=_0xf9d116[_0x31ce8b(0x305)];for(const _0x3df8a6 of _0x847cf){if(!_0x3df8a6)continue;if(!_0x3df8a6[_0x31ce8b(0xa2c)]())continue;_0x3df8a6['switchToWeaponType'](_0x24a4a9);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x779),_0xeb38c6=>{const _0x499159=_0x54b1a4;if(!SceneManager[_0x499159(0xbbd)]())return;VisuMZ[_0x499159(0x97a)](_0xeb38c6,_0xeb38c6);const _0x363ab3=VisuMZ[_0x499159(0xca4)](_0xeb38c6['Targets']),_0xd1b5b5=_0xeb38c6[_0x499159(0x9a1)],_0x759f8b={'textColor':ColorManager[_0x499159(0xcc3)](_0xeb38c6[_0x499159(0x8be)]),'flashColor':_0xeb38c6[_0x499159(0x9b4)],'flashDuration':_0xeb38c6[_0x499159(0x9dd)]};for(const _0xb1e2ce of _0x363ab3){if(_0x499159(0xb76)===_0x499159(0xb76)){if(!_0xb1e2ce)continue;_0xb1e2ce[_0x499159(0x703)](_0xd1b5b5,_0x759f8b);}else{if(this[_0x499159(0x83b)])return this['_battleLayoutStyle'];return this[_0x499159(0x83b)]=_0x21120c[_0x499159(0xc22)][_0x499159(0xd92)](),this[_0x499159(0x83b)];}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x617),_0x59d28a=>{const _0x5de95c=_0x54b1a4;if(!SceneManager[_0x5de95c(0xbbd)]())return;VisuMZ[_0x5de95c(0x97a)](_0x59d28a,_0x59d28a);const _0x48a498=VisuMZ['CreateActionSequenceTargets'](_0x59d28a[_0x5de95c(0x2f2)]);let _0x1b18d2=$gameVariables[_0x5de95c(0x9e0)](_0x59d28a['Variable']);if(Imported[_0x5de95c(0x2e5)]&&_0x59d28a[_0x5de95c(0xd33)]){if(_0x5de95c(0x9d6)!==_0x5de95c(0x5bd))_0x1b18d2=VisuMZ['GroupDigits'](_0x1b18d2);else{if(!_0x2388f7['isSceneBattle']())return;if(!_0x4a864f[_0x5de95c(0xbeb)])return;_0x27d98f['ConvertParams'](_0x41f2bc,_0x4a73c2),_0x471b49['_scene'][_0x5de95c(0x28f)]();const _0x38d624=_0x5507b3[_0x5de95c(0x859)]();_0x38d624&&_0x546590[_0x5de95c(0x58d)]&&_0x38d624[_0x5de95c(0xc6a)](_0x5de95c(0x9be));}}const _0x133f6e=String(_0x1b18d2),_0x156e58={'textColor':ColorManager[_0x5de95c(0xcc3)](_0x59d28a[_0x5de95c(0x8be)]),'flashColor':_0x59d28a[_0x5de95c(0x9b4)],'flashDuration':_0x59d28a['FlashDuration']};for(const _0x3b04fd of _0x48a498){if(!_0x3b04fd)continue;_0x3b04fd['setupTextPopup'](_0x133f6e,_0x156e58);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Mechanics_WaitForEffect',_0x4bda7d=>{const _0x2c5079=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;const _0x2a5d33=$gameTemp[_0x2c5079(0x859)]();if(!_0x2a5d33)return;_0x2a5d33['setWaitMode'](_0x2c5079(0x435));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x9a9),_0x27c8ad=>{const _0x2bb310=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2bb310(0x97a)](_0x27c8ad,_0x27c8ad);const _0x28a783=VisuMZ[_0x2bb310(0xca4)](_0x27c8ad['Targets']);for(const _0x2d5726 of _0x28a783){if(!_0x2d5726)continue;_0x2d5726[_0x2bb310(0xb5c)]();}}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xc5a),_0x354c7b=>{const _0x37e808=_0x54b1a4;if(!SceneManager[_0x37e808(0xbbd)]())return;VisuMZ[_0x37e808(0x97a)](_0x354c7b,_0x354c7b);const _0x1ed994=VisuMZ['CreateActionSequenceTargets'](_0x354c7b[_0x37e808(0x2f2)]),_0x23a6aa=_0x354c7b['MotionType'][_0x37e808(0x6d1)]()[_0x37e808(0x2f4)]();let _0x19a26f=_0x354c7b[_0x37e808(0x90c)];const _0x28d1c2=_0x354c7b[_0x37e808(0x272)];![_0x37e808(0x371),'thrust',_0x37e808(0x3c3),'missile'][_0x37e808(0xd4a)](_0x23a6aa)&&(_0x19a26f=![]);for(const _0x34e9a0 of _0x1ed994){if('tAoxt'!=='namWw'){if(!_0x34e9a0)continue;_0x34e9a0[_0x37e808(0xbbc)](_0x23a6aa,_0x19a26f,_0x28d1c2);}else _0x122f00=_0x4f7802[_0x37e808(0xa52)];}}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],'ActSeq_Motion_MotionType',_0x3c2963=>{const _0xe7e820=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xe7e820(0x97a)](_0x3c2963,_0x3c2963);const _0x457c05=VisuMZ[_0xe7e820(0xca4)](_0x3c2963[_0xe7e820(0x2f2)]),_0x9e86a7=_0x3c2963[_0xe7e820(0x6e9)][_0xe7e820(0x6d1)]()[_0xe7e820(0x2f4)](),_0x1a96b1=_0x3c2963[_0xe7e820(0x90c)];for(const _0xd2f4fe of _0x457c05){if(_0xe7e820(0x596)!==_0xe7e820(0x596))_0x19eae8[_0xe7e820(0x7bc)]([_0x2d472c]);else{if(!_0xd2f4fe)continue;if(_0x9e86a7[_0xe7e820(0x298)](/ATTACK[ ](\d+)/i))_0xd2f4fe['performAttackSlot'](Number(RegExp['$1']));else _0x9e86a7==='attack'?_0xe7e820(0x991)!=='HOPjj'?_0xd2f4fe[_0xe7e820(0x9c7)]():_0xb1f79c=_0x2e6fdb['BattleCore'][_0xe7e820(0x268)][_0xe7e820(0xd6c)](this):_0xd2f4fe[_0xe7e820(0x676)](_0x9e86a7);if(!_0x1a96b1)_0xd2f4fe[_0xe7e820(0x4c6)](0x0);else{if(_0x1a96b1&&['thrust','swing',_0xe7e820(0x70c)][_0xe7e820(0xd4a)](_0x9e86a7)){}}}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x237),_0x2688ab=>{const _0x56ad1=_0x54b1a4;if(!SceneManager[_0x56ad1(0xbbd)]())return;VisuMZ[_0x56ad1(0x97a)](_0x2688ab,_0x2688ab);const _0x243957=BattleManager['_action'];if(!_0x243957)return;if(!_0x243957[_0x56ad1(0x7b6)]())return;const _0x13f1ef=VisuMZ['CreateActionSequenceTargets'](_0x2688ab[_0x56ad1(0x2f2)]);for(const _0x2c069d of _0x13f1ef){if(!_0x2c069d)continue;_0x2c069d[_0x56ad1(0x357)](_0x243957);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x5df),_0x627356=>{const _0x57a0a0=_0x54b1a4;if(!SceneManager[_0x57a0a0(0xbbd)]())return;VisuMZ[_0x57a0a0(0x97a)](_0x627356,_0x627356);const _0x21903e=VisuMZ[_0x57a0a0(0xca4)](_0x627356['Targets']);for(const _0x5d07bf of _0x21903e){if(!_0x5d07bf)continue;if(!_0x5d07bf[_0x57a0a0(0x887)]())continue;_0x5d07bf[_0x57a0a0(0x887)]()['refreshMotion']();}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x74f),_0x2bbf4f=>{const _0x1bd996=_0x54b1a4;if(!SceneManager[_0x1bd996(0xbbd)]())return;VisuMZ['ConvertParams'](_0x2bbf4f,_0x2bbf4f);const _0x437045=$gameTemp[_0x1bd996(0x859)](),_0x46d528=_0x2bbf4f['MotionFrameWait']*Sprite_Battler['_motionSpeed'];_0x437045[_0x1bd996(0x755)](_0x46d528);}),PluginManager['registerCommand'](pluginData['name'],_0x54b1a4(0x48a),_0x446e7b=>{const _0x27d93b=_0x54b1a4;if(!SceneManager[_0x27d93b(0xbbd)]())return;VisuMZ['ConvertParams'](_0x446e7b,_0x446e7b);const _0x11eede=$gameTemp[_0x27d93b(0x859)](),_0x300305=BattleManager['_action'];if(!_0x11eede||!_0x300305)return;if(!_0x300305[_0x27d93b(0x7b6)]())return;const _0x1148ae=VisuMZ[_0x27d93b(0xca4)](_0x446e7b[_0x27d93b(0x2f2)]);for(const _0xc8d84c of _0x1148ae){if(!_0xc8d84c)continue;_0xc8d84c[_0x27d93b(0xab0)](_0x300305);}if(_0x446e7b[_0x27d93b(0x343)])_0x11eede['setWaitMode'](_0x27d93b(0x3aa));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xc88),_0x13bd66=>{const _0x6619eb=_0x54b1a4;if(!SceneManager[_0x6619eb(0xbbd)]())return;if(!$gameSystem[_0x6619eb(0xc91)]())return;VisuMZ['ConvertParams'](_0x13bd66,_0x13bd66);const _0x3e26d6=$gameTemp[_0x6619eb(0x859)](),_0x13052a=VisuMZ[_0x6619eb(0xca4)](_0x13bd66[_0x6619eb(0x2f2)]),_0x5059d2=_0x13bd66[_0x6619eb(0xa36)],_0x42c631=_0x13bd66[_0x6619eb(0x392)],_0x5eb25f=_0x13bd66['DistanceY'],_0xaaec64=_0x13bd66[_0x6619eb(0x8db)],_0x2dca30=_0x13bd66[_0x6619eb(0x22d)],_0x230c55=_0x13bd66['EasingType'],_0x1a6291=_0x13bd66[_0x6619eb(0x6e9)],_0x63af93=_0x13bd66['WaitForMovement'];if(!_0x3e26d6)return;for(const _0x2125c6 of _0x13052a){if(_0x6619eb(0x236)===_0x6619eb(0x236)){if(!_0x2125c6)continue;let _0x51eb46=_0x42c631,_0x3732ba=_0x5eb25f;if(_0x5059d2[_0x6619eb(0x298)](/horz/i))_0x51eb46*=_0x2125c6['isActor']()?-0x1:0x1;if(_0x5059d2['match'](/vert/i))_0x3732ba*=_0x2125c6[_0x6619eb(0xa2c)]()?-0x1:0x1;_0x2125c6[_0x6619eb(0x953)](_0x51eb46,_0x3732ba,_0xaaec64,_0x2dca30,_0x230c55),_0x2125c6[_0x6619eb(0x676)](_0x1a6291);}else _0x3f50b0=_0x1d942b>=_0x2922ee?_0x823b7c:_0x38c975;}if(_0x63af93)_0x3e26d6[_0x6619eb(0xc6a)]('battleMove');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x274),_0x20614a=>{const _0x377cc3=_0x54b1a4;if(!SceneManager[_0x377cc3(0xbbd)]())return;if(!$gameSystem[_0x377cc3(0xc91)]())return;VisuMZ[_0x377cc3(0x97a)](_0x20614a,_0x20614a);const _0x6cfd0c=$gameTemp['getLastPluginCommandInterpreter'](),_0x376315=VisuMZ[_0x377cc3(0xca4)](_0x20614a[_0x377cc3(0x2f2)]),_0x2f183c=_0x20614a['Destination'],_0x3da6fc=_0x20614a[_0x377cc3(0xcbc)],_0x1256f4=_0x20614a[_0x377cc3(0x8bd)],_0x16ce79=_0x20614a['OffsetY'],_0x318460=_0x20614a[_0x377cc3(0x8db)],_0x2cb9b8=_0x20614a[_0x377cc3(0x22d)],_0x3a9a04=_0x20614a['EasingType'],_0x233642=_0x20614a[_0x377cc3(0x6e9)],_0x421ec3=_0x20614a[_0x377cc3(0x343)];if(!_0x6cfd0c)return;for(const _0x3b4283 of _0x376315){if(!_0x3b4283)continue;let _0x3ddf9c=_0x3b4283[_0x377cc3(0x887)]()[_0x377cc3(0xc43)],_0x4a29f4=_0x3b4283[_0x377cc3(0x887)]()[_0x377cc3(0xb10)];if(_0x2f183c[_0x377cc3(0x298)](/home/i)){if(_0x377cc3(0x6d3)===_0x377cc3(0xaab)){const _0x238f3e=this[_0x377cc3(0x687)];return _0x238f3e[_0x377cc3(0x298)](/ACTOR/i)?this['friendsUnit']()[_0x377cc3(0xab2)]():this[_0x377cc3(0xb1e)]()['trueRandomTarget']();}else _0x3ddf9c=_0x3b4283[_0x377cc3(0x887)]()['_homeX'],_0x4a29f4=_0x3b4283[_0x377cc3(0x887)]()[_0x377cc3(0x96f)];}else{if(_0x2f183c['match'](/center/i))_0x3ddf9c=Graphics[_0x377cc3(0xb36)]/0x2,_0x4a29f4=Graphics[_0x377cc3(0x67b)]/0x2;else{if(_0x2f183c[_0x377cc3(0x298)](/point (\d+), (\d+)/i)){if(_0x377cc3(0x28c)==='qBrVH')_0x3ddf9c=Number(RegExp['$1']),_0x4a29f4=Number(RegExp['$2']);else for(const _0x4daaaf of _0x12d087[_0x377cc3(0x3b6)]()){this[_0x377cc3(0x82e)][_0x377cc3(0x519)](_0x377cc3(0xcd7),_0x192429[_0x377cc3(0x5b8)][_0x377cc3(0xd76)](_0x4daaaf)),this['_logWindow']['push'](_0x377cc3(0x755)),_0x4e6cb2=!![];}}}}if(_0x3da6fc[_0x377cc3(0x298)](/none/i))_0x3ddf9c+=_0x1256f4,_0x4a29f4+=_0x16ce79;else{if(_0x3da6fc[_0x377cc3(0x298)](/horz/i)&&_0x3da6fc[_0x377cc3(0x298)](/vert/i))_0x3ddf9c+=_0x3b4283[_0x377cc3(0xa2c)]()?-_0x1256f4:_0x1256f4,_0x4a29f4+=_0x3b4283[_0x377cc3(0xa2c)]()?-_0x16ce79:_0x16ce79;else{if(_0x3da6fc[_0x377cc3(0x298)](/horz/i))_0x3ddf9c+=_0x3b4283[_0x377cc3(0xa2c)]()?-_0x1256f4:_0x1256f4,_0x4a29f4+=_0x16ce79;else _0x3da6fc[_0x377cc3(0x298)](/vert/i)&&(_0x3ddf9c+=_0x1256f4,_0x4a29f4+=_0x3b4283[_0x377cc3(0xa2c)]()?-_0x16ce79:_0x16ce79);}}_0x3b4283['moveBattlerHomeToPoint'](_0x3ddf9c,_0x4a29f4,_0x318460,_0x2cb9b8,_0x3a9a04,-0x1),_0x3b4283[_0x377cc3(0x676)](_0x233642);}if(_0x421ec3)_0x6cfd0c[_0x377cc3(0xc6a)](_0x377cc3(0x3aa));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x46f),_0x13874e=>{const _0xfc98e7=_0x54b1a4;if(!SceneManager[_0xfc98e7(0xbbd)]())return;if(!$gameSystem[_0xfc98e7(0xc91)]())return;VisuMZ['ConvertParams'](_0x13874e,_0x13874e);const _0x2d9501=$gameTemp['getLastPluginCommandInterpreter'](),_0x4b6870=VisuMZ['CreateActionSequenceTargets'](_0x13874e[_0xfc98e7(0xce2)]),_0x5e47f2=VisuMZ['CreateActionSequenceTargets'](_0x13874e[_0xfc98e7(0x85f)]),_0x37179f=_0x13874e['TargetLocation'];let _0x40c8a1=_0x13874e[_0xfc98e7(0xda8)];const _0x1c51ba=_0x13874e[_0xfc98e7(0xcbc)],_0x418c7b=_0x13874e[_0xfc98e7(0x8bd)],_0xabbe4d=_0x13874e[_0xfc98e7(0x567)],_0x49cb01=_0x13874e[_0xfc98e7(0x8db)],_0x8aff00=_0x13874e[_0xfc98e7(0x22d)],_0x51229a=_0x13874e[_0xfc98e7(0x4e4)],_0x452d49=_0x13874e['MotionType'],_0x3b7d4f=_0x13874e[_0xfc98e7(0x343)],_0x3d3f3f=Math[_0xfc98e7(0x41c)](..._0x5e47f2[_0xfc98e7(0x8bb)](_0x216051=>_0x216051[_0xfc98e7(0x887)]()[_0xfc98e7(0xc43)]-_0x216051['battler']()[_0xfc98e7(0xc30)]()/0x2)),_0x32e4aa=Math[_0xfc98e7(0x9db)](..._0x5e47f2['map'](_0x269e90=>_0x269e90['battler']()['_baseX']+_0x269e90[_0xfc98e7(0x887)]()[_0xfc98e7(0xc30)]()/0x2)),_0x56bf0c=Math[_0xfc98e7(0x41c)](..._0x5e47f2['map'](_0x1fb8e9=>_0x1fb8e9[_0xfc98e7(0x887)]()[_0xfc98e7(0xb10)]-_0x1fb8e9['battler']()['mainSpriteHeight']())),_0x27926e=Math[_0xfc98e7(0x9db)](..._0x5e47f2[_0xfc98e7(0x8bb)](_0x1495ba=>_0x1495ba[_0xfc98e7(0x887)]()[_0xfc98e7(0xb10)])),_0x51b31c=_0x5e47f2['filter'](_0x3c343f=>_0x3c343f[_0xfc98e7(0xa2c)]())[_0xfc98e7(0x69d)],_0x2e083a=_0x5e47f2[_0xfc98e7(0x661)](_0x42b496=>_0x42b496[_0xfc98e7(0xc3c)]())[_0xfc98e7(0x69d)];let _0x472785=0x0,_0x47b0df=0x0;if(_0x37179f[_0xfc98e7(0x298)](/front/i)){if(_0xfc98e7(0xdc9)===_0xfc98e7(0xb7f)){const _0x1900a2=_0x56216e[_0xfc98e7(0x8e7)]();_0x1900a2[_0xfc98e7(0x802)](this[_0xfc98e7(0x8c2)][_0xfc98e7(0x717)]()),this['_enemyWindow'][_0xfc98e7(0x97b)](),_0x1b80fe[_0xfc98e7(0x387)][_0xfc98e7(0x840)][_0xfc98e7(0xd6c)](this),this[_0xfc98e7(0xd3b)]();}else _0x472785=_0x51b31c>=_0x2e083a?_0x3d3f3f:_0x32e4aa;}else{if(_0x37179f[_0xfc98e7(0x298)](/middle/i))'nkFvR'!==_0xfc98e7(0x706)?(_0x472785=(_0x3d3f3f+_0x32e4aa)/0x2,_0x40c8a1=-0x1):(this[_0xfc98e7(0x519)](_0xfc98e7(0x357),_0x1f21a2,_0x18b5cb),this[_0xfc98e7(0x519)](_0xfc98e7(0x2e8),_0x17ff10[_0xfc98e7(0xd53)]),this['push'](_0xfc98e7(0x767),_0x20e3b8,_0x545981[_0xfc98e7(0xafc)](),_0x27404b['animationId']),this[_0xfc98e7(0x519)]('waitForAnimation'));else _0x37179f[_0xfc98e7(0x298)](/back/i)&&(_0x472785=_0x51b31c>=_0x2e083a?_0x32e4aa:_0x3d3f3f);}if(_0x37179f[_0xfc98e7(0x298)](/head/i))'hUAOh'===_0xfc98e7(0xc1b)?_0x47b0df=_0x56bf0c:this[_0xfc98e7(0x81d)]();else{if(_0x37179f[_0xfc98e7(0x298)](/center/i))'litAH'!==_0xfc98e7(0x6b5)?_0x47b0df=(_0x56bf0c+_0x27926e)/0x2:(this[_0xfc98e7(0x7cf)]=![],_0x371d98[_0xfc98e7(0x387)][_0xfc98e7(0x461)][_0xfc98e7(0xd6c)](this));else{if(_0x37179f[_0xfc98e7(0x298)](/base/i)){if(_0xfc98e7(0x6a1)!==_0xfc98e7(0xac3))_0x47b0df=_0x27926e;else return[_0x55acc6][_0xfc98e7(0x645)](_0x1818f8);}}}if(!_0x2d9501)return;for(const _0xed2572 of _0x4b6870){if(_0xfc98e7(0x2ba)!==_0xfc98e7(0x5bc)){if(!_0xed2572)continue;let _0x1ea5ad=_0x472785,_0x65ec29=_0x47b0df;if(_0x1c51ba[_0xfc98e7(0x298)](/none/i))_0xfc98e7(0x624)===_0xfc98e7(0x736)?this['_cache'][_0xfc98e7(0x82b)]=_0x15e74f['prototype'][_0xfc98e7(0xc7a)][_0xfc98e7(0xd6c)](this):(_0x1ea5ad+=_0x418c7b,_0x65ec29+=_0xabbe4d);else{if(_0x1c51ba[_0xfc98e7(0x298)](/horz/i)&&_0x1c51ba[_0xfc98e7(0x298)](/vert/i))_0x1ea5ad+=_0xed2572[_0xfc98e7(0xa2c)]()?-_0x418c7b:_0x418c7b,_0x65ec29+=_0xed2572[_0xfc98e7(0xa2c)]()?-_0xabbe4d:_0xabbe4d;else{if(_0x1c51ba[_0xfc98e7(0x298)](/horz/i))_0x1ea5ad+=_0xed2572[_0xfc98e7(0xa2c)]()?-_0x418c7b:_0x418c7b,_0x65ec29+=_0xabbe4d;else _0x1c51ba['match'](/vert/i)&&(_0x1ea5ad+=_0x418c7b,_0x65ec29+=_0xed2572[_0xfc98e7(0xa2c)]()?-_0xabbe4d:_0xabbe4d);}}_0xed2572[_0xfc98e7(0x22f)](_0x1ea5ad,_0x65ec29,_0x49cb01,_0x8aff00,_0x51229a,_0x40c8a1),_0xed2572['requestMotion'](_0x452d49);}else{if(this[_0xfc98e7(0x278)]<=0x0)return;const _0x5c4b3a=this['_floatDuration'],_0x3e9fd5=this[_0xfc98e7(0xa06)],_0x3e585a=this['_floatEasing'];_0x4c00d4[_0xfc98e7(0x2e5)]?this[_0xfc98e7(0x501)]=this[_0xfc98e7(0x8e0)](this[_0xfc98e7(0x501)],this['_targetFloatHeight'],_0x5c4b3a,_0x3e9fd5,_0x3e585a):this['_floatHeight']=(this[_0xfc98e7(0x501)]*(_0x5c4b3a-0x1)+this['_targetFloatHeight'])/_0x5c4b3a;this['_floatDuration']--;if(this[_0xfc98e7(0x278)]<=0x0)this[_0xfc98e7(0x37d)]();}}if(_0x3b7d4f)_0x2d9501[_0xfc98e7(0xc6a)](_0xfc98e7(0x3aa));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x407),_0x2f6353=>{const _0x280b09=_0x54b1a4;if(!SceneManager[_0x280b09(0xbbd)]())return;if(!$gameSystem[_0x280b09(0xc91)]())return;VisuMZ[_0x280b09(0x97a)](_0x2f6353,_0x2f6353);const _0x29a9e3=VisuMZ[_0x280b09(0xca4)](_0x2f6353['Targets']);let _0x134987=_0x2f6353[_0x280b09(0x531)]['match'](/back/i);for(const _0x6396fd of _0x29a9e3){if(_0x280b09(0xcaa)!==_0x280b09(0xcaa))return this[_0x280b09(0xb7a)]()&&this['currentAction']()[_0x280b09(0x7b6)]()&&!this[_0x280b09(0xb7a)]()['isMagicSkill']();else{if(!_0x6396fd)continue;if(_0x2f6353[_0x280b09(0x531)][_0x280b09(0x298)](/rand/i))_0x134987=Math[_0x280b09(0xcf9)](0x2);_0x6396fd[_0x280b09(0xd07)](!!_0x134987);}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Movement_FacePoint',_0x64bf00=>{const _0x5c2f06=_0x54b1a4;if(!SceneManager[_0x5c2f06(0xbbd)]())return;if(!$gameSystem[_0x5c2f06(0xc91)]())return;VisuMZ[_0x5c2f06(0x97a)](_0x64bf00,_0x64bf00);const _0x13bbd3=VisuMZ['CreateActionSequenceTargets'](_0x64bf00[_0x5c2f06(0x2f2)]);let _0x3851a4=_0x64bf00['Point'];const _0x396f93=_0x64bf00['FaceAway'];for(const _0x32bf97 of _0x13bbd3){if(_0x5c2f06(0x8bc)===_0x5c2f06(0x7d8)){const _0x176e5b=_0xf86477[this[_0x5c2f06(0x2f3)]['attackSkillId']()];if(!_0x176e5b)return;if(!this[_0x5c2f06(0xbf1)](_0x176e5b))return;const _0x4dbef7=this[_0x5c2f06(0x56c)](),_0x411920=_0x525156['battleCommandName'](_0x176e5b),_0x194acb=_0x14770b[_0x5c2f06(0x78b)](_0x176e5b),_0x5e83d8=_0x4dbef7===_0x5c2f06(0xdd1)?_0x411920:'\x5cI[%1]%2'['format'](_0x194acb,_0x411920);this[_0x5c2f06(0x59f)](_0x5e83d8,_0x5c2f06(0x371),this[_0x5c2f06(0x2f3)][_0x5c2f06(0x534)]());}else{if(!_0x32bf97)continue;let _0x2a4da6=_0x32bf97['battler']()[_0x5c2f06(0xc43)],_0x210e21=_0x32bf97[_0x5c2f06(0x887)]()[_0x5c2f06(0xb10)];if(_0x3851a4[_0x5c2f06(0x298)](/home/i)){if('dOJZX'!==_0x5c2f06(0xd8f))_0x2a4da6=_0x32bf97['battler']()[_0x5c2f06(0x6f7)],_0x210e21=_0x32bf97[_0x5c2f06(0x887)]()[_0x5c2f06(0x96f)];else{_0x431ed9=_0x44f157||0x1,_0x5b9a49--;const _0x42fa98=this[_0x5c2f06(0x765)]();return _0x42fa98[_0x48e190]?_0x42fa98[_0x3ad6d0][_0x5c2f06(0xbb4)]:0x0;}}else{if(_0x3851a4[_0x5c2f06(0x298)](/center/i))_0x5c2f06(0x449)===_0x5c2f06(0x49b)?this['endAction']():(_0x2a4da6=Graphics[_0x5c2f06(0xb36)]/0x2,_0x210e21=Graphics['boxHeight']/0x2);else _0x3851a4[_0x5c2f06(0x298)](/point (\d+), (\d+)/i)&&(_0x2a4da6=Number(RegExp['$1']),_0x210e21=Number(RegExp['$2']));}_0x32bf97[_0x5c2f06(0x83a)](Math[_0x5c2f06(0x68d)](_0x2a4da6),Math[_0x5c2f06(0x68d)](_0x210e21),!!_0x396f93);}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xc6d),_0x123fc4=>{const _0xb5974d=_0x54b1a4;if(!SceneManager[_0xb5974d(0xbbd)]())return;if(!$gameSystem[_0xb5974d(0xc91)]())return;VisuMZ[_0xb5974d(0x97a)](_0x123fc4,_0x123fc4);const _0x32bd72=VisuMZ[_0xb5974d(0xca4)](_0x123fc4[_0xb5974d(0xce2)]),_0x16a1f9=VisuMZ[_0xb5974d(0xca4)](_0x123fc4[_0xb5974d(0x85f)]),_0x4a8454=_0x16a1f9[_0xb5974d(0x8bb)](_0x287656=>_0x287656&&_0x287656[_0xb5974d(0x887)]()?_0x287656[_0xb5974d(0x887)]()[_0xb5974d(0xc43)]:0x0)/(_0x16a1f9[_0xb5974d(0x69d)]||0x1),_0x4a985=_0x16a1f9[_0xb5974d(0x8bb)](_0x2d4d8b=>_0x2d4d8b&&_0x2d4d8b['battler']()?_0x2d4d8b[_0xb5974d(0x887)]()[_0xb5974d(0xb10)]:0x0)/(_0x16a1f9[_0xb5974d(0x69d)]||0x1),_0x276582=_0x123fc4['FaceAway'];for(const _0x1f9dd8 of _0x32bd72){if(!_0x1f9dd8)continue;_0x1f9dd8['setBattlerFacePoint'](Math['round'](_0x4a8454),Math[_0xb5974d(0x68d)](_0x4a985),!!_0x276582);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xa13),_0x2dc7a3=>{const _0x3c36c3=_0x54b1a4;if(!SceneManager[_0x3c36c3(0xbbd)]())return;VisuMZ[_0x3c36c3(0x97a)](_0x2dc7a3,_0x2dc7a3);const _0x5c4a28=$gameTemp[_0x3c36c3(0x859)](),_0x29aea4=VisuMZ[_0x3c36c3(0xca4)](_0x2dc7a3['Targets']),_0x2012e4=_0x2dc7a3['Height'],_0x19968d=_0x2dc7a3['Duration'],_0x7ae17a=_0x2dc7a3['EasingType'],_0x40b3be=_0x2dc7a3[_0x3c36c3(0x9ce)];if(!_0x5c4a28)return;for(const _0x41673f of _0x29aea4){if('FEDVE'===_0x3c36c3(0xd11))_0x1f5ce6[_0x3c36c3(0x387)]['Spriteset_Battle_updateActors'][_0x3c36c3(0xd6c)](this),this[_0x3c36c3(0xb1a)]();else{if(!_0x41673f)continue;_0x41673f['floatBattler'](_0x2012e4,_0x19968d,_0x7ae17a);}}if(_0x40b3be)_0x5c4a28['setWaitMode']('battleFloat');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Movement_HomeReset',_0x51525f=>{const _0x203474=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x203474(0x97a)](_0x51525f,_0x51525f);const _0x4dbed8=$gameTemp[_0x203474(0x859)]();if(!_0x4dbed8)return;const _0x51e685=VisuMZ[_0x203474(0xca4)](_0x51525f['Targets']);for(const _0x52fe11 of _0x51e685){if(_0x203474(0x759)===_0x203474(0x759)){if(!_0x52fe11)continue;_0x52fe11[_0x203474(0x2c6)]();}else return this[_0x203474(0x50c)]();}BattleManager[_0x203474(0x644)]&&BattleManager[_0x203474(0x644)][_0x203474(0xd17)]();if(_0x51525f[_0x203474(0x343)])_0x4dbed8[_0x203474(0xc6a)]('battleMove');}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x649),_0x4d2371=>{const _0x27a362=_0x54b1a4;if(!SceneManager[_0x27a362(0xbbd)]())return;VisuMZ['ConvertParams'](_0x4d2371,_0x4d2371);const _0x3222b6=$gameTemp['getLastPluginCommandInterpreter'](),_0x305d12=VisuMZ[_0x27a362(0xca4)](_0x4d2371[_0x27a362(0x2f2)]),_0xac7f94=_0x4d2371[_0x27a362(0x5a0)],_0x2c53f5=_0x4d2371['Duration'],_0x4b3eac=_0x4d2371['WaitForJump'];if(!_0x3222b6)return;for(const _0xa4a77f of _0x305d12){if(_0x27a362(0xc40)!=='MbPLB'){if(!_0xa4a77f)continue;_0xa4a77f['jumpBattler'](_0xac7f94,_0x2c53f5);}else{if(this['_targetBattlerKey']==='all\x20actors')return![];if(this[_0x27a362(0x687)]===_0x27a362(0x708))return![];return this[_0x27a362(0x4d0)]()&&!this[_0x27a362(0x738)]()?this[_0x27a362(0x289)]():_0x195f45['BattleCore']['Game_Action_isForOne'][_0x27a362(0xd6c)](this);}}if(_0x4b3eac)_0x3222b6[_0x27a362(0xc6a)]('battleJump');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x979),_0x8c3dd4=>{const _0xc1c3f6=_0x54b1a4;if(!SceneManager[_0xc1c3f6(0xbbd)]())return;if(!$gameSystem[_0xc1c3f6(0xc91)]())return;VisuMZ[_0xc1c3f6(0x97a)](_0x8c3dd4,_0x8c3dd4);const _0x602d18=$gameTemp['getLastPluginCommandInterpreter'](),_0x104af0=VisuMZ[_0xc1c3f6(0xca4)](_0x8c3dd4[_0xc1c3f6(0x2f2)]),_0x581b52=_0x8c3dd4[_0xc1c3f6(0xa36)],_0x42d5e6=_0x8c3dd4['DistanceX'],_0x1e9f10=_0x8c3dd4['DistanceY'],_0x448a0a=_0x8c3dd4[_0xc1c3f6(0x8db)],_0xe6f812=_0x8c3dd4[_0xc1c3f6(0x22d)],_0x1c041e=_0x8c3dd4['EasingType'],_0x5c0317=_0x8c3dd4['MotionType'],_0x5cf8b9=_0x8c3dd4[_0xc1c3f6(0x343)];if(!_0x602d18)return;for(const _0x5830b3 of _0x104af0){if(!_0x5830b3)continue;let _0x4d4090=_0x42d5e6,_0x2868c7=_0x1e9f10;if(_0x581b52['match'](/horz/i))_0x4d4090*=_0x5830b3[_0xc1c3f6(0xa2c)]()?-0x1:0x1;if(_0x581b52['match'](/vert/i))_0x2868c7*=_0x5830b3[_0xc1c3f6(0xa2c)]()?-0x1:0x1;_0x5830b3['moveBattlerDistance'](_0x4d4090,_0x2868c7,_0x448a0a,_0xe6f812,_0x1c041e),_0x5830b3[_0xc1c3f6(0x676)](_0x5c0317);}if(_0x5cf8b9)_0x602d18[_0xc1c3f6(0xc6a)]('battleMove');}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],'ActSeq_Movement_MoveToPoint',_0x52c92b=>{const _0x2f4461=_0x54b1a4;if(!SceneManager[_0x2f4461(0xbbd)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x2f4461(0x97a)](_0x52c92b,_0x52c92b);const _0x3d59a2=$gameTemp[_0x2f4461(0x859)](),_0xf4dd83=VisuMZ[_0x2f4461(0xca4)](_0x52c92b[_0x2f4461(0x2f2)]),_0x5eeb45=_0x52c92b[_0x2f4461(0xb51)],_0x4de36c=_0x52c92b[_0x2f4461(0xcbc)],_0x55fd4a=_0x52c92b[_0x2f4461(0x8bd)],_0x1024b6=_0x52c92b[_0x2f4461(0x567)],_0x2b715c=_0x52c92b[_0x2f4461(0x8db)],_0x5c6cdf=_0x52c92b[_0x2f4461(0x22d)],_0x589cff=_0x52c92b[_0x2f4461(0x4e4)],_0x540a2d=_0x52c92b['MotionType'],_0x269a29=_0x52c92b[_0x2f4461(0x343)];if(!_0x3d59a2)return;for(const _0x337e6c of _0xf4dd83){if(!_0x337e6c)continue;let _0x88bd3f=_0x337e6c['battler']()['_baseX'],_0x2fa2a1=_0x337e6c['battler']()[_0x2f4461(0xb10)];if(_0x5eeb45[_0x2f4461(0x298)](/home/i))_0x88bd3f=_0x337e6c['battler']()[_0x2f4461(0x6f7)],_0x2fa2a1=_0x337e6c[_0x2f4461(0x887)]()[_0x2f4461(0x96f)];else{if(_0x5eeb45['match'](/center/i))_0x88bd3f=Graphics[_0x2f4461(0xb36)]/0x2,_0x2fa2a1=Graphics[_0x2f4461(0x67b)]/0x2;else _0x5eeb45[_0x2f4461(0x298)](/point (\d+), (\d+)/i)&&(_0x88bd3f=Number(RegExp['$1']),_0x2fa2a1=Number(RegExp['$2']));}if(_0x4de36c[_0x2f4461(0x298)](/none/i))_0x88bd3f+=_0x55fd4a,_0x2fa2a1+=_0x1024b6;else{if(_0x4de36c[_0x2f4461(0x298)](/horz/i)&&_0x4de36c[_0x2f4461(0x298)](/vert/i)){if(_0x2f4461(0x75f)!==_0x2f4461(0xd7d))_0x88bd3f+=_0x337e6c['isActor']()?-_0x55fd4a:_0x55fd4a,_0x2fa2a1+=_0x337e6c[_0x2f4461(0xa2c)]()?-_0x1024b6:_0x1024b6;else return this[_0x2f4461(0xd93)](_0x325e1c)-this[_0x2f4461(0x93e)]();}else{if(_0x4de36c['match'](/horz/i))_0x88bd3f+=_0x337e6c[_0x2f4461(0xa2c)]()?-_0x55fd4a:_0x55fd4a,_0x2fa2a1+=_0x1024b6;else _0x4de36c[_0x2f4461(0x298)](/vert/i)&&(_0x88bd3f+=_0x55fd4a,_0x2fa2a1+=_0x337e6c['isActor']()?-_0x1024b6:_0x1024b6);}}_0x337e6c[_0x2f4461(0x9b8)](_0x88bd3f,_0x2fa2a1,_0x2b715c,_0x5c6cdf,_0x589cff,-0x1),_0x337e6c[_0x2f4461(0x676)](_0x540a2d);}if(_0x269a29)_0x3d59a2[_0x2f4461(0xc6a)](_0x2f4461(0x3aa));}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x224),_0x23fac4=>{const _0x5d7c79=_0x54b1a4;if(!SceneManager[_0x5d7c79(0xbbd)]())return;if(!$gameSystem[_0x5d7c79(0xc91)]())return;VisuMZ[_0x5d7c79(0x97a)](_0x23fac4,_0x23fac4);const _0xba5349=$gameTemp[_0x5d7c79(0x859)](),_0x293069=VisuMZ[_0x5d7c79(0xca4)](_0x23fac4[_0x5d7c79(0xce2)]),_0x572b09=VisuMZ[_0x5d7c79(0xca4)](_0x23fac4['Targets2']),_0x700648=_0x23fac4[_0x5d7c79(0xa3f)];let _0x443803=_0x23fac4[_0x5d7c79(0xda8)];const _0x202b80=_0x23fac4[_0x5d7c79(0xcbc)],_0x277da8=_0x23fac4[_0x5d7c79(0x8bd)],_0x1f3499=_0x23fac4[_0x5d7c79(0x567)],_0x4957d8=_0x23fac4[_0x5d7c79(0x8db)],_0x3a7f38=_0x23fac4[_0x5d7c79(0x22d)],_0x4da52f=_0x23fac4[_0x5d7c79(0x4e4)],_0x47a5f0=_0x23fac4[_0x5d7c79(0x6e9)],_0x311c9a=_0x23fac4[_0x5d7c79(0x343)],_0x2a132c=Math[_0x5d7c79(0x41c)](..._0x572b09[_0x5d7c79(0x8bb)](_0x36690c=>_0x36690c[_0x5d7c79(0x887)]()[_0x5d7c79(0xc43)]-_0x36690c[_0x5d7c79(0x887)]()[_0x5d7c79(0xc30)]()/0x2)),_0x4aafea=Math[_0x5d7c79(0x9db)](..._0x572b09[_0x5d7c79(0x8bb)](_0x4ccce1=>_0x4ccce1[_0x5d7c79(0x887)]()['_baseX']+_0x4ccce1[_0x5d7c79(0x887)]()[_0x5d7c79(0xc30)]()/0x2)),_0x55ea34=Math[_0x5d7c79(0x41c)](..._0x572b09[_0x5d7c79(0x8bb)](_0x9af6a0=>_0x9af6a0[_0x5d7c79(0x887)]()[_0x5d7c79(0xb10)]-_0x9af6a0[_0x5d7c79(0x887)]()[_0x5d7c79(0xa2e)]())),_0x2e9c47=Math[_0x5d7c79(0x9db)](..._0x572b09[_0x5d7c79(0x8bb)](_0x59bda3=>_0x59bda3[_0x5d7c79(0x887)]()[_0x5d7c79(0xb10)])),_0x1b1339=_0x572b09[_0x5d7c79(0x661)](_0x4b222e=>_0x4b222e[_0x5d7c79(0xa2c)]())[_0x5d7c79(0x69d)],_0x369920=_0x572b09[_0x5d7c79(0x661)](_0x30cf3b=>_0x30cf3b['isEnemy']())[_0x5d7c79(0x69d)];let _0x57274c=0x0,_0xe4e979=0x0;if(_0x700648[_0x5d7c79(0x298)](/front/i))_0x5d7c79(0xa6c)!==_0x5d7c79(0xa6c)?(this[_0x5d7c79(0xbb1)]=new _0x45274f(_0x4ee0e8),this[_0x5d7c79(0x3fa)]()):_0x57274c=_0x1b1339>=_0x369920?_0x2a132c:_0x4aafea;else{if(_0x700648[_0x5d7c79(0x298)](/middle/i))'ytaFZ'!==_0x5d7c79(0xab3)?this[_0x5d7c79(0xc42)]():(_0x57274c=(_0x2a132c+_0x4aafea)/0x2,_0x443803=-0x1);else _0x700648[_0x5d7c79(0x298)](/back/i)&&(_0x57274c=_0x1b1339>=_0x369920?_0x4aafea:_0x2a132c);}if(_0x700648['match'](/head/i))_0xe4e979=_0x55ea34;else{if(_0x700648[_0x5d7c79(0x298)](/center/i))_0xe4e979=(_0x55ea34+_0x2e9c47)/0x2;else _0x700648[_0x5d7c79(0x298)](/base/i)&&('DYyRU'==='KttaM'?(_0x113b22[_0x5d7c79(0x387)][_0x5d7c79(0x4c3)][_0x5d7c79(0xd6c)](this),this[_0x5d7c79(0xa07)]()&&this[_0x5d7c79(0xdb5)]()&&!this['_surprise']&&_0x3da178[_0x5d7c79(0xbd9)]()&&this[_0x5d7c79(0xb67)]()):_0xe4e979=_0x2e9c47);}if(!_0xba5349)return;for(const _0xfc90c7 of _0x293069){if(!_0xfc90c7)continue;let _0x4a7449=_0x57274c,_0xc0f5f5=_0xe4e979;if(_0x202b80[_0x5d7c79(0x298)](/none/i))_0x4a7449+=_0x277da8,_0xc0f5f5+=_0x1f3499;else{if(_0x202b80[_0x5d7c79(0x298)](/horz/i)&&_0x202b80[_0x5d7c79(0x298)](/vert/i))_0x4a7449+=_0xfc90c7[_0x5d7c79(0xa2c)]()?-_0x277da8:_0x277da8,_0xc0f5f5+=_0xfc90c7[_0x5d7c79(0xa2c)]()?-_0x1f3499:_0x1f3499;else{if(_0x202b80[_0x5d7c79(0x298)](/horz/i))_0x5d7c79(0x9bd)===_0x5d7c79(0x5c2)?_0x1b4852=_0x43d95b:(_0x4a7449+=_0xfc90c7[_0x5d7c79(0xa2c)]()?-_0x277da8:_0x277da8,_0xc0f5f5+=_0x1f3499);else _0x202b80['match'](/vert/i)&&(_0x4a7449+=_0x277da8,_0xc0f5f5+=_0xfc90c7[_0x5d7c79(0xa2c)]()?-_0x1f3499:_0x1f3499);}}_0xfc90c7['moveBattlerToPoint'](_0x4a7449,_0xc0f5f5,_0x4957d8,_0x3a7f38,_0x4da52f,_0x443803),_0xfc90c7[_0x5d7c79(0x676)](_0x47a5f0);}if(_0x311c9a)_0xba5349['setWaitMode'](_0x5d7c79(0x3aa));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x9cc),_0x3efd1c=>{const _0x5b9ee3=_0x54b1a4;if(!SceneManager[_0x5b9ee3(0xbbd)]())return;VisuMZ[_0x5b9ee3(0x97a)](_0x3efd1c,_0x3efd1c);const _0x4c095c=$gameTemp[_0x5b9ee3(0x859)](),_0x1815d1=VisuMZ[_0x5b9ee3(0xca4)](_0x3efd1c[_0x5b9ee3(0x2f2)]),_0x3e469a=_0x3efd1c[_0x5b9ee3(0x352)],_0x320e88=_0x3efd1c[_0x5b9ee3(0x8db)],_0x4b004e=_0x3efd1c[_0x5b9ee3(0x4e4)],_0x3061ce=_0x3efd1c[_0x5b9ee3(0x3fe)];if(!_0x4c095c)return;for(const _0x4d5c67 of _0x1815d1){if('eOrMM'==='Kbusu'){const _0x289b48=_0x297d93['randomInt'](0x2)===0x0?this['opponentsUnit']():this[_0x5b9ee3(0x581)]();_0x4c3bc3[_0x5b9ee3(0x519)](_0x289b48[_0x5b9ee3(0xab2)]());}else{if(!_0x4d5c67)continue;_0x4d5c67[_0x5b9ee3(0x9d3)](_0x3e469a,_0x320e88,_0x4b004e);}}if(_0x3061ce)_0x4c095c['setWaitMode'](_0x5b9ee3(0x37f));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x962),_0x53982d=>{const _0x4c03c9=_0x54b1a4;if(!SceneManager[_0x4c03c9(0xbbd)]())return;VisuMZ[_0x4c03c9(0x97a)](_0x53982d,_0x53982d);const _0x5e2edf=$gameTemp[_0x4c03c9(0x859)](),_0x5ae0ac=VisuMZ[_0x4c03c9(0xca4)](_0x53982d[_0x4c03c9(0x2f2)]),_0x543c41=_0x53982d[_0x4c03c9(0xa53)],_0x3b6ddc=_0x53982d[_0x4c03c9(0x1ff)],_0x13d7e8=_0x53982d[_0x4c03c9(0x8db)],_0x20eae6=_0x53982d[_0x4c03c9(0x4e4)],_0x1503ef=_0x53982d[_0x4c03c9(0x376)];if(!_0x5e2edf)return;for(const _0x5d08c9 of _0x5ae0ac){if(!_0x5d08c9)continue;_0x5d08c9[_0x4c03c9(0x7f4)](_0x543c41,_0x3b6ddc,_0x13d7e8,_0x20eae6);}if(_0x1503ef)_0x5e2edf[_0x4c03c9(0xc6a)](_0x4c03c9(0x5ab));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x9f3),_0x20f58d=>{const _0x400379=_0x54b1a4;if(!SceneManager[_0x400379(0xbbd)]())return;VisuMZ['ConvertParams'](_0x20f58d,_0x20f58d);const _0x5305b8=$gameTemp[_0x400379(0x859)](),_0x16de2d=VisuMZ['CreateActionSequenceTargets'](_0x20f58d[_0x400379(0x2f2)]),_0x86de47=_0x20f58d[_0x400379(0x580)],_0x5c3115=_0x20f58d['SkewY'],_0x1082f9=_0x20f58d[_0x400379(0x8db)],_0xcd7c46=_0x20f58d[_0x400379(0x4e4)],_0x30b22c=_0x20f58d['WaitForSkew'];if(!_0x5305b8)return;for(const _0x11ae5e of _0x16de2d){if(!_0x11ae5e)continue;_0x11ae5e[_0x400379(0xc5b)](_0x86de47,_0x5c3115,_0x1082f9,_0xcd7c46);}if(_0x30b22c)_0x5305b8[_0x400379(0xc6a)](_0x400379(0x71a));}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0xbb3),_0x5da338=>{const _0x5eae71=_0x54b1a4;if(!SceneManager[_0x5eae71(0xbbd)]())return;VisuMZ[_0x5eae71(0x97a)](_0x5da338,_0x5da338);const _0x46d4d8=$gameTemp['getLastPluginCommandInterpreter'](),_0x52e744=VisuMZ[_0x5eae71(0xca4)](_0x5da338[_0x5eae71(0x2f2)]),_0x282435=_0x5da338[_0x5eae71(0x86b)],_0x1dd035=_0x5da338['Duration'],_0x195484=_0x5da338[_0x5eae71(0x4e4)],_0x4ffdaf=_0x5da338[_0x5eae71(0xb20)],_0x42637a=_0x5da338['WaitForSpin'];if(!_0x46d4d8)return;for(const _0x598fba of _0x52e744){if(_0x5eae71(0x326)!==_0x5eae71(0xb32)){if(!_0x598fba)continue;_0x598fba[_0x5eae71(0x491)](_0x282435,_0x1dd035,_0x195484,_0x4ffdaf);}else _0x1c9d70[_0x5eae71(0x375)][_0x5eae71(0x2d2)][_0x5eae71(0xd6c)](this);}if(_0x42637a)_0x46d4d8['setWaitMode']('battleSpin');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x865),_0x4a25af=>{const _0x53f7e6=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;const _0x230067=$gameTemp[_0x53f7e6(0x859)]();if(!_0x230067)return;_0x230067['setWaitMode'](_0x53f7e6(0x6b0));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xdcd),_0x5743ca=>{const _0x2b2e74=_0x54b1a4;if(!SceneManager[_0x2b2e74(0xbbd)]())return;const _0x5cb510=$gameTemp[_0x2b2e74(0x859)]();if(!_0x5cb510)return;_0x5cb510['setWaitMode'](_0x2b2e74(0x668));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x895),_0xc0c9f1=>{const _0x56a1c2=_0x54b1a4;if(!SceneManager[_0x56a1c2(0xbbd)]())return;const _0x5bc1bf=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5bc1bf)return;_0x5bc1bf[_0x56a1c2(0xc6a)](_0x56a1c2(0x3aa));}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],'ActSeq_Movement_WaitForOpacity',_0x4f4ef2=>{const _0x4a24d7=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;const _0x29a772=$gameTemp[_0x4a24d7(0x859)]();if(!_0x29a772)return;_0x29a772[_0x4a24d7(0xc6a)]('battleOpacity');}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],'ActSeq_Movement_WaitForScale',_0x40844c=>{const _0x213ea7=_0x54b1a4;if(!SceneManager[_0x213ea7(0xbbd)]())return;const _0x47a296=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x47a296)return;_0x47a296[_0x213ea7(0xc6a)](_0x213ea7(0x5ab));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x860),_0x5f5b95=>{const _0xbfc384=_0x54b1a4;if(!SceneManager[_0xbfc384(0xbbd)]())return;const _0x2383ce=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2383ce)return;_0x2383ce[_0xbfc384(0xc6a)](_0xbfc384(0x71a));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],'ActSeq_Movement_WaitForSpin',_0x22b99f=>{const _0x35c3d3=_0x54b1a4;if(!SceneManager[_0x35c3d3(0xbbd)]())return;const _0x43b0ab=$gameTemp[_0x35c3d3(0x859)]();if(!_0x43b0ab)return;_0x43b0ab['setWaitMode']('battleSpin');}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x309),_0x5f37a0=>{const _0x4710cb=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4710cb(0x6d4)])return;VisuMZ[_0x4710cb(0x97a)](_0x5f37a0,_0x5f37a0);const _0x5ccb16=$gameTemp[_0x4710cb(0x859)](),_0x445199=_0x5f37a0[_0x4710cb(0xa2f)];if(!_0x5ccb16)return;const _0x3bbba4=BattleManager[_0x4710cb(0xaca)];if(!_0x3bbba4)return;_0x3bbba4['createActionSequenceProjectile'](_0x5f37a0);if(_0x445199)_0x5ccb16[_0x4710cb(0xc6a)]('battleProjectiles');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x934),_0x36e959=>{const _0x4ddd2=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4ddd2(0x6d4)])return;VisuMZ[_0x4ddd2(0x97a)](_0x36e959,_0x36e959);const _0x17a2ae=$gameTemp[_0x4ddd2(0x859)](),_0x210b5e=_0x36e959[_0x4ddd2(0xa2f)];if(!_0x17a2ae)return;const _0xbb0f6f=BattleManager['_spriteset'];if(!_0xbb0f6f)return;_0xbb0f6f[_0x4ddd2(0x523)](_0x36e959);if(_0x210b5e)_0x17a2ae[_0x4ddd2(0xc6a)](_0x4ddd2(0x78f));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x4e0),_0x434570=>{const _0x553854=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x553854(0x6d4)])return;VisuMZ['ConvertParams'](_0x434570,_0x434570);const _0x5a713f=$gameTemp['getLastPluginCommandInterpreter'](),_0x2d2b1a=_0x434570[_0x553854(0xa2f)];if(!_0x5a713f)return;const _0x2b596e=BattleManager['_spriteset'];if(!_0x2b596e)return;_0x2b596e[_0x553854(0x523)](_0x434570);if(_0x2d2b1a)_0x5a713f['setWaitMode'](_0x553854(0x78f));}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x23c),_0x591584=>{const _0x4978ee=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4978ee(0x81b)])return;VisuMZ[_0x4978ee(0x97a)](_0x591584,_0x591584);const _0x37c518=$gameTemp[_0x4978ee(0x859)](),_0x209f27=_0x591584[_0x4978ee(0xac5)];if(!_0x37c518)return;$gameScreen[_0x4978ee(0x5f9)](_0x591584[_0x4978ee(0x580)],_0x591584[_0x4978ee(0x9cb)],_0x591584[_0x4978ee(0x8db)],_0x591584[_0x4978ee(0x4e4)]);if(_0x209f27)_0x37c518['setWaitMode']('battleSkew');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xcd9),_0x48fb3f=>{const _0x47fc20=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x47fc20(0x81b)])return;VisuMZ[_0x47fc20(0x97a)](_0x48fb3f,_0x48fb3f);const _0x1e7d45=$gameTemp[_0x47fc20(0x859)](),_0x6d3799=_0x48fb3f[_0x47fc20(0xac5)];if(!_0x1e7d45)return;$gameScreen[_0x47fc20(0x5f9)](0x0,0x0,_0x48fb3f['Duration'],_0x48fb3f['EasingType']);if(_0x6d3799)_0x1e7d45[_0x47fc20(0xc6a)]('battleSkew');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Skew_WaitForSkew',_0x35b16b=>{const _0x189844=_0x54b1a4;if(!SceneManager[_0x189844(0xbbd)]())return;if(!Imported[_0x189844(0x81b)])return;const _0x4f70e8=$gameTemp[_0x189844(0x859)]();if(!_0x4f70e8)return;_0x4f70e8['setWaitMode'](_0x189844(0xbb5));}),PluginManager[_0x54b1a4(0x8d7)](pluginData['name'],_0x54b1a4(0x9a7),_0x296080=>{const _0x400816=_0x54b1a4;if(!SceneManager[_0x400816(0xbbd)]())return;VisuMZ['ConvertParams'](_0x296080,_0x296080);const _0x4a3ec4=$gameTemp[_0x400816(0x859)](),_0x25b72f=_0x296080[_0x400816(0xae6)],_0x5aa928=_0x296080[_0x400816(0x589)];if(!_0x4a3ec4)return;BattleManager['_targetIndex']=_0x25b72f,BattleManager[_0x400816(0xaf2)]=BattleManager[_0x400816(0x966)]?BattleManager[_0x400816(0x966)][BattleManager[_0x400816(0x466)]]||null:null,BattleManager[_0x400816(0xaf2)]&&_0x5aa928[_0x400816(0x8fd)]()[_0x400816(0x2f4)]()!==_0x400816(0x6bf)&&_0x4a3ec4[_0x400816(0x7bc)]([_0x5aa928]);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Target_NextTarget',_0x485f97=>{const _0x2f4807=_0x54b1a4;if(!SceneManager[_0x2f4807(0xbbd)]())return;VisuMZ[_0x2f4807(0x97a)](_0x485f97,_0x485f97);const _0x33939b=$gameTemp[_0x2f4807(0x859)](),_0x1e2ed8=_0x485f97[_0x2f4807(0x589)];if(!_0x33939b)return;BattleManager[_0x2f4807(0x466)]++,BattleManager['_target']=BattleManager['_allTargets'][BattleManager[_0x2f4807(0x466)]]||null,BattleManager[_0x2f4807(0xaf2)]&&_0x1e2ed8[_0x2f4807(0x8fd)]()[_0x2f4807(0x2f4)]()!==_0x2f4807(0x6bf)&&(_0x2f4807(0x826)===_0x2f4807(0x826)?_0x33939b[_0x2f4807(0x7bc)]([_0x1e2ed8]):this[_0x2f4807(0x519)](_0x2f4807(0xbb7),_0x3a9526));}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x93f),_0x4f7ab4=>{const _0x292be1=_0x54b1a4;if(!SceneManager[_0x292be1(0xbbd)]())return;VisuMZ[_0x292be1(0x97a)](_0x4f7ab4,_0x4f7ab4);const _0x3b3eeb=$gameTemp[_0x292be1(0x859)](),_0x30932c=_0x4f7ab4['JumpToLabel'];if(!_0x3b3eeb)return;BattleManager[_0x292be1(0x466)]--,BattleManager[_0x292be1(0xaf2)]=BattleManager[_0x292be1(0x966)][BattleManager[_0x292be1(0x466)]]||null,BattleManager[_0x292be1(0xaf2)]&&_0x30932c['toUpperCase']()['trim']()!=='UNTITLED'&&_0x3b3eeb[_0x292be1(0x7bc)]([_0x30932c]);}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x612),_0x52be36=>{const _0x54db63=_0x54b1a4;if(!SceneManager[_0x54db63(0xbbd)]())return;VisuMZ['ConvertParams'](_0x52be36,_0x52be36);const _0x3a05c8=$gameTemp['getLastPluginCommandInterpreter'](),_0x100d4b=_0x52be36['ForceRandom'],_0x579f4f=_0x52be36[_0x54db63(0x589)];if(!_0x3a05c8)return;const _0x10ef96=BattleManager[_0x54db63(0x466)];for(;;){BattleManager['_targetIndex']=Math['randomInt'](BattleManager['_allTargets']['length']);if(!_0x100d4b)break;if(BattleManager[_0x54db63(0x466)]!==_0x10ef96)break;if(BattleManager[_0x54db63(0x966)][_0x54db63(0x69d)]<=0x1){if(_0x54db63(0xba1)===_0x54db63(0xba1)){BattleManager[_0x54db63(0x466)]=0x0;break;}else return _0x1671e9['BattleCore'][_0x54db63(0x916)][_0x54db63(0xc85)][_0x54db63(0xd58)];}}BattleManager[_0x54db63(0xaf2)]=BattleManager['_allTargets'][BattleManager[_0x54db63(0x466)]]||null,BattleManager[_0x54db63(0xaf2)]&&_0x579f4f[_0x54db63(0x8fd)]()['trim']()!==_0x54db63(0x6bf)&&(_0x54db63(0x6f1)!==_0x54db63(0x6f1)?this['_cursorSprite']['addChild'](new _0x332fe4()):_0x3a05c8[_0x54db63(0x7bc)]([_0x579f4f]));}),PluginManager['registerCommand'](pluginData['name'],_0x54b1a4(0x2fa),_0x14b3c4=>{const _0x1df033=_0x54b1a4;if(!SceneManager[_0x1df033(0xbbd)]())return;VisuMZ[_0x1df033(0x97a)](_0x14b3c4,_0x14b3c4);const _0x3019b7=VisuMZ[_0x1df033(0xca4)](_0x14b3c4[_0x1df033(0x2f2)]);for(const _0x24e57a of _0x3019b7){if(!_0x24e57a)continue;if(!_0x24e57a[_0x1df033(0xa2c)]())continue;_0x24e57a[_0x1df033(0xd5b)]();}}),PluginManager['registerCommand'](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x965),_0xc270aa=>{const _0x52957f=_0x54b1a4;if(!SceneManager[_0x52957f(0xbbd)]())return;VisuMZ[_0x52957f(0x97a)](_0xc270aa,_0xc270aa);const _0xf6ea4=$gameTemp[_0x52957f(0x859)]();let _0x3e54df=![];const _0x27983b=_0xc270aa['JumpToLabel'],_0x20364b=VisuMZ[_0x52957f(0xca4)](_0xc270aa[_0x52957f(0x2f2)]);for(const _0x2b4564 of _0x20364b){if('pAnxE'===_0x52957f(0x30b))_0x2071b4[_0x52957f(0x50b)](_0x53a053),this[_0x52957f(0x868)](_0x542345);else{if(!_0x2b4564)continue;if(!_0x2b4564[_0x52957f(0xa2c)]())continue;_0x2b4564[_0x52957f(0xd83)](),_0x2b4564[_0x52957f(0x765)]()['length']>0x0?_0x3e54df=!![]:_0x2b4564['clearActiveWeaponSlot']();}}if(_0x3e54df&&_0x27983b[_0x52957f(0x8fd)]()['trim']()!==_0x52957f(0x6bf)){if(_0x52957f(0x8bf)===_0x52957f(0xacb)){if(_0xc773cf[_0x52957f(0xa25)]()[_0x52957f(0xbc4)]>0x0)return!![];this[_0x52957f(0xac8)]='';}else _0xf6ea4['command119']([_0x27983b]);}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x93a),_0x2902d4=>{const _0x4159a4=_0x54b1a4;if(!SceneManager[_0x4159a4(0xbbd)]())return;VisuMZ[_0x4159a4(0x97a)](_0x2902d4,_0x2902d4);let _0x58a6a0=_0x2902d4['SlotID'];_0x58a6a0--,_0x58a6a0=Math[_0x4159a4(0x9db)](_0x58a6a0,0x0);const _0xb99f9e=VisuMZ['CreateActionSequenceTargets'](_0x2902d4['Targets']);for(const _0x474542 of _0xb99f9e){if('xFLHw'!==_0x4159a4(0x6de)){if(this[_0x4159a4(0xb3b)]())this['_svBattlerSprite']['forceWeaponAnimation'](_0x64ee58);}else{if(!_0x474542)continue;if(!_0x474542[_0x4159a4(0xa2c)]())continue;_0x474542[_0x4159a4(0x635)](_0x58a6a0);}}}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0xb4a),_0xda9ddf=>{const _0x21b237=_0x54b1a4;if(!SceneManager[_0x21b237(0xbbd)]())return;if(!Imported[_0x21b237(0x81b)])return;VisuMZ[_0x21b237(0x97a)](_0xda9ddf,_0xda9ddf);const _0x303709=$gameTemp[_0x21b237(0x859)](),_0x3149fe=_0xda9ddf[_0x21b237(0x4b2)];if(!_0x303709)return;$gameScreen[_0x21b237(0x2c4)](_0xda9ddf[_0x21b237(0x385)],_0xda9ddf[_0x21b237(0x8db)],_0xda9ddf[_0x21b237(0x4e4)]);if(_0x3149fe)_0x303709[_0x21b237(0xc6a)](_0x21b237(0x9d0));}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],_0x54b1a4(0x202),_0x390996=>{const _0x412eab=_0x54b1a4;if(!SceneManager[_0x412eab(0xbbd)]())return;if(!Imported[_0x412eab(0x81b)])return;VisuMZ['ConvertParams'](_0x390996,_0x390996);const _0x1746f0=$gameTemp['getLastPluginCommandInterpreter'](),_0x169bca=_0x390996[_0x412eab(0x4b2)];if(!_0x1746f0)return;$gameScreen['setBattleZoom'](0x1,_0x390996[_0x412eab(0x8db)],_0x390996[_0x412eab(0x4e4)]);if(_0x169bca)_0x1746f0[_0x412eab(0xc6a)]('battleZoom');}),PluginManager[_0x54b1a4(0x8d7)](pluginData[_0x54b1a4(0x56b)],'ActSeq_Zoom_WaitForZoom',_0x51d129=>{const _0x2c3094=_0x54b1a4;if(!SceneManager[_0x2c3094(0xbbd)]())return;if(!Imported[_0x2c3094(0x81b)])return;const _0x456da5=$gameTemp[_0x2c3094(0x859)]();if(!_0x456da5)return;_0x456da5[_0x2c3094(0xc6a)](_0x2c3094(0x9d0));}),VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xbac)]=Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0x226)],Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0x226)]=function(){const _0x85985b=_0x54b1a4;this['process_VisuMZ_BattleCore_Failsafes'](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x85985b(0x346)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x85985b(0x387)]['Scene_Boot_onDatabaseLoaded'][_0x85985b(0xd6c)](this),this[_0x85985b(0xbff)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x85985b(0x783)](),this[_0x85985b(0xc4d)]();},Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0xbff)]=function(){const _0x15bcd0=_0x54b1a4;if(VisuMZ[_0x15bcd0(0x39b)])return;this[_0x15bcd0(0xd9a)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x15bcd0(0x2ef)]();},Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0xb65)]=function(){const _0x27d951=_0x54b1a4,_0x289876=$dataSystem[_0x27d951(0x623)]['length'];for(let _0x5eba65=0x0;_0x5eba65<_0x289876;_0x5eba65++){const _0x192dfe=$dataSystem['attackMotions'][_0x5eba65];if(_0x192dfe)continue;$dataSystem[_0x27d951(0x4ab)][_0x5eba65]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0x7d9)]=function(){const _0x3bd840=_0x54b1a4,_0x5aca92=VisuMZ[_0x3bd840(0x387)]['Settings'];_0x5aca92[_0x3bd840(0x5f5)][_0x3bd840(0xb08)]===undefined&&(_0x5aca92[_0x3bd840(0x5f5)][_0x3bd840(0xb08)]='base');_0x5aca92['Actor'][_0x3bd840(0x393)]===undefined&&(_0x5aca92['Actor'][_0x3bd840(0x393)]=![]);_0x5aca92['Enemy'][_0x3bd840(0x393)]===undefined&&(_0x5aca92[_0x3bd840(0x809)][_0x3bd840(0x393)]=!![]);_0x5aca92[_0x3bd840(0x2c1)][_0x3bd840(0xa4b)]===undefined&&(_0x5aca92['Actor'][_0x3bd840(0xa4b)]=![]);if(_0x5aca92[_0x3bd840(0x2c1)][_0x3bd840(0x54f)]===undefined){if('IdPhS'!==_0x3bd840(0x474)){if(_0x4a2a58[_0x3bd840(0xc17)]['version']>=1.24){if(this[_0x3bd840(0x2f3)]){if(!_0xdf805f[_0x3bd840(0xc17)][_0x3bd840(0x51d)](this[_0x3bd840(0x2f3)],_0x202180))return!![];if(!_0x2e57ee[_0x3bd840(0xc17)]['CheckVisibleSwitchNotetags'](this[_0x3bd840(0x2f3)],_0x31aab5))return!![];if(!_0x4c4ffc[_0x3bd840(0xc17)][_0x3bd840(0xca7)](this[_0x3bd840(0x2f3)],_0x37b7b3))return!![];}}else{if(!_0x449b4c[_0x3bd840(0x375)]['checkShowHideBattleNotetags'][_0x3bd840(0xd6c)](this,_0x49157a))return!![];if(!_0x37fdd7[_0x3bd840(0x375)]['checkShowHideSwitchNotetags'][_0x3bd840(0xd6c)](this,_0x505977))return!![];if(!_0x4789fc[_0x3bd840(0x375)][_0x3bd840(0x3d0)][_0x3bd840(0xd6c)](this,_0x581ca6))return!![];}}else _0x5aca92[_0x3bd840(0x2c1)][_0x3bd840(0x54f)]=!![];}},VisuMZ[_0x54b1a4(0x2eb)]={},Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0x346)]=function(){const _0x3f6802=_0x54b1a4;for(const _0x47aa33 of VisuMZ[_0x3f6802(0x387)][_0x3f6802(0x916)][_0x3f6802(0x5f5)]['DamageStyleList']){if(!_0x47aa33)continue;const _0x383554=_0x47aa33[_0x3f6802(0x8cf)][_0x3f6802(0x8fd)]()[_0x3f6802(0x2f4)]();VisuMZ[_0x3f6802(0x2eb)][_0x383554]=_0x47aa33;}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x794)]={},Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0x943)]=function(){const _0x7c8b16=_0x54b1a4,_0x425764=VisuMZ[_0x7c8b16(0x387)]['RegExp'],_0x3c8c82=_0x7c8b16(0x886),_0x3fa147=[[_0x7c8b16(0xbef),_0x7c8b16(0x954)],[_0x7c8b16(0x25f),_0x7c8b16(0xc57)]],_0x309add=[['%1Apply%2JS',_0x7c8b16(0xa40)],[_0x7c8b16(0x6d6),_0x7c8b16(0xc18)]],_0x4d54a0=[['',''],[_0x7c8b16(0x77c),_0x7c8b16(0xc0b)],[_0x7c8b16(0x999),_0x7c8b16(0xcbf)]];for(const _0x384ff9 of _0x309add){if('mRaoZ'===_0x7c8b16(0x3fb))for(const _0x4e84c2 of _0x4d54a0){if('DEKDM'===_0x7c8b16(0xbe5))for(const _0x55cc8e of _0x3fa147){if('GtuEI'!==_0x7c8b16(0x848))_0x415ca8['BattleCore'][_0x7c8b16(0xbe8)][_0x7c8b16(0xd6c)](this),this['y']=_0x45bbcd[_0x7c8b16(0xdd7)]*0xa,this['meetsSelectFrontviewActorConditions']()&&this[_0x7c8b16(0xcf1)]();else{const _0x4d126c=_0x384ff9[0x0][_0x7c8b16(0xd76)](_0x55cc8e[0x0],_0x4e84c2[0x0]),_0x4c276a=_0x384ff9[0x1][_0x7c8b16(0xd76)](_0x55cc8e[0x1],_0x4e84c2[0x1])[_0x7c8b16(0x2f4)](),_0x5a3b98=new RegExp(_0x3c8c82[_0x7c8b16(0xd76)](_0x4c276a),'i');_0x425764[_0x4d126c]=_0x5a3b98;}}else{_0x1bfa26&&_0x414a8d&&_0x1f8249[_0x7c8b16(0xd77)]&&this[_0x7c8b16(0x905)](_0x461181['note']);const _0x20a5b1=_0x565632[_0x6489e5];if(_0x20a5b1){let _0x467dce=_0x424628['createTroopNote'](_0x20a5b1['id']);this[_0x7c8b16(0x905)](_0x467dce);}}}else{const _0x2228e8=_0x2f39cd['isActor']()?_0x5cc7fd[_0x7c8b16(0x770)]:_0xc4ef41[_0x7c8b16(0x849)];_0x2228e8&&_0x394cab['BattleCore'][_0x7c8b16(0x916)][_0x7c8b16(0x3a2)][_0x7c8b16(0xcdb)]&&(this[_0x7c8b16(0x519)](_0x7c8b16(0x4f3)),this['push'](_0x7c8b16(0xd22)),this[_0x7c8b16(0x519)](_0x7c8b16(0xaed)),this[_0x7c8b16(0x519)](_0x7c8b16(0xcd7),_0x2228e8[_0x7c8b16(0xd76)](_0x5d4130['name']())),this[_0x7c8b16(0x519)]('wait')),_0x6f78f3['id']===_0x173ed7[_0x7c8b16(0x243)]()&&this[_0x7c8b16(0x519)](_0x7c8b16(0xa84),_0x183237);}}const _0x445783=[[_0x7c8b16(0x3ad),_0x7c8b16(0x52d)],['%1EndActionJS','JS\x20%1END\x20ACTION']];for(const _0x1457e0 of _0x445783){if('sbUPf'!==_0x7c8b16(0x6eb))this[_0x7c8b16(0x755)]();else for(const _0x27a4f0 of _0x3fa147){if(_0x7c8b16(0x3d2)===_0x7c8b16(0x279))_0x36f8ed['BattleCore'][_0x7c8b16(0x685)][_0x7c8b16(0xd6c)](this),this['onBattleEndBattleCore']();else{const _0x5dccf7=_0x1457e0[0x0][_0x7c8b16(0xd76)](_0x27a4f0[0x0]),_0x46ef81=_0x1457e0[0x1][_0x7c8b16(0xd76)](_0x27a4f0[0x1]),_0x250332=new RegExp(_0x3c8c82[_0x7c8b16(0xd76)](_0x46ef81),'i');_0x425764[_0x5dccf7]=_0x250332;}}}const _0x3bf513=[[_0x7c8b16(0x853),_0x7c8b16(0x7c4)],[_0x7c8b16(0x500),_0x7c8b16(0x2a7)],[_0x7c8b16(0x805),_0x7c8b16(0x206)],['BattleDefeatJS',_0x7c8b16(0x641)],[_0x7c8b16(0xa9c),_0x7c8b16(0x47f)],[_0x7c8b16(0xd26),_0x7c8b16(0xc11)],[_0x7c8b16(0xa35),_0x7c8b16(0x7e2)],['%1EndTurnJS','JS\x20%1END\x20TURN'],[_0x7c8b16(0x753),_0x7c8b16(0x901)]];for(const _0x8c5304 of _0x3bf513){for(const _0x22d726 of _0x3fa147){const _0x47daf8=_0x8c5304[0x0][_0x7c8b16(0xd76)](_0x22d726[0x0]),_0x4e830d=_0x8c5304[0x1][_0x7c8b16(0xd76)](_0x22d726[0x1]),_0x289672=new RegExp(_0x3c8c82[_0x7c8b16(0xd76)](_0x4e830d),'i');_0x425764[_0x47daf8]=_0x289672;}}},Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0xd9a)]=function(){const _0xf9d969=_0x54b1a4,_0x5c0035=$dataSkills[_0xf9d969(0x645)]($dataItems);for(const _0x3b7c0f of _0x5c0035){if(!_0x3b7c0f)continue;VisuMZ[_0xf9d969(0x387)]['Parse_Notetags_Action'](_0x3b7c0f);}},Scene_Boot[_0x54b1a4(0x375)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x4d5627=_0x54b1a4,_0x46c697=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x3136e6 of _0x46c697){if('nmbZb'===_0x4d5627(0xb26))this['_jumpHeight']=0x0;else{if(!_0x3136e6)continue;VisuMZ['BattleCore'][_0x4d5627(0xc70)](_0x3136e6);}}},Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0x94b)]=function(){const _0x245f7e=_0x54b1a4,_0x5a0ee4=VisuMZ[_0x245f7e(0x387)][_0x245f7e(0x916)][_0x245f7e(0xc86)][_0x245f7e(0x555)],_0x31c72b=[];for(const _0x40a66e of _0x5a0ee4){const _0x481f4c=$dataTroops[_0x40a66e];if(_0x481f4c)_0x31c72b['push'](JsonEx[_0x245f7e(0x9c2)](_0x481f4c));}for(const _0x4cbe77 of $dataTroops){if(!_0x4cbe77)continue;for(const _0x39bcf9 of _0x31c72b){if(_0x245f7e(0x7d4)===_0x245f7e(0x7e8))return this['currentAction']()&&this[_0x245f7e(0xb7a)]()['item']()&&!this[_0x245f7e(0xb7a)]()[_0x245f7e(0x40d)]();else{if(_0x39bcf9['id']===_0x4cbe77['id'])continue;_0x4cbe77[_0x245f7e(0xda2)]=_0x4cbe77[_0x245f7e(0xda2)][_0x245f7e(0x645)](_0x39bcf9[_0x245f7e(0xda2)]);}}}},Scene_Boot[_0x54b1a4(0x375)]['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x1f9e8c=_0x54b1a4,_0x591a2a=VisuMZ['BattleCore'][_0x1f9e8c(0x916)]['Mechanics'];if(_0x591a2a[_0x1f9e8c(0x374)]>0x0&&$dataCommonEvents[_0x591a2a[_0x1f9e8c(0x374)]]){const _0x205566=$dataCommonEvents[_0x591a2a[_0x1f9e8c(0x374)]],_0x5ba012=_0x205566['list']['length']-0x2,_0x44661a=_0x205566[_0x1f9e8c(0xd3a)][_0x5ba012];if(_0x44661a&&_0x44661a[_0x1f9e8c(0xdb8)]!==0xe6){if(_0x1f9e8c(0x620)==='LEPsU'){const _0x8e85e4={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x31a0aa=_0x205566[_0x1f9e8c(0xd3a)][_0x1f9e8c(0x67f)]();_0x205566[_0x1f9e8c(0xd3a)][_0x1f9e8c(0x5a7)](_0x8e85e4),_0x205566['list'][_0x1f9e8c(0x5a7)](_0x31a0aa);}else{let _0x4b0602=_0x26cdd4[_0x1f9e8c(0x387)][_0x1f9e8c(0x803)][_0x1f9e8c(0xd6c)](this);return this[_0x1f9e8c(0xcde)]&&(_0x4b0602*=this[_0x1f9e8c(0xcde)]()),_0x545adf[_0x1f9e8c(0x8c0)](_0x4b0602);}}}},Scene_Boot[_0x54b1a4(0x375)][_0x54b1a4(0xc4d)]=function(){const _0x1d6721=_0x54b1a4;VisuMZ[_0x1d6721(0x387)][_0x1d6721(0x825)](),VisuMZ[_0x1d6721(0x387)][_0x1d6721(0x32a)]($dataSkills),VisuMZ[_0x1d6721(0x387)][_0x1d6721(0x32a)]($dataItems);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x825)]=function(){const _0x3fc569=_0x54b1a4;VisuMZ[_0x3fc569(0x387)][_0x3fc569(0xdae)]={};for(const _0x371e1e of $dataCommonEvents){if(!_0x371e1e)continue;if(_0x371e1e[_0x3fc569(0x56b)][_0x3fc569(0x298)](/\[(.*)\]/i)){let _0xfb2a72=String(RegExp['$1'])['replace'](/,/g,'')[_0x3fc569(0x8fd)]()[_0x3fc569(0x2f4)]();VisuMZ[_0x3fc569(0x387)]['_commonEventKey'][_0xfb2a72]=_0x371e1e['id'];}}},VisuMZ['BattleCore'][_0x54b1a4(0x32a)]=function(_0x41496a){const _0x118af4=_0x54b1a4;for(const _0x4f7028 of _0x41496a){if('tpIjN'!==_0x118af4(0xc3a)){if(this[_0x118af4(0x56d)]())this[_0x118af4(0x8ec)]=_0x118af4(0xb03);else this[_0x118af4(0xa5a)][_0x118af4(0x69d)]>0x0?this[_0x118af4(0x8ec)]='turn':this['startInput']();}else{if(!_0x4f7028)continue;VisuMZ[_0x118af4(0x387)][_0x118af4(0xc5c)](_0x4f7028);}}},VisuMZ[_0x54b1a4(0x387)]['BindCommonEventKeysForObj']=function(_0x48607d){const _0x1aeddd=_0x54b1a4;if(!_0x48607d)return;if(!_0x48607d['effects'])return;VisuMZ[_0x1aeddd(0x387)][_0x1aeddd(0xdae)]=VisuMZ[_0x1aeddd(0x387)][_0x1aeddd(0xdae)]||{};const _0x3a342f=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x84015e=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x27c5e6=[];const _0x1725b8=_0x48607d[_0x1aeddd(0xd77)][_0x1aeddd(0x298)](_0x3a342f);if(_0x1725b8){if(_0x1aeddd(0x784)!=='iYHHu'){for(const _0x4034ba of _0x1725b8){_0x4034ba[_0x1aeddd(0x298)](_0x3a342f);const _0x53fdf7=String(RegExp['$1'])[_0x1aeddd(0x3a1)](',')['map'](_0x5d31f2=>String(_0x5d31f2)[_0x1aeddd(0x8fd)]()[_0x1aeddd(0x2f4)]());_0x27c5e6=_0x27c5e6[_0x1aeddd(0x645)](_0x53fdf7);}!_0x48607d[_0x1aeddd(0xd77)][_0x1aeddd(0x298)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x48607d[_0x1aeddd(0xd77)]+=_0x1aeddd(0x1e6));;}else{const _0x229611=_0x2bb0d1[_0x1aeddd(0x8e7)](),_0x3da400=this[_0x1aeddd(0x532)][_0x1aeddd(0xaa1)]();_0x229611[_0x1aeddd(0x397)](_0x3da400),_0x292c98[_0x1aeddd(0x6fe)]()[_0x1aeddd(0xd23)](_0x1be1df[_0x3da400]),this[_0x1aeddd(0x4fc)]();}}if(_0x48607d[_0x1aeddd(0xd77)]['match'](_0x84015e)){if(_0x1aeddd(0x54b)!==_0x1aeddd(0x342)){const _0xaf6ec9=String(RegExp['$1'])[_0x1aeddd(0x3a1)](/[\r\n]+/)['map'](_0x241df2=>String(_0x241df2)[_0x1aeddd(0x8fd)]()[_0x1aeddd(0x2f4)]());_0x27c5e6=_0x27c5e6[_0x1aeddd(0x645)](_0xaf6ec9);!_0x48607d[_0x1aeddd(0xd77)][_0x1aeddd(0x298)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x48607d['note']+=_0x1aeddd(0x1e6));;}else this['isTpb']()&&this[_0x1aeddd(0x8ec)]===_0x1aeddd(0xa21)&&(this['_currentActor']=null),_0x1f8163['BattleCore'][_0x1aeddd(0xbf8)][_0x1aeddd(0xd6c)](this);}for(const _0x50c6fa of _0x27c5e6){if(VisuMZ['BattleCore']['_commonEventKey'][_0x50c6fa]){const _0x227802=VisuMZ[_0x1aeddd(0x387)][_0x1aeddd(0xdae)][_0x50c6fa],_0x1c23cc={'code':0x2c,'dataId':_0x227802,'value1':0x1,'value2':0x0};_0x48607d[_0x1aeddd(0x9d9)]['push'](_0x1c23cc);}}},Scene_Boot['prototype'][_0x54b1a4(0x2ef)]=function(){const _0x383f56=_0x54b1a4,_0x5b2145=$dataSkills[_0x383f56(0x645)]($dataItems);for(const _0x4447db of _0x5b2145){if('EjNaZ'!=='EjNaZ'){if(_0x409efb['_actorWindow'][_0x383f56(0xaae)]&&_0xc33ef[_0x383f56(0x2d5)]['_handlers'][_0x383f56(0xc1c)])return!![];if(_0x54d5d0[_0x383f56(0x8c2)][_0x383f56(0xaae)]&&_0x47552a[_0x383f56(0x8c2)][_0x383f56(0x489)]['pagedown'])return!![];}else{if(!_0x4447db)continue;VisuMZ[_0x383f56(0x387)][_0x383f56(0xd95)](_0x4447db);}}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x797)]=VisuMZ[_0x54b1a4(0x797)],VisuMZ['ParseActorNotetags']=function(_0x4c9e97){const _0x440067=_0x54b1a4;VisuMZ['BattleCore'][_0x440067(0x797)]&&VisuMZ[_0x440067(0x387)]['ParseActorNotetags'][_0x440067(0xd6c)](this,_0x4c9e97),VisuMZ[_0x440067(0x387)][_0x440067(0xc70)](_0x4c9e97);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x3d4)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x54b1a4(0x3d4)]=function(_0x2ac24f){const _0xe518de=_0x54b1a4;VisuMZ[_0xe518de(0x387)][_0xe518de(0x3d4)]&&VisuMZ[_0xe518de(0x387)][_0xe518de(0x3d4)][_0xe518de(0xd6c)](this,_0x2ac24f),VisuMZ['BattleCore'][_0xe518de(0xc70)](_0x2ac24f);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x398)]=VisuMZ['ParseSkillNotetags'],VisuMZ[_0x54b1a4(0x398)]=function(_0x3126f4){const _0x3c068f=_0x54b1a4;VisuMZ[_0x3c068f(0x387)][_0x3c068f(0x398)]&&(_0x3c068f(0x283)!==_0x3c068f(0x283)?this[_0x3c068f(0x79b)](_0x3c068f(0x5d3)):VisuMZ['BattleCore'][_0x3c068f(0x398)][_0x3c068f(0xd6c)](this,_0x3126f4)),VisuMZ[_0x3c068f(0x387)][_0x3c068f(0x6b6)](_0x3126f4),VisuMZ[_0x3c068f(0x387)]['Parse_Notetags_Targets'](_0x3126f4);},VisuMZ['BattleCore'][_0x54b1a4(0xd5f)]=VisuMZ[_0x54b1a4(0xd5f)],VisuMZ[_0x54b1a4(0xd5f)]=function(_0x2d70f4){const _0x3b2252=_0x54b1a4;VisuMZ[_0x3b2252(0x387)][_0x3b2252(0xd5f)]&&(_0x3b2252(0x65c)==='yObBP'?VisuMZ[_0x3b2252(0x387)][_0x3b2252(0xd5f)]['call'](this,_0x2d70f4):_0x30ef5e['bitmap']=_0x25dfb3[_0x3b2252(0x714)]),VisuMZ[_0x3b2252(0x387)]['Parse_Notetags_Action'](_0x2d70f4),VisuMZ[_0x3b2252(0x387)][_0x3b2252(0xd95)](_0x2d70f4);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x2ec)]=VisuMZ[_0x54b1a4(0x2ec)],VisuMZ[_0x54b1a4(0x2ec)]=function(_0x493dd4){const _0x3adeee=_0x54b1a4;VisuMZ[_0x3adeee(0x387)][_0x3adeee(0x2ec)]&&(_0x3adeee(0xa81)!=='qKoBn'?_0x123b3c['setBlendColor']([0xff,0xff,0xff,0x40]):VisuMZ[_0x3adeee(0x387)][_0x3adeee(0x2ec)]['call'](this,_0x493dd4)),VisuMZ[_0x3adeee(0x387)][_0x3adeee(0xc70)](_0x493dd4);},VisuMZ[_0x54b1a4(0x387)]['ParseArmorNotetags']=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x54b1a4(0xdc0)]=function(_0x22c7a3){const _0x5e4fc8=_0x54b1a4;VisuMZ[_0x5e4fc8(0x387)][_0x5e4fc8(0xdc0)]&&(_0x5e4fc8(0xda4)!==_0x5e4fc8(0x5da)?VisuMZ[_0x5e4fc8(0x387)][_0x5e4fc8(0xdc0)][_0x5e4fc8(0xd6c)](this,_0x22c7a3):_0x31442f['shadow']=![]),VisuMZ[_0x5e4fc8(0x387)]['Parse_Notetags_TraitObjects'](_0x22c7a3);},VisuMZ[_0x54b1a4(0x387)]['ParseEnemyNotetags']=VisuMZ[_0x54b1a4(0xd24)],VisuMZ[_0x54b1a4(0xd24)]=function(_0x39c7c5){const _0x58dfb5=_0x54b1a4;VisuMZ[_0x58dfb5(0x387)][_0x58dfb5(0xd24)]&&(_0x58dfb5(0x8e8)!==_0x58dfb5(0x8e8)?(_0x15ea41[_0x58dfb5(0x387)][_0x58dfb5(0x4d7)][_0x58dfb5(0xd6c)](this,_0x886e9),this[_0x58dfb5(0x318)]()):VisuMZ[_0x58dfb5(0x387)]['ParseEnemyNotetags']['call'](this,_0x39c7c5)),VisuMZ[_0x58dfb5(0x387)][_0x58dfb5(0xc70)](_0x39c7c5);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x5ef)]=VisuMZ[_0x54b1a4(0x5ef)],VisuMZ[_0x54b1a4(0x5ef)]=function(_0x23ef6d){const _0x42d0db=_0x54b1a4;VisuMZ[_0x42d0db(0x387)][_0x42d0db(0x5ef)]&&VisuMZ[_0x42d0db(0x387)][_0x42d0db(0x5ef)][_0x42d0db(0xd6c)](this,_0x23ef6d),VisuMZ['BattleCore'][_0x42d0db(0xc70)](_0x23ef6d);},VisuMZ['BattleCore'][_0x54b1a4(0x6b6)]=function(_0x44f27a){const _0x45d305=_0x54b1a4,_0x172dce=['PreApplyJS',_0x45d305(0x824),'PreDamageJS','PostDamageJS',_0x45d305(0x586),_0x45d305(0x64b),_0x45d305(0x58c),_0x45d305(0x44c)];for(const _0x582ba6 of _0x172dce){if(_0x45d305(0xb70)!==_0x45d305(0x7db))VisuMZ[_0x45d305(0x387)][_0x45d305(0xc65)](_0x44f27a,_0x582ba6);else{const _0xcb06af=this['findSymbolExt'](_0x45d305(0x4ae),_0x479945[_0x45d305(0x6c8)]);this[_0x45d305(0x643)](_0xcb06af||0x0);}}const _0x30ccbc=_0x44f27a['note'];_0x30ccbc[_0x45d305(0x298)](/<ALWAYS CRITICAL/i)&&(_0x44f27a[_0x45d305(0x220)]['critical']=!![]),_0x30ccbc[_0x45d305(0x298)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x44f27a[_0x45d305(0x5d4)]=Math[_0x45d305(0x9db)](0x1,Number(RegExp['$1']))),_0x30ccbc[_0x45d305(0x298)](/<TARGET:[ ](.*)>/i)&&(_0x44f27a['scope']=String(RegExp['$1'])[_0x45d305(0x8fd)]()[_0x45d305(0x2f4)]());},VisuMZ[_0x54b1a4(0x387)]['Parse_Notetags_TraitObjects']=function(_0x27d67a){const _0x35ea14=_0x54b1a4,_0x5a2708=[_0x35ea14(0x551),_0x35ea14(0x757),_0x35ea14(0x8fa),_0x35ea14(0x603),'PreApplyAsTargetJS',_0x35ea14(0x8b8),_0x35ea14(0xa64),_0x35ea14(0x465),_0x35ea14(0x586),_0x35ea14(0x64b),_0x35ea14(0x58c),_0x35ea14(0x44c),'PreStartBattleJS',_0x35ea14(0x800),'PreEndBattleJS','PostEndBattleJS',_0x35ea14(0x805),_0x35ea14(0x4fd),_0x35ea14(0xa9c),_0x35ea14(0xd26),_0x35ea14(0xbd2),_0x35ea14(0x391),'PreEndTurnJS',_0x35ea14(0x416),_0x35ea14(0x354),_0x35ea14(0x8e2)];for(const _0x63c322 of _0x5a2708){VisuMZ[_0x35ea14(0x387)][_0x35ea14(0xc65)](_0x27d67a,_0x63c322);}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xd95)]=function(_0x1a15e9){const _0xb933f7=_0x54b1a4,_0x35b81f=_0x1a15e9[_0xb933f7(0xd77)];if(_0x35b81f[_0xb933f7(0x298)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x293a00=String(RegExp['$1']),_0x54a370=VisuMZ['BattleCore'][_0xb933f7(0x82a)](_0x1a15e9,'Targets');VisuMZ['BattleCore'][_0xb933f7(0xbd1)](_0x293a00,_0x54a370);}if(_0x35b81f[_0xb933f7(0x298)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0xb933f7(0x964)!=='sXmCh')_0x3779ce[_0xb933f7(0xca3)][_0xb933f7(0xc92)]<1.15&&(_0x2896ae(_0x14227[_0xb933f7(0xd76)]('STB')),_0x100400[_0xb933f7(0x3ca)]());else{const _0x17e517=String(RegExp['$1']),_0x54014f=VisuMZ[_0xb933f7(0x387)][_0xb933f7(0x82a)](_0x1a15e9,_0xb933f7(0xb6c));VisuMZ[_0xb933f7(0x387)]['createCommandVisibleJS'](_0x17e517,_0x54014f);}}},VisuMZ[_0x54b1a4(0x387)]['JS']={},VisuMZ['BattleCore']['createJS']=function(_0xe9da97,_0x43a90f){const _0x1fcf27=_0x54b1a4,_0x1781c7=_0xe9da97['note'];if(_0x1781c7[_0x1fcf27(0x298)](VisuMZ['BattleCore']['RegExp'][_0x43a90f])){const _0x26db9b=RegExp['$1'],_0x20bd40=_0x1fcf27(0x345)[_0x1fcf27(0xd76)](_0x26db9b),_0x5afcf6=VisuMZ[_0x1fcf27(0x387)][_0x1fcf27(0x82a)](_0xe9da97,_0x43a90f);VisuMZ['BattleCore']['JS'][_0x5afcf6]=new Function(_0x20bd40);}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x82a)]=function(_0x59b6a3,_0x27a66c){const _0x3a5614=_0x54b1a4;if(VisuMZ[_0x3a5614(0x82a)])return VisuMZ[_0x3a5614(0x82a)](_0x59b6a3,_0x27a66c);let _0x177f98='';if($dataActors[_0x3a5614(0xd4a)](_0x59b6a3))_0x177f98=_0x3a5614(0xd3c)[_0x3a5614(0xd76)](_0x59b6a3['id'],_0x27a66c);if($dataClasses[_0x3a5614(0xd4a)](_0x59b6a3))_0x177f98=_0x3a5614(0x91c)[_0x3a5614(0xd76)](_0x59b6a3['id'],_0x27a66c);if($dataSkills[_0x3a5614(0xd4a)](_0x59b6a3))_0x177f98=_0x3a5614(0xaa2)['format'](_0x59b6a3['id'],_0x27a66c);if($dataItems['includes'](_0x59b6a3))_0x177f98=_0x3a5614(0x56f)[_0x3a5614(0xd76)](_0x59b6a3['id'],_0x27a66c);if($dataWeapons[_0x3a5614(0xd4a)](_0x59b6a3))_0x177f98='Weapon-%1-%2'['format'](_0x59b6a3['id'],_0x27a66c);if($dataArmors[_0x3a5614(0xd4a)](_0x59b6a3))_0x177f98=_0x3a5614(0x548)[_0x3a5614(0xd76)](_0x59b6a3['id'],_0x27a66c);if($dataEnemies[_0x3a5614(0xd4a)](_0x59b6a3))_0x177f98=_0x3a5614(0xbc9)[_0x3a5614(0xd76)](_0x59b6a3['id'],_0x27a66c);if($dataStates['includes'](_0x59b6a3))_0x177f98=_0x3a5614(0x8f1)[_0x3a5614(0xd76)](_0x59b6a3['id'],_0x27a66c);return _0x177f98;},VisuMZ[_0x54b1a4(0x387)]['createTargetsJS']=function(_0x2e28e9,_0x2c6fde){const _0x512125=_0x54b1a4,_0x201b29='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'['format'](_0x2e28e9);VisuMZ[_0x512125(0x387)]['JS'][_0x2c6fde]=new Function(_0x201b29);},VisuMZ[_0x54b1a4(0x387)]['createCommandVisibleJS']=function(_0x356a3c,_0x259003){const _0x36dae8=_0x54b1a4,_0xc6f0=_0x36dae8(0xb2f)[_0x36dae8(0xd76)](_0x356a3c);VisuMZ['BattleCore']['JS'][_0x259003]=new Function(_0xc6f0);},TextManager[_0x54b1a4(0xb28)]=VisuMZ[_0x54b1a4(0x387)]['Settings'][_0x54b1a4(0x458)]['CmdTextAutoBattle'],TextManager[_0x54b1a4(0x695)]=VisuMZ['BattleCore'][_0x54b1a4(0x916)][_0x54b1a4(0xc85)][_0x54b1a4(0x44f)],TextManager[_0x54b1a4(0x3f7)]=VisuMZ['BattleCore']['Settings'][_0x54b1a4(0xc85)][_0x54b1a4(0x599)],TextManager[_0x54b1a4(0xce0)]=VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x916)][_0x54b1a4(0x60e)][_0x54b1a4(0x8cf)],ColorManager[_0x54b1a4(0xcc3)]=function(_0x277cc8){const _0x494150=_0x54b1a4;_0x277cc8=String(_0x277cc8);if(_0x277cc8['match'](/#(.*)/i)){if(_0x494150(0x35e)===_0x494150(0x35e))return _0x494150(0xa2b)[_0x494150(0xd76)](String(RegExp['$1']));else this[_0x494150(0xc6a)]('float');}else return this[_0x494150(0xa28)](Number(_0x277cc8));},DataManager[_0x54b1a4(0x89b)]=function(_0x290839){const _0x455e04=_0x54b1a4;if(_0x290839[_0x455e04(0xd77)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x2d516d=String(RegExp['$1'])['toUpperCase']()['trim']();if(_0x2d516d===_0x455e04(0x3e3))return'MANUAL';if(VisuMZ[_0x455e04(0x2eb)][_0x2d516d])return _0x2d516d;}const _0x300bee=VisuMZ[_0x455e04(0x387)][_0x455e04(0x916)]['Damage']['DefaultDamageStyle'][_0x455e04(0x8fd)]()[_0x455e04(0x2f4)]();if(VisuMZ[_0x455e04(0x2eb)][_0x300bee])return _0x300bee;return _0x455e04(0x3e3);},DataManager['getStypeIdWithName']=function(_0x46dd77){const _0x4255cb=_0x54b1a4;_0x46dd77=_0x46dd77[_0x4255cb(0x8fd)]()['trim'](),this['_stypeIDs']=this[_0x4255cb(0x85a)]||{};if(this[_0x4255cb(0x85a)][_0x46dd77])return this[_0x4255cb(0x85a)][_0x46dd77];for(let _0x4e9736=0x1;_0x4e9736<0x64;_0x4e9736++){if(!$dataSystem[_0x4255cb(0x719)][_0x4e9736])continue;let _0x402e2c=$dataSystem[_0x4255cb(0x719)][_0x4e9736][_0x4255cb(0x8fd)]()['trim']();_0x402e2c=_0x402e2c[_0x4255cb(0x68b)](/\x1I\[(\d+)\]/gi,''),_0x402e2c=_0x402e2c['replace'](/\\I\[(\d+)\]/gi,''),this[_0x4255cb(0x85a)][_0x402e2c]=_0x4e9736;}return this[_0x4255cb(0x85a)][_0x46dd77]||0x0;},DataManager['getSkillIdWithName']=function(_0xd20388){const _0x31207a=_0x54b1a4;_0xd20388=_0xd20388['toUpperCase']()[_0x31207a(0x2f4)](),this['_skillIDs']=this[_0x31207a(0xa44)]||{};if(this['_skillIDs'][_0xd20388])return this[_0x31207a(0xa44)][_0xd20388];for(const _0x334e85 of $dataSkills){if(!_0x334e85)continue;this['_skillIDs'][_0x334e85[_0x31207a(0x56b)][_0x31207a(0x8fd)]()[_0x31207a(0x2f4)]()]=_0x334e85['id'];}return this[_0x31207a(0xa44)][_0xd20388]||0x0;},DataManager[_0x54b1a4(0x726)]=function(_0x555895){const _0x1c2208=_0x54b1a4;_0x555895=_0x555895[_0x1c2208(0x8fd)]()[_0x1c2208(0x2f4)](),this[_0x1c2208(0x79d)]=this[_0x1c2208(0x79d)]||{};if(this[_0x1c2208(0x79d)][_0x555895])return this[_0x1c2208(0x79d)][_0x555895];for(const _0x2c8d24 of $dataEnemies){if(_0x1c2208(0x3c5)==='kfxdd'){if(!_0x2c8d24)continue;this[_0x1c2208(0x79d)][_0x2c8d24[_0x1c2208(0x56b)][_0x1c2208(0x8fd)]()['trim']()]=_0x2c8d24['id'];}else(this['_targetHomeX']!==_0x1d179f||this[_0x1c2208(0x989)]!==_0x222a81)&&(this['_targetHomeX']=_0x4121d2,this[_0x1c2208(0x989)]=_0x13b068,this['_homeDuration']=_0x2d7787,this['_homeWholeDuration']=_0x85a808,this[_0x1c2208(0x4f4)]=_0x244d33,_0x3a62b6<=0x0&&this[_0x1c2208(0xc29)]());}return this['_enemyIDs'][_0x555895]||0x0;},DataManager[_0x54b1a4(0x2f0)]=function(_0x11aa73){const _0x5ba1fb=_0x54b1a4;_0x11aa73=_0x11aa73['toUpperCase']()[_0x5ba1fb(0x2f4)](),this[_0x5ba1fb(0x55b)]=this['_wtypeIDs']||{};if(this[_0x5ba1fb(0x55b)][_0x11aa73])return this[_0x5ba1fb(0x55b)][_0x11aa73];for(let _0x522666=0x1;_0x522666<0x64;_0x522666++){if('ZHymh'!==_0x5ba1fb(0x5c5)){if(!$dataSystem[_0x5ba1fb(0x623)][_0x522666])continue;let _0x807d90=$dataSystem[_0x5ba1fb(0x623)][_0x522666][_0x5ba1fb(0x8fd)]()[_0x5ba1fb(0x2f4)]();_0x807d90=_0x807d90['replace'](/\x1I\[(\d+)\]/gi,''),_0x807d90=_0x807d90[_0x5ba1fb(0x68b)](/\\I\[(\d+)\]/gi,''),this[_0x5ba1fb(0x55b)][_0x807d90]=_0x522666;}else this['initialize'](...arguments);}return this[_0x5ba1fb(0x55b)]['BARE\x20HANDS']=0x0,this['_wtypeIDs'][_0x11aa73]||0x0;},DataManager[_0x54b1a4(0x822)]=function(_0x105396){const _0x2425cc=_0x54b1a4,_0x2d124a=_0x2425cc(0x9af);let _0x129d6d=_0x105396['iconIndex'],_0x57d559=_0x105396[_0x2425cc(0x56b)];const _0x404958=_0x105396[_0x2425cc(0xd77)];if(_0x404958[_0x2425cc(0x298)](/<DISPLAY ICON: (\d+)>/i)){if(_0x2425cc(0x6b9)===_0x2425cc(0x6b9))_0x129d6d=Number(RegExp['$1']);else{if(this[_0x2425cc(0xd0e)]()<=0x0)return;}}if(_0x404958[_0x2425cc(0x298)](/<DISPLAY TEXT: (.*)>/i)){if('xwIRh'!=='NHhii')_0x57d559=String(RegExp['$1']);else return _0x3d07b9(_0x5b0e0b['$1']);}return _0x2d124a['format'](_0x129d6d,_0x57d559);},DataManager[_0x54b1a4(0x32e)]=function(_0x1ef897){const _0x402f1f=_0x54b1a4;return _0x1ef897[_0x402f1f(0xd77)][_0x402f1f(0x298)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x1ef897['name'];},DataManager[_0x54b1a4(0x78b)]=function(_0x3767e4){const _0x260f50=_0x54b1a4;return _0x3767e4[_0x260f50(0xd77)][_0x260f50(0x298)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x3767e4[_0x260f50(0x931)];},DataManager[_0x54b1a4(0xae4)]=function(_0x17e09a){const _0x3dcfff=_0x54b1a4,_0x408347=$dataEnemies[_0x17e09a];if(_0x408347){if(_0x408347['note'][_0x3dcfff(0x298)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x25f785=String(RegExp['$1'])[_0x3dcfff(0x3a1)](/[\r\n]+/)['remove'](''),_0x6f55d5=this[_0x3dcfff(0x9eb)](_0x25f785);_0x17e09a=this['getEnemyIdWithName'](_0x6f55d5)||_0x17e09a,_0x17e09a=DataManager[_0x3dcfff(0xae4)](_0x17e09a);}}return _0x17e09a;},DataManager[_0x54b1a4(0x9eb)]=function(_0x1617d6){const _0x31d60=_0x54b1a4;let _0x5c9b74=0x0;const _0x36af8d={};for(const _0x4667b7 of _0x1617d6){if(_0x31d60(0xd36)===_0x31d60(0xd36)){if(_0x4667b7[_0x31d60(0x298)](/(.*):[ ](\d+)/i)){const _0x4dc99a=String(RegExp['$1'])[_0x31d60(0x2f4)](),_0xdb6466=Number(RegExp['$2']);_0x36af8d[_0x4dc99a]=_0xdb6466,_0x5c9b74+=_0xdb6466;}else{if(_0x4667b7[_0x31d60(0x298)](/(.*):[ ](\d+\.?\d+)/i)){const _0x2f02f5=String(RegExp['$1'])['trim'](),_0x3e1053=Number(RegExp['$2']);_0x36af8d[_0x2f02f5]=_0x3e1053,_0x5c9b74+=_0x3e1053;}else _0x4667b7!==''&&(_0x36af8d[_0x4667b7]=0x1,_0x5c9b74++);}}else this[_0x31d60(0x885)]=[];}if(_0x5c9b74<=0x0)return'';let _0x286de4=Math['random']()*_0x5c9b74;for(const _0x232e65 in _0x36af8d){_0x286de4-=_0x36af8d[_0x232e65];if(_0x286de4<=0x0)return _0x232e65;}return'';},DataManager[_0x54b1a4(0xaa6)]=function(_0x4db47a){const _0x2be9e=_0x54b1a4;if(!_0x4db47a)return![];if(!VisuMZ[_0x2be9e(0x387)][_0x2be9e(0x916)]['ActionSequence'][_0x2be9e(0x211)])return![];if(_0x4db47a['note'][_0x2be9e(0x298)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x4db47a[_0x2be9e(0xd77)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x179d36 of _0x4db47a['effects']){if(!_0x179d36)continue;if(_0x179d36[_0x2be9e(0xdb8)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager['createTroopNote']=function(_0x1aa000){const _0x3304ee=_0x54b1a4,_0x1a140e=$dataTroops[_0x1aa000];if(!_0x1a140e)return'';let _0xc32a15='';_0xc32a15+=_0x1a140e[_0x3304ee(0x56b)];for(const _0x109498 of _0x1a140e['pages']){for(const _0x2d6974 of _0x109498['list']){_0x3304ee(0xcdc)!==_0x3304ee(0x5d2)?[0x6c,0x198][_0x3304ee(0xd4a)](_0x2d6974[_0x3304ee(0xdb8)])&&(_0xc32a15+='\x0a',_0xc32a15+=_0x2d6974['parameters'][0x0]):_0x268627+=_0x46c2e5(_0x820cf['$1'])/0x64;}}return _0xc32a15;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x54b1a4(0xddb)]??![],ConfigManager[_0x54b1a4(0x3c1)]=ConfigManager[_0x54b1a4(0x3c1)]??![],ConfigManager[_0x54b1a4(0xce0)]=ConfigManager[_0x54b1a4(0xce0)]??!![],VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xd72)]=ConfigManager['makeData'],ConfigManager[_0x54b1a4(0x57c)]=function(){const _0x15848c=_0x54b1a4,_0x203e7d=VisuMZ[_0x15848c(0x387)][_0x15848c(0xd72)]['call'](this);return _0x203e7d[_0x15848c(0xddb)]=this['autoBattleAtStart'],_0x203e7d[_0x15848c(0x3c1)]=this[_0x15848c(0x3c1)],_0x203e7d['visualHpGauge']=this[_0x15848c(0xce0)],_0x203e7d;},VisuMZ[_0x54b1a4(0x387)]['ConfigManager_applyData']=ConfigManager[_0x54b1a4(0xb2e)],ConfigManager['applyData']=function(_0xab4a7a){const _0x521d26=_0x54b1a4;VisuMZ[_0x521d26(0x387)][_0x521d26(0x566)]['call'](this,_0xab4a7a),_0x521d26(0xddb)in _0xab4a7a?this[_0x521d26(0xddb)]=_0xab4a7a[_0x521d26(0xddb)]:this[_0x521d26(0xddb)]=![],_0x521d26(0x3c1)in _0xab4a7a?this[_0x521d26(0x3c1)]=_0xab4a7a['autoBattleUseSkills']:this[_0x521d26(0x3c1)]=![],'visualHpGauge'in _0xab4a7a?this[_0x521d26(0xce0)]=_0xab4a7a[_0x521d26(0xce0)]:_0x521d26(0x977)!==_0x521d26(0x977)?this[_0x521d26(0x9ec)]=_0x25a8f4:this['visualHpGauge']=!![];},ImageManager[_0x54b1a4(0x6ac)]=ImageManager[_0x54b1a4(0x6ac)]||0x9,ImageManager[_0x54b1a4(0xd10)]=ImageManager['svActorVertCells']||0x6,VisuMZ['BattleCore'][_0x54b1a4(0x6b8)]=BattleManager[_0x54b1a4(0x915)],BattleManager[_0x54b1a4(0x915)]=function(_0x32b4d4,_0x1f761b,_0x3b2362){const _0xa522f9=_0x54b1a4;VisuMZ['BattleCore']['BattleManager_setup'][_0xa522f9(0xd6c)](this,_0x32b4d4,_0x1f761b,_0x3b2362),this[_0xa522f9(0xc03)]={};},VisuMZ[_0x54b1a4(0x387)]['BattleManager_initMembers']=BattleManager[_0x54b1a4(0x900)],BattleManager[_0x54b1a4(0x900)]=function(){const _0x30f372=_0x54b1a4;VisuMZ[_0x30f372(0x387)][_0x30f372(0x381)]['call'](this),this[_0x30f372(0xa5a)]=[];},BattleManager[_0x54b1a4(0x7a5)]=function(){const _0x5f1145=_0x54b1a4;if(!SceneManager[_0x5f1145(0xbbd)]())return;const _0x2b2e5a=SceneManager[_0x5f1145(0xc22)][_0x5f1145(0x89f)];if(_0x2b2e5a)_0x2b2e5a[_0x5f1145(0xa6b)]();},BattleManager[_0x54b1a4(0x8dd)]=function(){const _0x4d3e89=_0x54b1a4;if(BattleManager['isTpb']())return _0x4d3e89(0x74e);return'DTB';},BattleManager[_0x54b1a4(0x8df)]=function(_0x6ba84f){const _0x1048c2=_0x54b1a4;return _0x6ba84f=_0x6ba84f[_0x1048c2(0x8fd)]()[_0x1048c2(0x2f4)](),this[_0x1048c2(0x8dd)]()===_0x6ba84f;},BattleManager['isDTB']=function(){const _0x575ec9=_0x54b1a4;return this['isBattleSys'](_0x575ec9(0x1eb));},BattleManager[_0x54b1a4(0x77b)]=function(){const _0x11c734=_0x54b1a4;return this[_0x11c734(0xa07)]();},BattleManager[_0x54b1a4(0xda3)]=function(){const _0x18e4c6=_0x54b1a4;return!this[_0x18e4c6(0x77b)]();},BattleManager[_0x54b1a4(0x584)]=function(){const _0x1705a6=_0x54b1a4;return!this[_0x1705a6(0x77b)]()&&!this['isTickBased']();},BattleManager[_0x54b1a4(0x4e5)]=function(_0x110717){const _0x2b18d8=_0x54b1a4;this[_0x2b18d8(0xc03)]=this[_0x2b18d8(0xc03)]||{};if(this[_0x2b18d8(0xc03)][_0x110717]!==undefined)return this[_0x2b18d8(0xc03)][_0x110717];this[_0x2b18d8(0xc03)][_0x110717]=null;const _0x17c71a=this[_0x2b18d8(0xbfc)](),_0xdf7615=_0x17c71a[_0x2b18d8(0xd7a)](_0x3b5e07=>_0x3b5e07[_0x2b18d8(0xdbd)]()===_0x110717);if(_0xdf7615)this[_0x2b18d8(0xc03)][_0x110717]=_0xdf7615;return this[_0x2b18d8(0xc03)][_0x110717];},Game_BattlerBase['prototype']['battlerKey']=function(){const _0x2d876a=_0x54b1a4;return _0x2d876a(0xcfd)[_0x2d876a(0xd76)](this['isActor']()?_0x2d876a(0x6fe):_0x2d876a(0x717),this[_0x2d876a(0x56b)]());},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x802)]=function(_0x57468d){const _0x11a0ac=_0x54b1a4;if(this[_0x11a0ac(0x687)]!=='')return;if(typeof _0x57468d===_0x11a0ac(0xaaf))this[_0x11a0ac(0x687)]=_0x57468d[_0x11a0ac(0x6d1)]()['trim']();else{if('RrodO'!==_0x11a0ac(0x952))this[_0x11a0ac(0x687)]=_0x57468d[_0x11a0ac(0xdbd)]();else{const _0x29295a=_0x51d2fd[_0x11a0ac(0x8c0)](_0x53c11b[_0x11a0ac(0x495)]/0x3),_0x439c65=_0x2de793[_0x11a0ac(0x68d)]((_0x1beb3c['boxWidth']-_0x29295a)/0x2),_0x3b92bc=this['partyCommandWindowRectBorderStyle'](),_0x19d934=_0x3b92bc['y'],_0x3bd269=_0x3b92bc['height'];return new _0x78b326(_0x439c65,_0x19d934,_0x29295a,_0x3bd269);}}},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x4f0)]=function(){return[this['getSpecificBattlerKeyTarget']()];},Game_Action[_0x54b1a4(0x375)]['getSpecificBattlerKeyTarget']=function(){const _0x1ed685=_0x54b1a4,_0x38b7ef=this[_0x1ed685(0x687)]||'',_0x5003f5=BattleManager['getBattlerFromKey'](_0x38b7ef);if(!_0x5003f5)return this['getBattlerKeyTargetReplacement']();if(!_0x5003f5['isAlive']())this['getBattlerKeyTargetReplacement']();return _0x5003f5;},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xbab)]=function(){const _0x2eca74=_0x54b1a4,_0x4fe3e7=this[_0x2eca74(0x687)];if(_0x4fe3e7[_0x2eca74(0x298)](/ACTOR/i)){if(_0x2eca74(0x648)==='QFadi')return this['friendsUnit']()['trueRandomTarget']();else this[_0x2eca74(0x5b6)]=_0x3a558a,_0x4975eb['_scene'][_0x2eca74(0x998)]();}else return this[_0x2eca74(0xb1e)]()[_0x2eca74(0xab2)]();},BattleManager[_0x54b1a4(0x410)]=function(){const _0x310e40=_0x54b1a4;return this[_0x310e40(0xbfc)]()[_0x310e40(0x661)](_0x5d064e=>_0x5d064e[_0x310e40(0x450)]());},BattleManager[_0x54b1a4(0x506)]=function(_0x593c7f){const _0x208c39=_0x54b1a4;_0x593c7f==='BattleVictoryJS'&&(this[_0x208c39(0xabc)]=!![]),$gameParty[_0x208c39(0x506)](_0x593c7f),$gameTroop[_0x208c39(0x506)](_0x593c7f);},VisuMZ['BattleCore'][_0x54b1a4(0x2a8)]=BattleManager[_0x54b1a4(0xd06)],BattleManager[_0x54b1a4(0xd06)]=function(){const _0x42b86c=_0x54b1a4;this['_endBattle']=![],this[_0x42b86c(0xcb7)]=ConfigManager['autoBattleAtStart'],this[_0x42b86c(0xabc)]=![],this['processBattleCoreJS'](_0x42b86c(0xbdb)),VisuMZ[_0x42b86c(0x387)][_0x42b86c(0x2a8)]['call'](this),this[_0x42b86c(0x506)](_0x42b86c(0x800));},BattleManager['processPostBattleCommonEvents']=function(_0x1669c0){const _0x341a9c=_0x54b1a4,_0x45f89e=VisuMZ[_0x341a9c(0x387)][_0x341a9c(0x916)][_0x341a9c(0xc86)];_0x1669c0!==_0x341a9c(0xc12)&&_0x45f89e['BattleEndEvent']&&VisuMZ['BattleCore'][_0x341a9c(0x31d)](_0x45f89e['BattleEndEvent'])&&$gameTemp[_0x341a9c(0x69e)](_0x45f89e['BattleEndEvent']);const _0x583df3=_0x341a9c(0x246)[_0x341a9c(0xd76)](_0x1669c0);if(_0x45f89e[_0x583df3]&&VisuMZ[_0x341a9c(0x387)][_0x341a9c(0x31d)](_0x45f89e[_0x583df3])){if(_0x341a9c(0xc78)!=='npETM'){const _0x63629d=_0x3ed12c['item']();this[_0x341a9c(0xc1a)](_0xb46031,_0x63629d),this[_0x341a9c(0x519)](_0x341a9c(0xc60),_0xfe59,_0x10aea1,!![]),this[_0x341a9c(0x519)]('performActionStart',_0x50d3a3,_0x5139ba),this[_0x341a9c(0x519)](_0x341a9c(0x83f)),this[_0x341a9c(0x519)](_0x341a9c(0x44d),_0x4ca0be,_0x42849e),this[_0x341a9c(0x519)](_0x341a9c(0x6c1));}else $gameTemp[_0x341a9c(0x69e)](_0x45f89e[_0x583df3]);}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x5f0)]=BattleManager['checkBattleEnd'],BattleManager['checkBattleEnd']=function(){const _0x1108f5=_0x54b1a4;if(this[_0x1108f5(0x8ec)]===_0x1108f5(0xb03)){if(_0x1108f5(0xabb)!==_0x1108f5(0x3a4)){if($gameTemp['isCommonEventReserved']())return![];}else{const _0x16c81c=this[_0x1108f5(0xa51)](_0x5948c0);if(_0x16c81c[_0x1108f5(0x298)](/\\I\[(\d+)\]/i)){const _0x3bc493=this['itemLineRect'](_0x45abda),_0x4b1712=this[_0x1108f5(0x9d8)](_0x16c81c)[_0x1108f5(0x495)];return _0x4b1712<=_0x3bc493[_0x1108f5(0x495)]?_0x1108f5(0x604):_0x1108f5(0x256);}}}return VisuMZ[_0x1108f5(0x387)][_0x1108f5(0x5f0)][_0x1108f5(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xaf9)]=BattleManager[_0x54b1a4(0x79e)],BattleManager['processVictory']=function(){const _0x123b69=_0x54b1a4;this[_0x123b69(0xabc)]=!![],this[_0x123b69(0x506)](_0x123b69(0x805)),VisuMZ[_0x123b69(0x387)][_0x123b69(0xaf9)][_0x123b69(0xd6c)](this),this[_0x123b69(0x894)](_0x123b69(0x5ae));},VisuMZ['BattleCore'][_0x54b1a4(0x544)]=BattleManager[_0x54b1a4(0xac4)],BattleManager[_0x54b1a4(0xac4)]=function(){const _0x18076c=_0x54b1a4;this[_0x18076c(0xabc)]=!![],VisuMZ[_0x18076c(0x387)][_0x18076c(0x544)][_0x18076c(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xb7e)]=BattleManager[_0x54b1a4(0x4b8)],BattleManager[_0x54b1a4(0x4b8)]=function(){const _0x2db546=_0x54b1a4;this['_endingBattle']=!![],this[_0x2db546(0x506)]('BattleDefeatJS'),VisuMZ[_0x2db546(0x387)]['BattleManager_processDefeat']['call'](this),this[_0x2db546(0x894)](_0x2db546(0xd6f));},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xc0e)]=BattleManager[_0x54b1a4(0x8f8)],BattleManager[_0x54b1a4(0x8f8)]=function(_0xc4ba07){const _0x5e2a95=_0x54b1a4;this[_0x5e2a95(0xcd2)]=!![],this[_0x5e2a95(0xcb7)]=![],this[_0x5e2a95(0x506)](_0x5e2a95(0x62d)),VisuMZ[_0x5e2a95(0x387)][_0x5e2a95(0xc0e)][_0x5e2a95(0xd6c)](this,_0xc4ba07),this[_0x5e2a95(0x506)]('PostEndBattleJS');},VisuMZ[_0x54b1a4(0x387)]['BattleManager_startTurn']=BattleManager[_0x54b1a4(0xd5a)],BattleManager[_0x54b1a4(0xd5a)]=function(){const _0x420da9=_0x54b1a4;if(this[_0x420da9(0x77b)]())this['processBattleCoreJS']('PreStartTurnJS');VisuMZ['BattleCore'][_0x420da9(0x1ed)][_0x420da9(0xd6c)](this);if(this[_0x420da9(0x77b)]())this['processBattleCoreJS'](_0x420da9(0x391));},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xa15)]=BattleManager[_0x54b1a4(0x4b6)],BattleManager[_0x54b1a4(0x4b6)]=function(){const _0x1e6329=_0x54b1a4,_0xe1274f=this[_0x1e6329(0x644)]['currentAction'](),_0x373e74=this[_0x1e6329(0x644)];_0xe1274f&&_0xe1274f['subject']()===_0x373e74&&_0xe1274f[_0x1e6329(0x33b)](_0x1e6329(0x586)),VisuMZ['BattleCore'][_0x1e6329(0xa15)][_0x1e6329(0xd6c)](this),_0xe1274f&&_0xe1274f[_0x1e6329(0xc0d)]()===_0x373e74&&(_0x1e6329(0xb04)===_0x1e6329(0x3d3)?this[_0x1e6329(0x9f5)](_0x16be61,_0x475863,_0x5e0c32):_0xe1274f[_0x1e6329(0x33b)]('PostStartActionJS'));},VisuMZ['BattleCore'][_0x54b1a4(0x254)]=BattleManager['endAction'],BattleManager[_0x54b1a4(0xdda)]=function(){const _0x20432e=_0x54b1a4,_0x1dc84f=this[_0x20432e(0x65a)],_0x207be6=this[_0x20432e(0x644)];_0x1dc84f&&_0x1dc84f!==this[_0x20432e(0x6ab)]&&_0x1dc84f[_0x20432e(0xc0d)]()===_0x207be6&&_0x1dc84f['actionBattleCoreJS'](_0x20432e(0x58c)),this[_0x20432e(0x644)]?VisuMZ[_0x20432e(0x387)][_0x20432e(0x254)][_0x20432e(0xd6c)](this):_0x20432e(0x68e)!=='IkCyP'?this[_0x20432e(0x8ec)]=_0x20432e(0xb03):_0x2f9820['BattleCore'][_0x20432e(0x3f2)][_0x20432e(0xd6c)](this,_0x5f44bb),_0x1dc84f&&_0x1dc84f!==this[_0x20432e(0x6ab)]&&_0x1dc84f[_0x20432e(0xc0d)]()===_0x207be6&&(_0x20432e(0x9e7)!=='oolXb'?_0x1dc84f[_0x20432e(0x33b)](_0x20432e(0x44c)):(_0x361c3f['BattleCore'][_0x20432e(0xc20)][_0x20432e(0xd6c)](this),this[_0x20432e(0x3d7)](),this[_0x20432e(0x4f2)]())),this[_0x20432e(0x90b)](this[_0x20432e(0xbfc)]()),this[_0x20432e(0x6ab)]=this[_0x20432e(0x65a)];},BattleManager[_0x54b1a4(0x90b)]=function(_0x2a52fb){const _0x5453fd=_0x54b1a4;for(const _0x4d932e of _0x2a52fb){if(!_0x4d932e)continue;if(!_0x4d932e['battler']())continue;_0x4d932e['battler']()[_0x5453fd(0x671)]();}},BattleManager[_0x54b1a4(0x4e1)]=function(){const _0x7670e=_0x54b1a4;!this['_logWindow']['isBusy']()&&this[_0x7670e(0xdda)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xd67)]=function(){const _0x370174=_0x54b1a4;this['clearResult']();if(Imported['VisuMZ_1_SkillsStatesCore']){if(_0x370174(0xd7b)!==_0x370174(0x36c)){const _0x23ff24=VisuMZ[_0x370174(0xc17)][_0x370174(0x916)][_0x370174(0x917)];_0x23ff24&&_0x23ff24['ActionEndUpdate']===![]&&('uskaB'!=='jDsEq'?this[_0x370174(0x946)](0x1):_0x2ed6ed=_0x3cd7f2>=_0x580c1a?_0x209791:_0x2abe6e);}else _0x3604cd=(_0x392aa5+_0x38ae22)/0x2,_0x485852=-0x1;}else this[_0x370174(0x946)](0x1);this[_0x370174(0x463)]();},BattleManager[_0x54b1a4(0xa66)]=function(){const _0x1adee9=_0x54b1a4;this[_0x1adee9(0x29c)]=VisuMZ[_0x1adee9(0x387)][_0x1adee9(0x916)][_0x1adee9(0xc86)][_0x1adee9(0xd16)][_0x1adee9(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x251)]=BattleManager[_0x54b1a4(0xccd)],BattleManager[_0x54b1a4(0xccd)]=function(){const _0x45bdac=_0x54b1a4;this[_0x45bdac(0x506)](_0x45bdac(0xa9c)),BattleManager[_0x45bdac(0xaca)][_0x45bdac(0xd89)](),VisuMZ[_0x45bdac(0x387)][_0x45bdac(0x251)]['call'](this),this['processPostBattleCommonEvents'](_0x45bdac(0xc8d));},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x1ef)]=BattleManager[_0x54b1a4(0x9e1)],BattleManager[_0x54b1a4(0x9e1)]=function(){const _0x4bfdbe=_0x54b1a4;this[_0x4bfdbe(0x506)](_0x4bfdbe(0xd26));const _0x21d7b8=this[_0x4bfdbe(0x29c)];VisuMZ[_0x4bfdbe(0x387)][_0x4bfdbe(0x1ef)][_0x4bfdbe(0xd6c)](this),this[_0x4bfdbe(0x29c)]=_0x21d7b8+VisuMZ[_0x4bfdbe(0x387)][_0x4bfdbe(0x916)][_0x4bfdbe(0xc86)][_0x4bfdbe(0x9ab)][_0x4bfdbe(0xd6c)](this),this[_0x4bfdbe(0x894)](_0x4bfdbe(0xc12));},BattleManager[_0x54b1a4(0x6c7)]=function(){const _0x550158=_0x54b1a4;let _0x46ca0f=![];if(this[_0x550158(0xa79)]()){if(_0x550158(0x409)!=='kvZos'){this['_cursorSprite']=new _0x3dc501();for(let _0x5ac5bb=0x0;_0x5ac5bb<0x9;_0x5ac5bb++){this[_0x550158(0x53e)][_0x550158(0x6a8)](new _0x801481());}this[_0x550158(0xcbd)]['addChild'](this['_cursorSprite']);}else for(const _0x419148 of $gameTroop[_0x550158(0x3b6)]()){this['_logWindow']['push'](_0x550158(0xcd7),TextManager[_0x550158(0x5b8)][_0x550158(0xd76)](_0x419148)),this['_logWindow'][_0x550158(0x519)](_0x550158(0x755)),_0x46ca0f=!![];}}if(this['_preemptive'])this[_0x550158(0x82e)]['push'](_0x550158(0xcd7),TextManager['preemptive'][_0x550158(0xd76)]($gameParty[_0x550158(0x56b)]())),this[_0x550158(0x82e)][_0x550158(0x519)](_0x550158(0x755));else this[_0x550158(0xc64)]&&(this[_0x550158(0x82e)][_0x550158(0x519)](_0x550158(0xcd7),TextManager[_0x550158(0xb49)][_0x550158(0xd76)]($gameParty['name']())),this[_0x550158(0x82e)][_0x550158(0x519)]('wait'));_0x46ca0f&&(this[_0x550158(0x82e)][_0x550158(0x519)](_0x550158(0x755)),this['_logWindow'][_0x550158(0x519)](_0x550158(0x207))),this[_0x550158(0x56d)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x550158(0xb4b)]=![]);},BattleManager[_0x54b1a4(0xa79)]=function(){const _0x42c9a6=_0x54b1a4;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x42c9a6(0x387)][_0x42c9a6(0x916)][_0x42c9a6(0x809)]['EmergeText'];},VisuMZ['BattleCore'][_0x54b1a4(0x4c3)]=BattleManager[_0x54b1a4(0x7ac)],BattleManager['startInput']=function(){const _0x39572b=_0x54b1a4;VisuMZ[_0x39572b(0x387)][_0x39572b(0x4c3)][_0x39572b(0xd6c)](this),this[_0x39572b(0xa07)]()&&this[_0x39572b(0xdb5)]()&&!this['_surprise']&&$gameParty[_0x39572b(0xbd9)]()&&this[_0x39572b(0xb67)]();},BattleManager[_0x54b1a4(0xdb5)]=function(){const _0x393309=_0x54b1a4;return VisuMZ[_0x393309(0x387)][_0x393309(0x916)][_0x393309(0x458)][_0x393309(0x362)];},BattleManager[_0x54b1a4(0xac6)]=function(){const _0x32b311=_0x54b1a4;if(this[_0x32b311(0x9f8)]()){if(_0x32b311(0x994)===_0x32b311(0x994))this[_0x32b311(0xb67)]();else{const _0x41afba=this[_0x32b311(0x56c)](),_0x1c18b=_0x15d601[_0x32b311(0x387)][_0x32b311(0x916)][_0x32b311(0x458)]['CmdIconAutoBattle'],_0xf3b963=_0x41afba===_0x32b311(0xdd1)?_0x73976e['autoBattle']:_0x32b311(0x9af)[_0x32b311(0xd76)](_0x1c18b,_0x1c9953[_0x32b311(0xb28)]),_0x5b247f=this['isAutoBattleCommandEnabled']();this[_0x32b311(0x59f)](_0xf3b963,_0x32b311(0xb28),_0x5b247f);}}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xd96)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x48e)],Scene_Battle['prototype'][_0x54b1a4(0x48e)]=function(){const _0xcd8e17=_0x54b1a4;VisuMZ[_0xcd8e17(0x387)][_0xcd8e17(0xd96)][_0xcd8e17(0xd6c)](this),BattleManager['isTpb']()&&BattleManager[_0xcd8e17(0xb4b)]&&(BattleManager['_tpbNeedsPartyCommand']=![],this[_0xcd8e17(0xc84)]());},BattleManager['invokeMagicReflection']=function(_0x4fefee,_0x4763da){const _0x419b54=_0x54b1a4;this[_0x419b54(0x65a)]['_reflectionTarget']=_0x4763da,this[_0x419b54(0x82e)]['displayReflection'](_0x4763da),this[_0x419b54(0x82e)][_0x419b54(0x497)](_0x4fefee,this[_0x419b54(0x65a)]),this[_0x419b54(0x65a)][_0x419b54(0x961)](_0x4fefee),this[_0x419b54(0x82e)]['displayActionResults'](_0x4fefee,_0x4fefee);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x7b8)]=BattleManager[_0x54b1a4(0x415)],BattleManager[_0x54b1a4(0x415)]=function(){const _0x6bb7ad=_0x54b1a4;VisuMZ['BattleCore'][_0x6bb7ad(0x7b8)]['call'](this),this[_0x6bb7ad(0xbe4)]=this[_0x6bb7ad(0xbe4)][_0x6bb7ad(0x661)](_0x222a47=>_0x222a47&&_0x222a47['isAppeared']());},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x3f2)]=BattleManager[_0x54b1a4(0xa02)],BattleManager[_0x54b1a4(0xa02)]=function(_0x197a1f){const _0x5cda9e=_0x54b1a4;if(this[_0x5cda9e(0x8ec)]===_0x5cda9e(0x34b)){if('jHCKn'!==_0x5cda9e(0xb19)){if(!this['canMove']())return;if(_0x400298<=0x0)return;this['_jumpMaxHeight']=_0x2cfd80,this[_0x5cda9e(0x42a)]=_0x32d4fe,this[_0x5cda9e(0xc28)]=_0x468f10;}else this['updateCustomActionSequence']();}else this[_0x5cda9e(0x8ec)]===_0x5cda9e(0x4da)?this[_0x5cda9e(0x81d)]():VisuMZ[_0x5cda9e(0x387)][_0x5cda9e(0x3f2)]['call'](this,_0x197a1f);},BattleManager[_0x54b1a4(0x8e4)]=function(){const _0x41dc16=_0x54b1a4;this[_0x41dc16(0x966)]=this['_targets'][_0x41dc16(0xc27)](0x0),this[_0x41dc16(0x466)]=0x0,this['_target']=this[_0x41dc16(0x966)][0x0]||null,this[_0x41dc16(0x8ec)]=_0x41dc16(0x34b);},BattleManager[_0x54b1a4(0x1ea)]=function(){const _0x1d0106=_0x54b1a4;!this[_0x1d0106(0x62a)]()&&!this['_logWindow'][_0x1d0106(0xaa0)]()&&(this[_0x1d0106(0x8ec)]=_0x1d0106(0xca9));},BattleManager['forceAction']=function(_0x2723a1){const _0x50b8c5=_0x54b1a4;this[_0x50b8c5(0xbe4)]['remove'](_0x2723a1);if(_0x2723a1===this[_0x50b8c5(0x644)])return;const _0x2cb951=JsonEx[_0x50b8c5(0x9c2)](_0x2723a1[_0x50b8c5(0xb7a)]());this['_forcedBattlers'][_0x50b8c5(0x519)]([_0x2723a1,_0x2cb951]);},BattleManager[_0x54b1a4(0x735)]=function(){},BattleManager[_0x54b1a4(0x882)]=function(){const _0x5d6b02=_0x54b1a4;if(this[_0x5d6b02(0x56d)]())this[_0x5d6b02(0x8ec)]=_0x5d6b02(0xb03);else this[_0x5d6b02(0xa5a)]['length']>0x0?this['_phase']='turn':this['startInput']();},BattleManager['getNextSubject']=function(){const _0x55760f=_0x54b1a4,_0x36f05d=this['_subject'];if(_0x36f05d&&this['isTpb']()){if(_0x55760f(0xc69)!=='oulgj')return!![];else _0x36f05d['setActionState']('undecided');}for(;;){const _0x8739b2=this['getNextSubjectFromPool']();if(!_0x8739b2)return null;if(_0x8739b2['isBattleMember']()&&_0x8739b2[_0x55760f(0x6a2)]())return _0x8739b2;}},BattleManager['getNextSubjectFromPool']=function(){const _0x806807=_0x54b1a4;if(this[_0x806807(0xa5a)]['length']>0x0){const _0x2b691f=this[_0x806807(0xa5a)][_0x806807(0x382)](),_0x245249=_0x2b691f[0x0];return _0x245249[_0x806807(0x955)]=_0x245249['_actions']||[],_0x245249['_actions'][0x0]=_0x2b691f[0x1],_0x245249;}else return this['_actionBattlers'][_0x806807(0x382)]();},VisuMZ['BattleCore'][_0x54b1a4(0xa82)]=Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x4da)],Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x4da)]=function(_0x2da56e,_0x546932){const _0x452940=_0x54b1a4;VisuMZ['BattleCore']['Game_Battler_forceAction']['call'](this,_0x2da56e,_0x546932),this[_0x452940(0x955)][this[_0x452940(0x955)][_0x452940(0x69d)]-0x1][_0x452940(0x28b)]=!![];},Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x208)]=function(_0x3a17dc){const _0x1b1713=_0x54b1a4;return this[_0x1b1713(0x7a1)](_0x3a17dc[0x0],_0x3a17dc[0x1],_0x5178be=>{const _0x573729=_0x1b1713;if(_0x573729(0xca1)===_0x573729(0xca1))!_0x5178be[_0x573729(0x72c)]()&&('XgHXY'!==_0x573729(0x7a6)?(_0x5178be[_0x573729(0x4da)](_0x3a17dc[0x2],_0x3a17dc[0x3]),BattleManager[_0x573729(0x4da)](_0x5178be)):(_0x41f89a[_0x573729(0x387)]['Sprite_Actor_updateShadow']['call'](this),this[_0x573729(0x2ea)]()));else return _0x5d916c['jsScaleToFit'][_0x573729(0xd6c)](this);}),!![];},VisuMZ['BattleCore'][_0x54b1a4(0x85e)]=Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x9aa)],Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x9aa)]=function(){const _0x3bc924=_0x54b1a4;VisuMZ[_0x3bc924(0x387)]['Game_Battler_makeSpeed'][_0x3bc924(0xd6c)](this),this['_actions']['length']<=0x0&&(this[_0x3bc924(0xc61)]=Number[_0x3bc924(0xa19)]);},BattleManager[_0x54b1a4(0x570)]=function(){const _0x5b475c=_0x54b1a4;if(VisuMZ[_0x5b475c(0x387)][_0x5b475c(0x916)][_0x5b475c(0x5f5)]['EndBattlePopups']??!![])return![];return SceneManager['isSceneBattle']()&&this[_0x5b475c(0xabc)];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xdaf)]=BattleManager['selectNextCommand'],BattleManager['selectNextCommand']=function(){const _0x216fcf=_0x54b1a4;if(this[_0x216fcf(0x56d)]())this['selectNextCommandTpb']();else{if(_0x216fcf(0x2df)==='VXnqB')VisuMZ[_0x216fcf(0x387)][_0x216fcf(0xdaf)][_0x216fcf(0xd6c)](this);else{const _0x3c11c3=_0x1ab1c0[_0x216fcf(0x940)](_0x57f9d7);return _0x3c11c3>=0x0?[_0x121a0c[_0x3c11c3-0x1]||_0xf30914]:[_0x1ff8b8];}}},BattleManager[_0x54b1a4(0xa41)]=function(){const _0x1b26df=_0x54b1a4;if(this[_0x1b26df(0xc15)]){if(this['_currentActor'][_0x1b26df(0xb67)]())return;this[_0x1b26df(0xd64)](),this[_0x1b26df(0xd1b)](),!this[_0x1b26df(0x644)]&&!this[_0x1b26df(0xc15)]&&SceneManager['_scene'][_0x1b26df(0x455)]();}else!this[_0x1b26df(0x644)]&&this[_0x1b26df(0xb5e)]();},BattleManager['checkTpbInputClose']=function(){const _0x309b40=_0x54b1a4;if(!this[_0x309b40(0x9f8)]()||this[_0x309b40(0xab4)]()){if(this[_0x309b40(0x3a0)]){if(!$gameParty[_0x309b40(0x562)]()[_0x309b40(0xd4a)](this[_0x309b40(0x3a0)])){if('uBeSJ'===_0x309b40(0x588)){const _0x28e02e=this[_0x309b40(0xd92)]();if(['xp'][_0x309b40(0xd4a)](_0x28e02e)&&!_0x36ba53[_0x309b40(0xc91)]()){this[_0x309b40(0xb94)](0x0,0x0,0x0,0x0);return;}_0x45b2aa['prototype'][_0x309b40(0x80e)][_0x309b40(0xd6c)](this);}else this[_0x309b40(0x3a0)]=null;}}if(!this[_0x309b40(0x3a0)])this['cancelActorInput'](),this['_currentActor']=null,this['_inputting']=![];else{if('gPOAr'!==_0x309b40(0xa74)){if(!_0x2ff3a3['isSceneBattle']())return;const _0x25d0df=_0x18d2b0[_0x309b40(0x859)]();if(!_0x25d0df)return;_0x25d0df[_0x309b40(0xc6a)](_0x309b40(0xb2b));}else this[_0x309b40(0xc9d)]();}}},BattleManager[_0x54b1a4(0xc9d)]=function(){const _0x18e7e4=_0x54b1a4;!$gameParty[_0x18e7e4(0x562)]()[_0x18e7e4(0xd4a)](this[_0x18e7e4(0x3a0)])&&(this['_tpbSceneChangeCacheActor']=null),this[_0x18e7e4(0x3a0)]?(this[_0x18e7e4(0xc15)]=this['_tpbSceneChangeCacheActor'],this[_0x18e7e4(0xc15)]['_tpbState']='charged',this[_0x18e7e4(0x2e1)]=!![],this[_0x18e7e4(0x3a0)]=null):(this[_0x18e7e4(0xc9a)](),this[_0x18e7e4(0xc15)]=null,this[_0x18e7e4(0x2e1)]=![]);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x6a5)]=BattleManager['isTpbMainPhase'],BattleManager['isTpbMainPhase']=function(){const _0x51e3d4=_0x54b1a4;return this[_0x51e3d4(0x8ec)]===_0x51e3d4(0x34b)?this[_0x51e3d4(0x66a)]():VisuMZ[_0x51e3d4(0x387)]['BattleManager_isTpbMainPhase'][_0x51e3d4(0xd6c)](this);},BattleManager[_0x54b1a4(0x66a)]=function(){const _0x1af238=_0x54b1a4;return this[_0x1af238(0xa39)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xbf8)]=BattleManager['cancelActorInput'],BattleManager[_0x54b1a4(0xc9a)]=function(){const _0x37b1f2=_0x54b1a4;this[_0x37b1f2(0x56d)]()&&this[_0x37b1f2(0x8ec)]===_0x37b1f2(0xa21)&&(this[_0x37b1f2(0xc15)]=null),VisuMZ[_0x37b1f2(0x387)]['BattleManager_cancelActorInput'][_0x37b1f2(0xd6c)](this);},VisuMZ['BattleCore'][_0x54b1a4(0x655)]=BattleManager['inputtingAction'],BattleManager[_0x54b1a4(0x8e7)]=function(){const _0x5b6833=_0x54b1a4,_0x56e0af=this['_currentActor'];if(_0x56e0af&&!_0x56e0af[_0x5b6833(0x8e7)]()){const _0x3b5281=_0x56e0af[_0x5b6833(0x511)];_0x56e0af[_0x5b6833(0x955)][_0x3b5281]=new Game_Action(_0x56e0af);}return VisuMZ['BattleCore'][_0x5b6833(0x655)][_0x5b6833(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x526)]=BattleManager['checkSubstitute'],BattleManager[_0x54b1a4(0x349)]=function(_0x2e4984){const _0x48771e=_0x54b1a4;if(this[_0x48771e(0x65a)]['isForFriend']())return![];return VisuMZ[_0x48771e(0x387)][_0x48771e(0x526)][_0x48771e(0xd6c)](this,_0x2e4984);},SceneManager['isSceneBattle']=function(){const _0x4885f4=_0x54b1a4;return this[_0x4885f4(0xc22)]&&this[_0x4885f4(0xc22)][_0x4885f4(0x3ac)]===Scene_Battle;},SceneManager[_0x54b1a4(0xae0)]=function(){const _0x2b3d2a=_0x54b1a4;return Spriteset_Battle[_0x2b3d2a(0x375)]['isFlipped']();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x308c11=_0x54b1a4;if(SceneManager[_0x308c11(0xa5e)](Scene_Options))return!![];return![];},SceneManager[_0x54b1a4(0x59c)]=function(){const _0x299a91=_0x54b1a4;if(SceneManager[_0x299a91(0xc71)](Scene_Options))return!![];return![];},SceneManager[_0x54b1a4(0x9cd)]=function(_0xf8c318){const _0x2185f5=_0x54b1a4;if(!SceneManager[_0x2185f5(0xbbd)]())return!![];const _0x2a66df=[_0x2185f5(0x8e6),_0x2185f5(0xad5)];return _0x2a66df[_0x2185f5(0xd4a)](_0xf8c318['name']);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x50d)]=SceneManager[_0x54b1a4(0x519)],SceneManager[_0x54b1a4(0x519)]=function(_0x1d5c37){const _0x1deb26=_0x54b1a4;if(!SceneManager['checkSceneBattleTransitionable'](_0x1d5c37))return this[_0x1deb26(0x26c)](_0x1d5c37);VisuMZ['BattleCore']['SceneManager_push'][_0x1deb26(0xd6c)](this,_0x1d5c37);},SceneManager[_0x54b1a4(0x26c)]=function(_0x1d650e){const _0x97bdff=_0x54b1a4;if(!$gameTemp['isPlaytest']())return;if(this[_0x97bdff(0xdbf)])return;this[_0x97bdff(0xdbf)]=!![];let _0x3e11c4='';_0x3e11c4+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x3e11c4+='\x20to\x20%1\x20midbattle.'['format'](_0x1d650e['name']),alert(_0x3e11c4);},VisuMZ[_0x54b1a4(0x387)]['Game_Temp_requestAnimation']=Game_Temp[_0x54b1a4(0x375)][_0x54b1a4(0x89d)],Game_Temp[_0x54b1a4(0x375)][_0x54b1a4(0x89d)]=function(_0x1022d7,_0x56d96f,_0x393c07){const _0x5796eb=_0x54b1a4;_0x1022d7=_0x1022d7['filter']((_0x2e4ba7,_0x562649,_0x154b1d)=>_0x154b1d[_0x5796eb(0x940)](_0x2e4ba7)===_0x562649);if(SceneManager['isSceneBattle']()&&SceneManager['isBattleFlipped']()){if(_0x5796eb(0x85c)===_0x5796eb(0x720)){const _0x29566b=_0x25611c[_0x5796eb(0x387)][_0x5796eb(0xdae)][_0xed8be8],_0x120788={'code':0x2c,'dataId':_0x29566b,'value1':0x1,'value2':0x0};_0x327aec['effects'][_0x5796eb(0x519)](_0x120788);}else _0x393c07=!_0x393c07;}VisuMZ[_0x5796eb(0x387)][_0x5796eb(0x7d2)][_0x5796eb(0xd6c)](this,_0x1022d7,_0x56d96f,_0x393c07),SceneManager['isSceneBattle']()&&BattleManager[_0x5796eb(0xaca)][_0x5796eb(0xd01)]();},Game_Temp['prototype'][_0x54b1a4(0x46d)]=function(_0x5df29b){this['_lastPluginCommandInterpreter']=_0x5df29b;},Game_Temp['prototype']['getLastPluginCommandInterpreter']=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x54b1a4(0x375)][_0x54b1a4(0x7ae)]=function(){const _0xd4a7dc=_0x54b1a4;this[_0xd4a7dc(0xa99)]=undefined;},Game_Temp[_0x54b1a4(0x375)][_0x54b1a4(0x9cf)]=function(_0x5216f6){const _0x151d7b=_0x54b1a4;if($gameMap&&$dataMap&&$dataMap[_0x151d7b(0xd77)]){if(_0x151d7b(0xb15)===_0x151d7b(0x4f7)){const _0x4534bf=_0x2e89db[_0x151d7b(0xc22)][_0x151d7b(0x2d5)];_0x4534bf[_0x151d7b(0x340)](),_0x4534bf[_0x151d7b(0x936)](!![]),_0x4534bf[_0x151d7b(0x742)](),_0x4534bf[_0x151d7b(0x23a)]();const _0x2b8e48=_0x362b54['_scene'][_0x151d7b(0xd92)](),_0x17054f=['xp',_0x151d7b(0x7f7),'border'];if(_0x17054f[_0x151d7b(0xd4a)](_0x2b8e48)){const _0x1b9fd3=_0x2cd601['_scene']['_statusWindow'];_0x1b9fd3['scale']['y']=0x0;}}else this[_0x151d7b(0x905)]($dataMap[_0x151d7b(0xd77)]);}const _0x4c6de6=$dataTroops[_0x5216f6];if(_0x4c6de6){let _0x59a371=DataManager[_0x151d7b(0x6fa)](_0x4c6de6['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x59a371);}},Game_Temp[_0x54b1a4(0x375)]['parseForcedGameTroopSettingsBattleCore']=function(_0x2bb417){const _0x47482d=_0x54b1a4;if(!_0x2bb417)return;if(_0x2bb417[_0x47482d(0x298)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x15d8e4=String(RegExp['$1']);if(_0x15d8e4[_0x47482d(0x298)](/DEFAULT/i))this[_0x47482d(0xa99)]='default';else{if(_0x15d8e4[_0x47482d(0x298)](/LIST/i))this[_0x47482d(0xa99)]=_0x47482d(0xd3a);else{if(_0x15d8e4[_0x47482d(0x298)](/XP/i))this[_0x47482d(0xa99)]='xp';else{if(_0x15d8e4[_0x47482d(0x298)](/PORTRAIT/i))this[_0x47482d(0xa99)]=_0x47482d(0x7f7);else{if(_0x15d8e4[_0x47482d(0x298)](/BORDER/i))this[_0x47482d(0xa99)]=_0x47482d(0x218);else{if(_0x15d8e4[_0x47482d(0x298)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0x47482d(0x445)])this[_0x47482d(0xa99)]=_0x47482d(0x722);else{if(_0x47482d(0xc33)===_0x47482d(0xc33))this[_0x47482d(0xa99)]=_0x47482d(0x761);else{this['isAnimationShownOnBattlePortrait'](_0x1cb445)?this[_0x47482d(0x9c8)]()['removeChild'](_0x20da94):this[_0x47482d(0xaa4)]['removeChild'](_0x427929);this[_0x47482d(0x92c)][_0x47482d(0x4e3)](_0x179632),this[_0x47482d(0xaa4)]['removeChild'](_0x368d40),this[_0x47482d(0x67c)][_0x47482d(0xd79)](_0x2bbb81);if(this[_0x47482d(0x973)])this[_0x47482d(0x973)][_0x47482d(0xd79)](_0x14da22);}}}else{if(_0x15d8e4[_0x47482d(0x298)](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(Imported[_0x47482d(0x8ed)])this[_0x47482d(0xa99)]=_0x47482d(0x3a8);else{if(_0x47482d(0xbd5)!==_0x47482d(0xbd5)){const _0x374673=this[_0x47482d(0x4d9)](_0x586390),_0x56b8d0=new(_0x374673?_0x4999ab:_0x425488)(),_0x31ab5f=this[_0x47482d(0xa1b)](_0x39c166);this[_0x47482d(0x64a)](_0x37d6c4[0x0])&&(_0x37a2bc=!_0x5b762a),_0x56b8d0[_0x47482d(0x3d1)]=_0x3defa5,_0x56b8d0['setup'](_0x31ab5f,_0x2b7f27,_0x7df9fb,_0x37be8d),this[_0x47482d(0x561)](_0x56b8d0);}else this[_0x47482d(0xa99)]=_0x47482d(0x761);}}}}}}}}}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x3d6)]=Game_System[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)],Game_System[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)]=function(){const _0x4a6760=_0x54b1a4;VisuMZ[_0x4a6760(0x387)][_0x4a6760(0x3d6)][_0x4a6760(0xd6c)](this),this[_0x4a6760(0xd21)]();},Game_System[_0x54b1a4(0x375)][_0x54b1a4(0xd21)]=function(){const _0x29755b=_0x54b1a4;this[_0x29755b(0x2bd)]=this[_0x29755b(0x2bd)]||[];},Game_System[_0x54b1a4(0x375)][_0x54b1a4(0x70e)]=function(){const _0x383d44=_0x54b1a4;if(this[_0x383d44(0x2bd)]===undefined)this[_0x383d44(0xd21)]();return this[_0x383d44(0x2bd)];},Game_System['prototype']['registerDefeatedEnemy']=function(_0x4195a0){const _0x2f05e2=_0x54b1a4;if(this['_defeatedEnemies']===undefined)this[_0x2f05e2(0xd21)]();if(!_0x4195a0)return;if(this[_0x2f05e2(0x2bd)]['includes'](_0x4195a0))return;this[_0x2f05e2(0x2bd)]['push'](_0x4195a0),this[_0x2f05e2(0x2bd)][_0x2f05e2(0x496)]((_0x4ac6d8,_0x3b9bf1)=>_0x4ac6d8-_0x3b9bf1);},VisuMZ[_0x54b1a4(0x387)]['Game_BattlerBase_addNewState']=Game_BattlerBase['prototype'][_0x54b1a4(0xba9)],Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0xba9)]=function(_0x5195f2){const _0x4508ef=_0x54b1a4,_0x42b469=this[_0x4508ef(0x6a2)](),_0x530efc=this[_0x4508ef(0xb35)]();VisuMZ['BattleCore'][_0x4508ef(0xa8f)]['call'](this,_0x5195f2);if(this[_0x4508ef(0xc3c)]()&&_0x42b469&&this[_0x4508ef(0x5b2)]()){if(_0x4508ef(0xc3e)!==_0x4508ef(0xc3e)){if(this[_0x4508ef(0x631)]<=0x0)return;const _0x45147f=this[_0x4508ef(0x631)],_0xee92c5=this['_angleWholeDuration'],_0x495cdb=this[_0x4508ef(0xdab)];_0x257747[_0x4508ef(0x2e5)]?this[_0x4508ef(0x78d)]=this[_0x4508ef(0x8e0)](this[_0x4508ef(0x78d)],this[_0x4508ef(0xdcc)],_0x45147f,_0xee92c5,_0x495cdb):this['_currentAngle']=(this[_0x4508ef(0x78d)]*(_0x45147f-0x1)+this[_0x4508ef(0xdcc)])/_0x45147f;this['_angleDuration']--;if(this[_0x4508ef(0x631)]<=0x0)this['onAngleEnd']();}else this[_0x4508ef(0xd78)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x4508ef(0x705)](this[_0x4508ef(0x313)]());}SceneManager[_0x4508ef(0xbbd)]()&&_0x530efc!==this[_0x4508ef(0xb35)]()&&(this[_0x4508ef(0x887)]()&&this['battler']()['refreshMotion']());},Game_Enemy['prototype'][_0x54b1a4(0x3bf)]=function(){const _0x365cf1=_0x54b1a4;return $gameSystem[_0x365cf1(0x70e)]()[_0x365cf1(0xd4a)](this[_0x365cf1(0x787)]);},VisuMZ['BattleCore']['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x73f)],Game_BattlerBase[_0x54b1a4(0x375)]['eraseState']=function(_0x322cca){const _0x19a0c0=_0x54b1a4;VisuMZ[_0x19a0c0(0x387)]['Game_BattlerBase_eraseState'][_0x19a0c0(0xd6c)](this,_0x322cca);if(this[_0x19a0c0(0xc3c)]()&&_0x322cca===this[_0x19a0c0(0x243)]()&&this[_0x19a0c0(0x6a2)]()){if(_0x19a0c0(0xa3a)===_0x19a0c0(0xa3a))this[_0x19a0c0(0xd78)]=![];else{_0x24a425[_0x19a0c0(0x375)][_0x19a0c0(0xd2e)]['call'](this);const _0x3ab8f0=this[_0x19a0c0(0x2f3)][_0x19a0c0(0x925)]();this[_0x19a0c0(0x995)]!==_0x3ab8f0&&(this[_0x19a0c0(0x995)]=_0x3ab8f0,this[_0x19a0c0(0x4cb)][_0x19a0c0(0x65b)]=_0x36f143[_0x19a0c0(0x270)](_0x3ab8f0)),this[_0x19a0c0(0x4cb)]&&this[_0x19a0c0(0x4cb)][_0x19a0c0(0x65b)]&&this[_0x19a0c0(0xb7d)]&&(this[_0x19a0c0(0x4cb)][_0x19a0c0(0x65b)]['smooth']!==this['_battler'][_0x19a0c0(0x8d5)]()&&(this[_0x19a0c0(0x4cb)][_0x19a0c0(0x65b)][_0x19a0c0(0xd41)]=this[_0x19a0c0(0xb7d)][_0x19a0c0(0x8d5)]()));}}!this[_0x19a0c0(0xbe7)]&&!this[_0x19a0c0(0x774)]&&SceneManager[_0x19a0c0(0xbbd)]()&&this['requestMotionRefresh']();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x866)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x207)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x207)]=function(){const _0x153b62=_0x54b1a4;VisuMZ[_0x153b62(0x387)][_0x153b62(0x866)][_0x153b62(0xd6c)](this),this[_0x153b62(0x2ed)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x153b62(0x75d)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x153b62(0x712)]=_0x153b62(0x761),this[_0x153b62(0x412)]();},Game_Action['prototype'][_0x54b1a4(0x412)]=function(){const _0x23b8c0=_0x54b1a4;this[_0x23b8c0(0x687)]='';},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xc1f)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x4d2)],Game_Action['prototype'][_0x54b1a4(0x4d2)]=function(_0x523765){const _0x312635=_0x54b1a4;VisuMZ['BattleCore'][_0x312635(0xc1f)][_0x312635(0xd6c)](this,_0x523765),this[_0x312635(0x412)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x329)]=Game_Action['prototype'][_0x54b1a4(0x397)],Game_Action['prototype'][_0x54b1a4(0x397)]=function(_0x32bdd8){const _0x31c267=_0x54b1a4;VisuMZ[_0x31c267(0x387)][_0x31c267(0x329)][_0x31c267(0xd6c)](this,_0x32bdd8),this[_0x31c267(0x412)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x658)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x42e)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x42e)]=function(_0x170ac3){const _0x34d3f6=_0x54b1a4;VisuMZ[_0x34d3f6(0x387)][_0x34d3f6(0x658)][_0x34d3f6(0xd6c)](this,_0x170ac3),this[_0x34d3f6(0x412)]();},Game_Action[_0x54b1a4(0x375)]['makeDamageValue']=function(_0x3a4c33,_0x395ef7){const _0x3677ae=_0x54b1a4;return VisuMZ[_0x3677ae(0x387)][_0x3677ae(0x916)]['Damage'][_0x3677ae(0x817)][_0x3677ae(0xd6c)](this,_0x3a4c33,_0x395ef7);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x33c)]=function(_0x5447b8,_0x58b29c){const _0x506ee8=_0x54b1a4;return VisuMZ['BattleCore'][_0x506ee8(0x916)][_0x506ee8(0x5f5)][_0x506ee8(0x782)]['call'](this,_0x5447b8,_0x58b29c);},Game_Action['prototype'][_0x54b1a4(0x6bb)]=function(_0x1defd6,_0x2341f9){const _0x2fa84c=_0x54b1a4;return VisuMZ[_0x2fa84c(0x387)][_0x2fa84c(0x916)][_0x2fa84c(0x5f5)][_0x2fa84c(0x3e7)][_0x2fa84c(0xd6c)](this,_0x1defd6,_0x2341f9);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xc95)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xc95)]=function(_0x21bc7b){const _0x2ef069=_0x54b1a4,_0xf21ad9=this[_0x2ef069(0x7b6)]()[_0x2ef069(0xd77)];if(_0xf21ad9[_0x2ef069(0x298)](/<ALWAYS HIT>/i)){if(_0x2ef069(0xb58)!=='qatMr')_0x56e9bd[_0x2ef069(0x387)][_0x2ef069(0xa82)][_0x2ef069(0xd6c)](this,_0x4ef090,_0x416db9),this[_0x2ef069(0x955)][this[_0x2ef069(0x955)][_0x2ef069(0x69d)]-0x1][_0x2ef069(0x28b)]=!![];else return 0x1;}else{if(_0xf21ad9[_0x2ef069(0x298)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0x2ef069(0x740)===_0x2ef069(0x740))return Number(RegExp['$1'])/0x64;else{_0x4b6a64['prototype'][_0x2ef069(0x741)][_0x2ef069(0xd6c)](this);const _0x1d16a8=this[_0x2ef069(0xd92)]();_0x1d16a8===_0x2ef069(0x218)&&this[_0x2ef069(0x6ce)]();}}else{let _0x2a0037=VisuMZ['BattleCore'][_0x2ef069(0xa55)][_0x2ef069(0xd6c)](this,_0x21bc7b);return _0x2a0037=this[_0x2ef069(0x75d)][_0x2ef069(0x948)]*_0x2a0037+this[_0x2ef069(0x75d)][_0x2ef069(0x665)],_0x2a0037;}}},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x41d)]=function(_0x41b33e){const _0x53c897=_0x54b1a4;if(!this[_0x53c897(0x7b6)]()[_0x53c897(0x220)][_0x53c897(0xa1a)])return 0x0;let _0x17a250=VisuMZ['BattleCore'][_0x53c897(0x916)][_0x53c897(0x5f5)][_0x53c897(0x6f5)][_0x53c897(0xd6c)](this,_0x41b33e);return _0x17a250=this[_0x53c897(0x75d)][_0x53c897(0xb6f)]*_0x17a250+this['_multipliers'][_0x53c897(0x75c)],_0x17a250;},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xa69)]=function(_0x1f4734){const _0x48a493=_0x54b1a4;return _0x1f4734=VisuMZ['BattleCore'][_0x48a493(0x916)][_0x48a493(0x5f5)][_0x48a493(0x9e3)][_0x48a493(0xd6c)](this,_0x1f4734),_0x1f4734=this[_0x48a493(0x75d)]['criticalDmgRate']*_0x1f4734+this[_0x48a493(0x75d)][_0x48a493(0xcf4)],_0x1f4734;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x50e)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xaad)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xaad)]=function(_0x15f572){const _0x300e49=_0x54b1a4;if(this[_0x300e49(0x712)]!=='default')return this['customDamageFormula'](_0x15f572);else return DataManager['getDamageStyle'](this[_0x300e49(0x7b6)]())===_0x300e49(0x3e3)?VisuMZ[_0x300e49(0x387)][_0x300e49(0x50e)]['call'](this,_0x15f572):this[_0x300e49(0xce8)](_0x15f572);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x8ab)]=function(_0x3efba3){const _0x36bbfb=_0x54b1a4;this[_0x36bbfb(0x712)]=_0x3efba3;},Game_Action['prototype']['customDamageFormula']=function(_0x31e40e){const _0x27200d=_0x54b1a4,_0x5f0f0c=this['item'](),_0x4ee562=_0x5f0f0c[_0x27200d(0x220)]['formula'];_0x5f0f0c['damage'][_0x27200d(0x3a7)]=this[_0x27200d(0x712)];let _0xe3e415=VisuMZ[_0x27200d(0x387)][_0x27200d(0x50e)]['call'](this,_0x31e40e);return _0x5f0f0c['damage'][_0x27200d(0x3a7)]=_0x4ee562,_0xe3e415;},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x679)]=function(){const _0x4690af=_0x54b1a4;if(this['item']()[_0x4690af(0xd77)][_0x4690af(0x298)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x499f0f=String(RegExp['$1'])['toUpperCase']()[_0x4690af(0x2f4)]();return _0x499f0f;}return _0x4690af(0x3e3);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xce8)]=function(_0x5ae877){const _0x296ee8=_0x54b1a4,_0x10b2b0=DataManager[_0x296ee8(0x89b)](this[_0x296ee8(0x7b6)]()),_0x2899ee=VisuMZ[_0x296ee8(0x2eb)][_0x10b2b0];try{return _0x2899ee['Formula']['call'](this,_0x5ae877);}catch(_0x2fbf00){if(_0x296ee8(0x1f5)===_0x296ee8(0xb81)){if(!_0x2ab04c[_0x296ee8(0xbbd)]())return;if(!_0x4979b4['VisuMZ_3_BoostAction'])return;if(!_0x49d247[_0x296ee8(0x644)])return;_0x524a2a[_0x296ee8(0x97a)](_0x4d1671,_0x28c5f0);const _0x1e829b=_0x35d270[_0x296ee8(0xc94)];_0x27998d[_0x296ee8(0x265)](_0x1e829b,_0x5edc8c[_0x296ee8(0x644)][_0x296ee8(0x8b3)]());}else{if($gameTemp[_0x296ee8(0x3cd)]())console['log'](_0x2fbf00);return VisuMZ[_0x296ee8(0x387)]['Game_Action_evalDamageFormula']['call'](this);}}},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x87f)]=function(_0x50b67e,_0x18843a){const _0x1a4d14=_0x54b1a4;if(this[_0x1a4d14(0x88f)]())return _0x18843a;const _0x4dd3b7=this[_0x1a4d14(0xc0d)](),_0x3b65f9=_0x50b67e;let _0x2eb749=[],_0x54ce54=[];_0x2eb749[_0x1a4d14(0x519)](this['_armorPenetration'][_0x1a4d14(0x3f1)],this[_0x1a4d14(0x2ed)][_0x1a4d14(0x6fc)]),_0x54ce54[_0x1a4d14(0x519)](this[_0x1a4d14(0x2ed)]['arPenRate'],this['_armorPenetration'][_0x1a4d14(0xa0e)]);const _0x4cb9a6=this[_0x1a4d14(0x384)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3e5d5d=this[_0x1a4d14(0x384)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x56982b=this[_0x1a4d14(0x384)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x24ff15=this[_0x1a4d14(0x384)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x2eb749=_0x2eb749[_0x1a4d14(0x645)](_0x3b65f9[_0x1a4d14(0xba6)]()[_0x1a4d14(0x8bb)](_0x5d5e90=>_0x5d5e90&&_0x5d5e90['note'][_0x1a4d14(0x298)](_0x4cb9a6)?Number(RegExp['$1']):0x0)),_0x54ce54=_0x54ce54['concat'](_0x3b65f9[_0x1a4d14(0xba6)]()[_0x1a4d14(0x8bb)](_0x28cac2=>_0x28cac2&&_0x28cac2['note'][_0x1a4d14(0x298)](_0x3e5d5d)?Number(RegExp['$1'])/0x64:0x0)),_0x2eb749=_0x2eb749[_0x1a4d14(0x645)](_0x4dd3b7[_0x1a4d14(0xba6)]()[_0x1a4d14(0x8bb)](_0x36d7b4=>_0x36d7b4&&_0x36d7b4[_0x1a4d14(0xd77)][_0x1a4d14(0x298)](_0x56982b)?Number(RegExp['$1']):0x0)),_0x54ce54=_0x54ce54['concat'](_0x4dd3b7[_0x1a4d14(0xba6)]()[_0x1a4d14(0x8bb)](_0x2cf074=>_0x2cf074&&_0x2cf074['note'][_0x1a4d14(0x298)](_0x24ff15)?Number(RegExp['$1'])/0x64:0x0)),this[_0x1a4d14(0x7b6)]()[_0x1a4d14(0xd77)][_0x1a4d14(0x298)](_0x56982b)&&_0x2eb749[_0x1a4d14(0x519)](Number(RegExp['$1'])),this[_0x1a4d14(0x7b6)]()[_0x1a4d14(0xd77)][_0x1a4d14(0x298)](_0x24ff15)&&_0x54ce54['push'](Number(RegExp['$1'])),_0x18843a=_0x2eb749['reduce']((_0x56445e,_0x1bcfa2)=>_0x56445e-_0x1bcfa2,_0x18843a),_0x18843a>0x0&&(_0x18843a=_0x54ce54[_0x1a4d14(0x5b1)]((_0x33194c,_0x107d9f)=>_0x33194c*(0x1-_0x107d9f),_0x18843a)),_0x18843a;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x97c)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x3c4)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x3c4)]=function(_0x4944e5,_0x158a21){const _0x345444=_0x54b1a4;_0x158a21=_0x158a21*this[_0x345444(0x75d)]['damageRate'],_0x158a21+=this[_0x345444(0x75d)][_0x345444(0x204)]*(_0x158a21>=0x0?0x1:-0x1),_0x158a21=this[_0x345444(0x4d6)](_0x345444(0x747),_0x4944e5,_0x158a21,![]),_0x158a21=this['applyDamageCaps'](_0x158a21),_0x158a21=Math['round'](_0x158a21),this[_0x345444(0x30f)]=_0x158a21,this['_totalValue']=this['_totalValue']||0x0,this[_0x345444(0xcf3)]+=_0x158a21,VisuMZ[_0x345444(0x387)][_0x345444(0x97c)][_0x345444(0xd6c)](this,_0x4944e5,_0x158a21),this[_0x345444(0x4d6)](_0x345444(0x26a),_0x4944e5,_0x158a21,!![]);},Game_Action[_0x54b1a4(0x375)]['applyDamageCaps']=function(_0xe32337){const _0x35764d=_0x54b1a4;if(this['isBypassDamageCap']())return _0xe32337;return _0xe32337=this[_0x35764d(0xa91)](_0xe32337),_0xe32337=this[_0x35764d(0x8c1)](_0xe32337),_0xe32337;},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x857)]=function(){const _0x4c6dfa=_0x54b1a4,_0x4b0f89=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x4c6dfa(0xd77)]['match'](_0x4b0f89))return!![];if(this[_0x4c6dfa(0xc0d)]()[_0x4c6dfa(0xba6)]()[_0x4c6dfa(0xd19)](_0x7cbac9=>_0x7cbac9&&_0x7cbac9[_0x4c6dfa(0xd77)][_0x4c6dfa(0x298)](_0x4b0f89)))return!![];return!VisuMZ[_0x4c6dfa(0x387)]['Settings'][_0x4c6dfa(0x5f5)][_0x4c6dfa(0x67a)];},Game_Action['prototype'][_0x54b1a4(0xa91)]=function(_0x2886f0){const _0x45ca53=_0x54b1a4;if(!VisuMZ[_0x45ca53(0x387)][_0x45ca53(0x916)][_0x45ca53(0x5f5)][_0x45ca53(0x610)])return _0x2886f0;const _0x5d046e=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x45ca53(0x7b6)]()[_0x45ca53(0xd77)][_0x45ca53(0x298)](_0x5d046e))return _0x2886f0;if(this['subject']()[_0x45ca53(0xba6)]()[_0x45ca53(0xd19)](_0x4d715f=>_0x4d715f&&_0x4d715f[_0x45ca53(0xd77)][_0x45ca53(0x298)](_0x5d046e)))return _0x2886f0;const _0x5a8261=_0x2886f0<0x0?-0x1:0x1;_0x2886f0=Math[_0x45ca53(0x87d)](_0x2886f0);let _0x3262de=this['subject']()['softDamageCapRate']();this[_0x45ca53(0x7b6)]()[_0x45ca53(0xd77)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&('irAxO'===_0x45ca53(0x2e6)?_0x3262de+=Number(RegExp['$1'])/0x64:(this[_0x45ca53(0xabc)]=!![],_0x1a67e8[_0x45ca53(0x387)][_0x45ca53(0x544)][_0x45ca53(0xd6c)](this)));_0x3262de=_0x3262de[_0x45ca53(0x2cb)](0.01,0x1);const _0x5e8eb3=this[_0x45ca53(0xc6e)](),_0x577241=_0x3262de*_0x5e8eb3;if(_0x2886f0>_0x577241&&_0x5e8eb3>_0x577241){_0x2886f0-=_0x577241;const _0x3e13a9=VisuMZ[_0x45ca53(0x387)][_0x45ca53(0x916)][_0x45ca53(0x5f5)][_0x45ca53(0x31a)],_0x261b47=Math[_0x45ca53(0x9db)](0x1-_0x2886f0/((_0x5e8eb3-_0x577241)*_0x3e13a9+_0x2886f0),0.01);_0x2886f0*=_0x261b47,_0x2886f0+=_0x577241;}return _0x2886f0*_0x5a8261;},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xc6e)]=function(){const _0x3ca014=_0x54b1a4;if(this[_0x3ca014(0x7b6)]()[_0x3ca014(0xd77)][_0x3ca014(0x298)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x3ca014(0x982)===_0x3ca014(0x982))return Number(RegExp['$1']);else{if(_0x1ade17[_0x3ca014(0xbbd)]()){const _0x1c8720=this[_0x3ca014(0xd99)]();this[_0x3ca014(0x4c6)](_0x1c8720);}}}else{if(_0x3ca014(0x5f7)!=='VkVoy')_0x990a92[_0x3ca014(0xc6a)]('battleInjectPrep');else return this[_0x3ca014(0xc0d)]()[_0x3ca014(0x1e8)]();}},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x8c1)]=function(_0x25dfc7){console['log'](_0x25dfc7);let _0x513e6a=this['getHardDamageCap']();return _0x25dfc7['clamp'](-_0x513e6a,_0x513e6a);},Game_Action['prototype'][_0x54b1a4(0xd2d)]=function(){const _0x161905=_0x54b1a4;if(!this[_0x161905(0x7b6)]())return![];return(this[_0x161905(0x7b6)]()[_0x161905(0xd77)]||'')[_0x161905(0x298)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x2d7)]=function(_0xbafc4){const _0x43e6f9=_0x54b1a4;if(this[_0x43e6f9(0xd2d)]()){let _0x42db5f=BattleManager[_0x43e6f9(0x627)];_0xbafc4/=_0x42db5f[_0x43e6f9(0x69d)];if(this[_0x43e6f9(0x8a7)]()){if('IFztt'!==_0x43e6f9(0xce5))_0xbafc4*=this[_0x43e6f9(0xc0d)]()[_0x43e6f9(0x921)]()+0x1;else{if(!_0x34ead1[_0x43e6f9(0xbbd)]())return;_0x1a77b5[_0x43e6f9(0x97a)](_0x41b775,_0x1a6746);const _0x5a35b2=_0x157648[_0x43e6f9(0x859)](),_0x5699f0=_0x24baf1[_0x43e6f9(0x589)];if(!_0x5a35b2)return;_0x4ec6e8[_0x43e6f9(0x466)]--,_0x28922f[_0x43e6f9(0xaf2)]=_0x3b2cc7[_0x43e6f9(0x966)][_0x5dbf68['_targetIndex']]||null,_0x5a28d0[_0x43e6f9(0xaf2)]&&_0x5699f0[_0x43e6f9(0x8fd)]()[_0x43e6f9(0x2f4)]()!==_0x43e6f9(0x6bf)&&_0x5a35b2[_0x43e6f9(0x7bc)]([_0x5699f0]);}}_0xbafc4=_0xbafc4>0x0?Math[_0x43e6f9(0x8c0)](_0xbafc4):Math[_0x43e6f9(0x8a3)](_0xbafc4);}return _0xbafc4;},VisuMZ[_0x54b1a4(0x387)]['Game_Action_makeDamageValueDisperse']=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xc7e)],Game_Action[_0x54b1a4(0x375)]['makeDamageValue']=function(_0x32db9e,_0x46d13e){const _0x291a58=_0x54b1a4;let _0x40921d=VisuMZ['BattleCore'][_0x291a58(0x892)]['call'](this,_0x32db9e,_0x46d13e);return this[_0x291a58(0x2d7)](_0x40921d);},Game_Action[_0x54b1a4(0x375)]['itemEffectRecoverHp']=function(_0x15d1ab,_0x44af65){const _0x75b074=_0x54b1a4;let _0x5c0cd2=(_0x15d1ab['mhp']*_0x44af65[_0x75b074(0x587)]+_0x44af65[_0x75b074(0xb0f)])*_0x15d1ab[_0x75b074(0xa8b)];_0x5c0cd2=this[_0x75b074(0x2d7)](_0x5c0cd2);if(this['isItem']()){if(_0x75b074(0x7f2)===_0x75b074(0x7f2))_0x5c0cd2*=this['subject']()[_0x75b074(0x8de)];else{const _0xc1ba0b=_0x21d965[0x0][_0x75b074(0xd76)](_0x1909ca[0x0]),_0x5aa2ae=_0x516647[0x1][_0x75b074(0xd76)](_0xb61db0[0x1]),_0x4721aa=new _0x3cf2ff(_0x43a113[_0x75b074(0xd76)](_0x5aa2ae),'i');_0x1fd979[_0xc1ba0b]=_0x4721aa;}}_0x5c0cd2=Math['floor'](_0x5c0cd2),_0x5c0cd2!==0x0&&(_0x15d1ab[_0x75b074(0xc73)](_0x5c0cd2),this[_0x75b074(0x868)](_0x15d1ab));},Game_Action[_0x54b1a4(0x375)]['itemEffectRecoverMp']=function(_0x2d9bd2,_0x58ab74){const _0x539899=_0x54b1a4;let _0x31e614=(_0x2d9bd2[_0x539899(0x99a)]*_0x58ab74[_0x539899(0x587)]+_0x58ab74[_0x539899(0xb0f)])*_0x2d9bd2[_0x539899(0xa8b)];_0x31e614=this[_0x539899(0x2d7)](_0x31e614),this[_0x539899(0x9e5)]()&&(_0x31e614*=this[_0x539899(0xc0d)]()[_0x539899(0x8de)]),_0x31e614=Math[_0x539899(0x8a3)](_0x31e614),_0x31e614!==0x0&&(_0x2d9bd2[_0x539899(0x856)](_0x31e614),this[_0x539899(0x868)](_0x2d9bd2));},Game_Action[_0x54b1a4(0x375)]['itemEffectGainTp']=function(_0x4266e1,_0x37060b){const _0x4a90b8=_0x54b1a4;let _0x10b643=Math[_0x4a90b8(0x8a3)](_0x37060b[_0x4a90b8(0x587)]);_0x10b643=this['disperseDamage'](_0x10b643),_0x10b643!==0x0&&(_0x4266e1[_0x4a90b8(0x50b)](_0x10b643),this[_0x4a90b8(0x868)](_0x4266e1));},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x6ba)]=Game_Action['prototype']['apply'],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x961)]=function(_0x4ef2a5){const _0x4d4470=_0x54b1a4;this[_0x4d4470(0x4d6)](_0x4d4470(0xbe3),_0x4ef2a5,0x0,!![]),VisuMZ['BattleCore'][_0x4d4470(0x6ba)][_0x4d4470(0xd6c)](this,_0x4ef2a5),this[_0x4d4470(0x4d6)]('PostApply%1JS',_0x4ef2a5,this[_0x4d4470(0x30f)]||0x0,!![]),this['applyResultSwitches'](_0x4ef2a5);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x4d6)]=function(_0x36d108,_0x2d9955,_0x1af846,_0x1b5f96){const _0x3005a9=_0x54b1a4;if(this[_0x3005a9(0x774)]||this['_tempActor'])return;_0x1af846=_0x1af846||0x0;const _0x2fbfb3=_0x1af846,_0x39f995=VisuMZ[_0x3005a9(0x387)][_0x3005a9(0x916)][_0x3005a9(0xc86)],_0x2c4a1c=_0x36d108[_0x3005a9(0xd76)]('');if(_0x39f995[_0x2c4a1c]){_0x1af846=_0x39f995[_0x2c4a1c][_0x3005a9(0xd6c)](this,_0x1af846,_0x2d9955);if(_0x1b5f96)_0x1af846=_0x2fbfb3;}let _0x1cd4a0=VisuMZ[_0x3005a9(0x387)]['createKeyJS'](this[_0x3005a9(0x7b6)](),_0x36d108[_0x3005a9(0xd76)](''));if(VisuMZ[_0x3005a9(0x387)]['JS'][_0x1cd4a0]){_0x1af846=VisuMZ[_0x3005a9(0x387)]['JS'][_0x1cd4a0][_0x3005a9(0xd6c)](this,this[_0x3005a9(0xc0d)](),_0x2d9955,this['item'](),_0x1af846);if(_0x1b5f96)_0x1af846=_0x2fbfb3;}for(const _0x101bea of this['subject']()[_0x3005a9(0xba6)]()){if(!_0x101bea)continue;_0x1cd4a0=VisuMZ[_0x3005a9(0x387)]['createKeyJS'](_0x101bea,_0x36d108[_0x3005a9(0xd76)](_0x3005a9(0x77c)));if(VisuMZ[_0x3005a9(0x387)]['JS'][_0x1cd4a0]){_0x1af846=VisuMZ[_0x3005a9(0x387)]['JS'][_0x1cd4a0][_0x3005a9(0xd6c)](this,this[_0x3005a9(0xc0d)](),_0x2d9955,_0x101bea,_0x1af846);if(_0x1b5f96)_0x1af846=_0x2fbfb3;}}for(const _0xae693c of _0x2d9955[_0x3005a9(0xba6)]()){if(_0x3005a9(0xc81)!==_0x3005a9(0xc81)){const _0x32e0b6=this[_0x3005a9(0xa05)];if(_0x32e0b6[_0x501067])return _0x32e0b6[_0x12541e];else{const _0x130060=new _0x43de5a();return _0x32e0b6[_0x50f65f]=_0x130060,this[_0x3005a9(0x930)](_0x130060),this[_0x3005a9(0x930)](this[_0x3005a9(0xcbd)]),_0x130060;}}else{if(!_0xae693c)continue;_0x1cd4a0=VisuMZ[_0x3005a9(0x387)]['createKeyJS'](_0xae693c,_0x36d108[_0x3005a9(0xd76)](_0x3005a9(0x999)));if(VisuMZ[_0x3005a9(0x387)]['JS'][_0x1cd4a0]){_0x1af846=VisuMZ[_0x3005a9(0x387)]['JS'][_0x1cd4a0][_0x3005a9(0xd6c)](this,this['subject'](),_0x2d9955,_0xae693c,_0x1af846);if(_0x1b5f96)_0x1af846=_0x2fbfb3;}}}return _0x1af846;},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x33b)]=function(_0x179ef8){const _0x42e0c0=_0x54b1a4,_0x48ea24=this['_totalValue']||0x0,_0x189cc7=VisuMZ[_0x42e0c0(0x387)]['Settings'][_0x42e0c0(0xc86)],_0x164e17=_0x179ef8[_0x42e0c0(0xd76)]('');_0x189cc7[_0x164e17]&&(_0x42e0c0(0xb3d)===_0x42e0c0(0x70f)?_0x361ee5[_0x42e0c0(0x8ed)]?this[_0x42e0c0(0xa99)]=_0x42e0c0(0x3a8):this[_0x42e0c0(0xa99)]=_0x42e0c0(0x761):_0x189cc7[_0x164e17]['call'](this,_0x48ea24));let _0x2636c6=VisuMZ['BattleCore']['createKeyJS'](this[_0x42e0c0(0x7b6)](),_0x179ef8);VisuMZ[_0x42e0c0(0x387)]['JS'][_0x2636c6]&&(_0x42e0c0(0x59d)===_0x42e0c0(0xc13)?this[_0x42e0c0(0x79b)](_0x42e0c0(0xa11)):VisuMZ[_0x42e0c0(0x387)]['JS'][_0x2636c6][_0x42e0c0(0xd6c)](this,this['subject'](),this['subject'](),this[_0x42e0c0(0x7b6)](),_0x48ea24));for(const _0x24f16f of this['subject']()['traitObjects']()){if(!_0x24f16f)continue;_0x2636c6=VisuMZ[_0x42e0c0(0x387)][_0x42e0c0(0x82a)](_0x24f16f,_0x179ef8);if(VisuMZ[_0x42e0c0(0x387)]['JS'][_0x2636c6]){if(_0x42e0c0(0x45a)!==_0x42e0c0(0x45a)){this[_0x42e0c0(0xb94)](0x0,0x0,0x0,0x0);return;}else VisuMZ['BattleCore']['JS'][_0x2636c6]['call'](this,this[_0x42e0c0(0xc0d)](),this[_0x42e0c0(0xc0d)](),_0x24f16f,_0x48ea24);}}},Game_Action['prototype'][_0x54b1a4(0x9d1)]=function(){const _0x3562b1=_0x54b1a4;return VisuMZ['BattleCore'][_0x3562b1(0x916)]['Mechanics']['CalcActionSpeedJS'][_0x3562b1(0xd6c)](this);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xc36)]=function(){const _0x14820c=_0x54b1a4;return VisuMZ[_0x14820c(0x387)][_0x14820c(0x916)][_0x14820c(0xc86)][_0x14820c(0xce7)];},Game_Action[_0x54b1a4(0x375)]['isCustomBattleScope']=function(){const _0x529b0d=_0x54b1a4;if(this['_targetBattlerKey']==='all\x20actors')return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];if(!this[_0x529b0d(0x7b6)]())return![];return this[_0x529b0d(0x7b6)]()['note']['match'](/<JS TARGETS>/i);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x4d0)]=function(){const _0x591797=_0x54b1a4;if(this[_0x591797(0x687)]===_0x591797(0xbd3))return![];if(this[_0x591797(0x687)]===_0x591797(0x708))return![];if(!this[_0x591797(0xa73)]&&this[_0x591797(0xc0d)]()[_0x591797(0xaee)]())return![];if(this['isCustomBattleScope']())return!![];if(!this[_0x591797(0x7b6)]())return![];return typeof this['item']()[_0x591797(0x508)]===_0x591797(0xaaf);},VisuMZ[_0x54b1a4(0x387)]['Game_Action_isForOpponent']=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x801)],Game_Action['prototype'][_0x54b1a4(0x801)]=function(){const _0x5e4e53=_0x54b1a4;if(this[_0x5e4e53(0x687)]===_0x5e4e53(0xbd3))return![];if(this[_0x5e4e53(0x687)]===_0x5e4e53(0x708))return!![];if(this[_0x5e4e53(0x4d0)]()&&!this[_0x5e4e53(0x738)]()){if(_0x5e4e53(0xbc3)==='lqLjq')return this[_0x5e4e53(0x843)]();else{let _0x1a73fd=this[_0x5e4e53(0x2b3)](_0x3e7335);const _0x5f1675=this['fontSize'](),_0x2338db=_0x165330[_0x5e4e53(0x8a3)](_0x5f1675*0.75);for(let _0x5881a2=0x0;_0x5881a2<_0x1a73fd['length'];_0x5881a2++){const _0x342967=this[_0x5e4e53(0x5c3)](_0x2338db,_0x5f1675);_0x342967[_0x5e4e53(0x65b)]['drawText'](_0x1a73fd[_0x5881a2],0x0,0x0,_0x2338db,_0x5f1675,_0x5e4e53(0x8b9)),_0x342967['x']=(_0x5881a2-(_0x1a73fd[_0x5e4e53(0x69d)]-0x1)/0x2)*_0x2338db,_0x342967['dy']=-_0x5881a2;}}}else return VisuMZ[_0x5e4e53(0x387)][_0x5e4e53(0xd42)][_0x5e4e53(0xd6c)](this);},Game_Action[_0x54b1a4(0x375)]['isForOpponentBattleCore']=function(){const _0x41a342=_0x54b1a4,_0x243f69=this[_0x41a342(0x7b6)]()[_0x41a342(0x508)];return _0x243f69[_0x41a342(0x298)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xad8)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x677)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x677)]=function(){const _0x4242b0=_0x54b1a4;if(this['_targetBattlerKey']===_0x4242b0(0xbd3))return!![];if(this[_0x4242b0(0x687)]===_0x4242b0(0x708))return![];return this[_0x4242b0(0x4d0)]()&&!this[_0x4242b0(0x738)]()?this[_0x4242b0(0x50c)]():VisuMZ[_0x4242b0(0x387)][_0x4242b0(0xad8)][_0x4242b0(0xd6c)](this);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x50c)]=function(){const _0x33f6c7=_0x54b1a4,_0x9a90fa=this['item']()[_0x33f6c7(0x508)];return _0x9a90fa['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x579)]=function(){const _0x54ff58=_0x54b1a4;if(this[_0x54ff58(0x4d0)]()&&!this[_0x54ff58(0x738)]()){if(_0x54ff58(0xa86)!==_0x54ff58(0x73e)){const _0x509de5=this[_0x54ff58(0x7b6)]()['scope'];return _0x509de5[_0x54ff58(0x298)](/(?:ENEMY|FOE)/i)&&_0x509de5['match'](/OR/i)&&_0x509de5[_0x54ff58(0x298)](/(?:ALLY|FRIEND)/i);}else _0x20f524(_0x21fe20['format']('CTB')),_0x41eb48[_0x54ff58(0x3ca)]();}else return![];},Game_Action[_0x54b1a4(0x375)]['isForAnyoneFocusFriends']=function(){const _0x5a9843=_0x54b1a4;if(this[_0x5a9843(0x579)]()){const _0x182254=this['item']()[_0x5a9843(0x508)];if(_0x182254['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x351)]=function(){const _0x27592a=_0x54b1a4;if(this[_0x27592a(0x579)]()){if('NPpIV'!==_0x27592a(0x64e)){const _0x2506cb=this[_0x27592a(0x7b6)]()[_0x27592a(0x508)];if(_0x2506cb[_0x27592a(0x298)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}else _0x357143['BattleCore']['Game_Interpreter_terminate'][_0x27592a(0xd6c)](this),this['_preBattleCommonEvent']&&(this[_0x27592a(0x5b6)]=_0x57e4bd,_0x3f0cf6[_0x27592a(0xc22)]['battleCoreResumeLaunchBattle']());}return![];},VisuMZ['BattleCore']['Game_Action_isForAliveFriend']=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xb00)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xb00)]=function(){const _0x14d690=_0x54b1a4;return this[_0x14d690(0x4d0)]()&&!this[_0x14d690(0x738)]()?this[_0x14d690(0xb78)]():VisuMZ[_0x14d690(0x387)][_0x14d690(0x691)]['call'](this);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xb78)]=function(){const _0x3aff4e=_0x54b1a4;if(this[_0x3aff4e(0x579)]())return!![];return![];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xc9b)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x5cd)],Game_Action[_0x54b1a4(0x375)]['isForOne']=function(){const _0x374e37=_0x54b1a4;if(this[_0x374e37(0x687)]==='all\x20actors')return![];if(this[_0x374e37(0x687)]===_0x374e37(0x708))return![];if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()){if(_0x374e37(0x5c6)===_0x374e37(0x5c6))return this[_0x374e37(0x289)]();else{let _0x239a4d='battleUIOffsetY';if(this[_0x374e37(0x68c)](_0x239a4d))return this[_0x374e37(0x91d)][_0x239a4d];return this['_cache'][_0x239a4d]=this[_0x374e37(0x367)](this[_0x374e37(0x6fe)]()),this[_0x374e37(0x91d)][_0x239a4d];}}else return VisuMZ[_0x374e37(0x387)][_0x374e37(0xc9b)][_0x374e37(0xd6c)](this);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x289)]=function(){const _0x5c2209=_0x54b1a4;if(this[_0x5c2209(0x579)]())return!![];return![];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x4cc)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xb2a)],Game_Action[_0x54b1a4(0x375)]['isForRandom']=function(){const _0x375dce=_0x54b1a4;if(this[_0x375dce(0x687)]===_0x375dce(0xbd3))return![];if(this['_targetBattlerKey']===_0x375dce(0x708))return![];return this[_0x375dce(0x4d0)]()&&!this[_0x375dce(0x738)]()?_0x375dce(0xb95)==='pJUrX'?_0x13bf9c[_0x375dce(0xb1e)]()[_0x375dce(0x6a6)]():this[_0x375dce(0xc35)]():_0x375dce(0x4c1)===_0x375dce(0xc07)?this[_0x375dce(0x792)]()['some'](_0x2efc0f=>_0x2efc0f['isSkewing']()):VisuMZ[_0x375dce(0x387)][_0x375dce(0x4cc)][_0x375dce(0xd6c)](this);},Game_Action[_0x54b1a4(0x375)]['isForRandomBattleCore']=function(){const _0x52fb34=_0x54b1a4,_0x7e0aeb=this[_0x52fb34(0x7b6)]()[_0x52fb34(0x508)];return _0x7e0aeb['match'](/(?:RAND|RANDOM)/i);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xce6)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xc53)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xc53)]=function(){const _0x3e9f62=_0x54b1a4;if(this[_0x3e9f62(0x687)]===_0x3e9f62(0xbd3))return!![];if(this[_0x3e9f62(0x687)]===_0x3e9f62(0x708))return!![];return VisuMZ['BattleCore']['Game_Action_isForAll'][_0x3e9f62(0xd6c)](this);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xd45)]=function(){const _0x411d7a=_0x54b1a4;if(!this[_0x411d7a(0x7b6)]())return![];if(this[_0x411d7a(0xd9e)]())return![];return(this[_0x411d7a(0x7b6)]()[_0x411d7a(0xd77)]||'')[_0x411d7a(0x298)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x73b)]=Game_Action[_0x54b1a4(0x375)]['needsSelection'],Game_Action['prototype'][_0x54b1a4(0x21d)]=function(){const _0x5e2a62=_0x54b1a4;return this[_0x5e2a62(0x4d0)]()&&!this[_0x5e2a62(0x738)]()?this[_0x5e2a62(0x2cc)]():VisuMZ[_0x5e2a62(0x387)]['Game_Action_needsSelection'][_0x5e2a62(0xd6c)](this);},Game_Action['prototype'][_0x54b1a4(0x2cc)]=function(){const _0x7699ac=_0x54b1a4,_0x6b7b99=this['item']()[_0x7699ac(0x508)];if(_0x6b7b99[_0x7699ac(0x298)](/RANDOM/i))return![];if(_0x6b7b99[_0x7699ac(0x298)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x6b7b99[_0x7699ac(0x298)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x6b7b99['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x6b7b99[_0x7699ac(0x298)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x7699ac(0x387)][_0x7699ac(0x73b)][_0x7699ac(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)]['Game_Action_makeTargets']=Game_Action['prototype'][_0x54b1a4(0x4f9)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x4f9)]=function(){const _0x4badea=_0x54b1a4;let _0x516606=[];if(this[_0x4badea(0x4d0)]()){if(this[_0x4badea(0x738)]())_0x4badea(0x716)!==_0x4badea(0x716)?(this[_0x4badea(0x82e)][_0x4badea(0x519)](_0x4badea(0xcd7),_0x1634ed[_0x4badea(0x5b8)][_0x4badea(0xd76)](_0x5cb7a9)),this[_0x4badea(0x82e)][_0x4badea(0x519)](_0x4badea(0x755)),_0x3984e0=!![]):_0x516606=this['makeTargetsBattleCoreJS']();else{if(_0x4badea(0x99e)!==_0x4badea(0x99e)){if(!_0x4c0d7a['isSceneBattle']())return;const _0x2a21ac=_0x1e763d['getLastPluginCommandInterpreter'](),_0x7498f7=_0x1d448d[_0x4badea(0x82e)];_0x7498f7[_0x4badea(0xae5)](),_0x2a21ac['setWaitMode'](_0x4badea(0xc00));}else _0x516606=this[_0x4badea(0xcb5)]();}}else{if(_0x4badea(0xd9d)!==_0x4badea(0xd9d)){if(_0x5def2f['_animation'][_0x4badea(0x494)]===0x3)return![];}else _0x516606=VisuMZ['BattleCore']['Game_Action_makeTargets']['call'](this);}return _0x516606=this['applyTargetFilters'](_0x516606),_0x516606;},Game_Action['prototype']['isSubjectValidForAnyoneSelect']=function(){const _0x31f923=_0x54b1a4;return this['subject']()[_0x31f923(0xa2c)]()&&!this[_0x31f923(0xc0d)]()[_0x31f923(0x811)]();},Game_Action[_0x54b1a4(0x375)]['makeTargetsBattleCoreJS']=function(){const _0x4123d5=_0x54b1a4,_0x6537df=VisuMZ[_0x4123d5(0x387)][_0x4123d5(0x82a)](this['item'](),'Targets');if(VisuMZ[_0x4123d5(0x387)]['JS'][_0x6537df]){targets=VisuMZ[_0x4123d5(0x387)]['Game_Action_makeTargets'][_0x4123d5(0xd6c)](this);const _0x1cd06f=VisuMZ['BattleCore'][_0x4123d5(0x82a)](this[_0x4123d5(0x7b6)](),_0x4123d5(0x2f2));return targets=VisuMZ[_0x4123d5(0x387)]['JS'][_0x1cd06f][_0x4123d5(0xd6c)](this,this['subject'](),targets),this['repeatTargets'](targets);}return this[_0x4123d5(0xcb5)]();},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0xcb5)]=function(){const _0x1b015f=_0x54b1a4;let _0x39e1e4=[];const _0x2d7955=String(this['item']()[_0x1b015f(0x508)]);if(this['isForAnyoneFocusOpponents']()){if(_0x1b015f(0x52e)===_0x1b015f(0xdac))return!![];else{if(this[_0x1b015f(0x564)]()){if(_0x1b015f(0xd66)!==_0x1b015f(0xb4f))return _0x39e1e4=this[_0x1b015f(0x4f0)](),this[_0x1b015f(0x94c)](_0x39e1e4);else{if(this[_0x1b015f(0x91d)][_0x1b015f(0x1e8)]!==_0x2c4e72)return this[_0x1b015f(0x91d)][_0x1b015f(0x1e8)];const _0x51d752=/<DAMAGE CAP:[ ](\d+)>/i,_0x2bf20c=this['traitObjects']()[_0x1b015f(0x8bb)](_0x5acba3=>_0x5acba3&&_0x5acba3['note']['match'](_0x51d752)?_0x3f9f5b(_0x41db7b['$1']):0x0);let _0x28aec1=_0x2bf20c[_0x1b015f(0x69d)]>0x0?_0x48b9c7[_0x1b015f(0x9db)](..._0x2bf20c):0x0;if(_0x28aec1<=0x0)_0x28aec1=_0x4fd561[_0x1b015f(0x387)][_0x1b015f(0x916)][_0x1b015f(0x5f5)]['DefaultHardCap'];return this[_0x1b015f(0x91d)]['hardDamageCap']=_0x28aec1,this['_cache']['hardDamageCap'];}}else{if('kIZsC'!==_0x1b015f(0x6ed)){const _0x4bd55c=this[_0x1b015f(0xb8b)];this[_0x1b015f(0x54c)]=this[_0x1b015f(0x54c)]*(_0x4bd55c-0x1)/_0x4bd55c,this[_0x1b015f(0xb8b)]--,this['_shakeFlinchDuration']<=0x0&&(this[_0x1b015f(0x54c)]=0x0);}else return this[_0x1b015f(0x466)]=-0x1,_0x39e1e4[_0x1b015f(0x519)](...this['targetsForOpponents']()),this[_0x1b015f(0x94c)](_0x39e1e4);}}}if(this[_0x1b015f(0x74b)]()){if(this[_0x1b015f(0x564)]())return _0x39e1e4=this[_0x1b015f(0x4f0)](),this[_0x1b015f(0x94c)](_0x39e1e4);else{if(Imported[_0x1b015f(0x22a)]){if(VisuMZ[_0x1b015f(0x7cb)]['version']<1.19){if(_0x1b015f(0x379)!==_0x1b015f(0x379))_0x3ef6c2[_0x1b015f(0x265)](_0x2e7fec[_0x1b015f(0x854)],0x0);else{let _0x1b8f95='';_0x1b8f95+=_0x1b015f(0xc58),_0x1b8f95+=_0x1b015f(0xc63),_0x1b8f95+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x1b8f95),SceneManager[_0x1b015f(0x3ca)]();}}}return this['_targetIndex']=-0x1,_0x39e1e4['push'](...this[_0x1b015f(0x7ed)]()),this[_0x1b015f(0x94c)](_0x39e1e4);}}if(_0x2d7955[_0x1b015f(0x298)](/(\d+) RANDOM ANY/i)){let _0x4595e0=Number(RegExp['$1']);while(_0x4595e0--){const _0x3710a7=Math[_0x1b015f(0xcf9)](0x2)===0x0?this[_0x1b015f(0xb1e)]():this[_0x1b015f(0x581)]();_0x39e1e4[_0x1b015f(0x519)](_0x3710a7[_0x1b015f(0xab2)]());}return this['repeatTargets'](_0x39e1e4);}if(_0x2d7955['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x460f0a=Number(RegExp['$1']);while(_0x460f0a--){_0x39e1e4[_0x1b015f(0x519)](this[_0x1b015f(0xb1e)]()[_0x1b015f(0xab2)]());}return this[_0x1b015f(0x94c)](_0x39e1e4);}if(_0x2d7955[_0x1b015f(0x298)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x1b015f(0x3ec)==='TrOVn'){let _0x53cb97=Number(RegExp['$1']);while(_0x53cb97--){_0x1b015f(0x2a4)===_0x1b015f(0x527)?(_0x4612cd=_0x56716b[_0x1b015f(0x661)]((_0x3aeefa,_0x4efb0a,_0x3f7c72)=>_0x3f7c72[_0x1b015f(0x940)](_0x3aeefa)===_0x4efb0a),_0x337a5f[_0x1b015f(0xbbd)]()&&_0x3c0ef2[_0x1b015f(0xae0)]()&&(_0x1a19d0=!_0x1637e5),_0x2763ba[_0x1b015f(0x387)][_0x1b015f(0x7d2)][_0x1b015f(0xd6c)](this,_0x4cdbd0,_0x4c21e3,_0x123f69),_0x35703f['isSceneBattle']()&&_0x504606[_0x1b015f(0xaca)][_0x1b015f(0xd01)]()):_0x39e1e4[_0x1b015f(0x519)](this['friendsUnit']()[_0x1b015f(0xab2)]());}return this[_0x1b015f(0x94c)](_0x39e1e4);}else return this[_0x1b015f(0xc35)]();}if(_0x2d7955[_0x1b015f(0x298)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x39e1e4[_0x1b015f(0x519)](...this['friendsUnit']()[_0x1b015f(0x6a6)]()[_0x1b015f(0x661)](_0x17811c=>_0x17811c!==this['subject']())),this[_0x1b015f(0x94c)](_0x39e1e4);return VisuMZ[_0x1b015f(0x387)]['Game_Action_makeTargets'][_0x1b015f(0xd6c)](this);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x7ab)]=function(_0x9fccc0){const _0x1ca9a6=_0x54b1a4,_0x4515e2=[];for(let _0x22202d=0x0;_0x22202d<this['numTargets']();_0x22202d++){_0x4515e2[_0x1ca9a6(0x519)](_0x9fccc0[_0x1ca9a6(0xab2)]());}return _0x4515e2;},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x212)]=function(_0x381b92){const _0x2007ce=_0x54b1a4;if(!this[_0x2007ce(0x7b6)]())return _0x381b92;const _0x69ff75=this[_0x2007ce(0x7b6)]()[_0x2007ce(0xd77)];return _0x69ff75[_0x2007ce(0x298)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x381b92[_0x2007ce(0xd79)](this[_0x2007ce(0xc0d)]()),_0x381b92;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x75e)]=Game_Action['prototype']['itemEffectAddAttackState'],Game_Action['prototype'][_0x54b1a4(0x203)]=function(_0x20a8b8,_0x163ccc){const _0x5c6eba=_0x54b1a4;VisuMZ[_0x5c6eba(0x387)][_0x5c6eba(0x75e)][_0x5c6eba(0xd6c)](this,_0x20a8b8,_0x163ccc);if(!_0x20a8b8[_0x5c6eba(0xdaa)]())return;for(const _0x49b89b of this[_0x5c6eba(0xc0d)]()['attackStates']()){if(_0x49b89b===_0x20a8b8[_0x5c6eba(0x243)]()){let _0x2c2d87=_0x163ccc['value1'];_0x2c2d87*=_0x20a8b8[_0x5c6eba(0x3a9)](_0x49b89b),_0x2c2d87*=this[_0x5c6eba(0xc0d)]()[_0x5c6eba(0x7de)](_0x49b89b),_0x2c2d87*=this[_0x5c6eba(0xb80)](_0x20a8b8),Math[_0x5c6eba(0xc4b)]()<_0x2c2d87&&(_0x20a8b8[_0x5c6eba(0x528)]=!![],this['makeSuccess'](_0x20a8b8));}}},VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState']=Game_Action['prototype'][_0x54b1a4(0xb4e)],Game_Action['prototype'][_0x54b1a4(0xb4e)]=function(_0x2cf4cf,_0x42e12d){const _0x34bae0=_0x54b1a4;VisuMZ[_0x34bae0(0x387)][_0x34bae0(0x74c)]['call'](this,_0x2cf4cf,_0x42e12d);if(!_0x2cf4cf[_0x34bae0(0xdaa)]())return;if(_0x42e12d[_0x34bae0(0x3de)]!==_0x2cf4cf[_0x34bae0(0x243)]())return;let _0x2cab61=_0x42e12d[_0x34bae0(0x587)];!this[_0x34bae0(0x88f)]()&&(_0x34bae0(0x7b9)==='WcPUW'?(_0x87831c['BattleCore']['BattleManager_setup'][_0x34bae0(0xd6c)](this,_0x16b279,_0x475f39,_0x50d6eb),this['_battlerKeyCache']={}):(_0x2cab61*=_0x2cf4cf[_0x34bae0(0x3a9)](_0x42e12d['dataId']),_0x2cab61*=this[_0x34bae0(0xb80)](_0x2cf4cf))),Math[_0x34bae0(0xc4b)]()<_0x2cab61&&(_0x2cf4cf['_deathStateApplied']=!![],this[_0x34bae0(0x868)](_0x2cf4cf));},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x845)]=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x503)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x503)]=function(){const _0x355540=_0x54b1a4;VisuMZ[_0x355540(0x387)][_0x355540(0x845)][_0x355540(0xd6c)](this),this[_0x355540(0xcdf)](),this[_0x355540(0x5f2)]();},Game_Action[_0x54b1a4(0x375)]['applyGlobalCommonEventNotetags']=function(){const _0x1acebd=_0x54b1a4;if(!SceneManager[_0x1acebd(0xbbd)]())return;const _0x424ef=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x434623=this[_0x1acebd(0x7b6)]()[_0x1acebd(0xd77)][_0x1acebd(0x298)](_0x424ef);if(_0x434623)for(const _0x4ba3d9 of _0x434623){if(!_0x4ba3d9)continue;_0x4ba3d9[_0x1acebd(0x298)](_0x424ef);const _0x10f4aa=String(RegExp['$1'])['split'](',')[_0x1acebd(0x8bb)](_0x5115c0=>String(_0x5115c0)['trim']()),_0x16031d=_0x10f4aa[_0x1acebd(0x8bb)](_0x178b34=>DataManager[_0x1acebd(0x577)](_0x178b34));for(const _0x1d1d18 of _0x16031d){const _0x3f67e8=$dataCommonEvents[_0x1d1d18];if(_0x3f67e8){if('TTzoK'===_0x1acebd(0xb3a))$gameTemp['reserveCommonEvent'](_0x1d1d18);else return![];}}}},DataManager[_0x54b1a4(0x577)]=function(_0x49213a){const _0x507884=_0x54b1a4;_0x49213a=_0x49213a[_0x507884(0x8fd)]()[_0x507884(0x2f4)](),this[_0x507884(0x5de)]=this['_commonEventIDs']||{};if(this['_commonEventIDs'][_0x49213a])return this[_0x507884(0x5de)][_0x49213a];for(const _0x25797a of $dataCommonEvents){if('VtpRn'!==_0x507884(0xa10)){if(!_0x25797a)continue;let _0x3da9ae=_0x25797a[_0x507884(0x56b)];_0x3da9ae=_0x3da9ae['replace'](/\x1I\[(\d+)\]/gi,''),_0x3da9ae=_0x3da9ae[_0x507884(0x68b)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x3da9ae[_0x507884(0x8fd)]()[_0x507884(0x2f4)]()]=_0x25797a['id'];}else return this['parent']?this[_0x507884(0x7bd)]['_offsetX']===0x0&&this[_0x507884(0x7bd)][_0x507884(0x4b1)]===0x0:!![];}return this[_0x507884(0x5de)][_0x49213a]||0x0;},Game_Action['prototype'][_0x54b1a4(0x5f2)]=function(){const _0x150b7a=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;const _0x3e7f75=VisuMZ[_0x150b7a(0x387)][_0x150b7a(0x916)][_0x150b7a(0xc86)];_0x3e7f75[_0x150b7a(0x9bc)]&&$gameSwitches['setValue'](_0x3e7f75[_0x150b7a(0x9bc)],![]),_0x3e7f75[_0x150b7a(0x261)]&&$gameSwitches['setValue'](_0x3e7f75['SwitchMissEvade'],![]),_0x3e7f75[_0x150b7a(0x60b)]&&('rolZT'===_0x150b7a(0x4de)?$gameVariables['setValue'](_0x3e7f75[_0x150b7a(0x60b)],0x0):this[_0x150b7a(0x79b)](_0x150b7a(0xa11))),_0x3e7f75[_0x150b7a(0x854)]&&$gameVariables[_0x150b7a(0x265)](_0x3e7f75[_0x150b7a(0x854)],0x0);},Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x51c)]=function(_0x4af8cd){const _0xee38cc=_0x54b1a4;if(!SceneManager[_0xee38cc(0xbbd)]())return;if(!_0x4af8cd)return;const _0x527e8a=_0x4af8cd['result'](),_0x106ed4=VisuMZ[_0xee38cc(0x387)]['Settings']['Mechanics'];_0x106ed4[_0xee38cc(0x9bc)]&&_0x527e8a[_0xee38cc(0xa1a)]&&('zTBdg'!==_0xee38cc(0x5b9)?_0x2da69a=_0x28e73f['CastMagical']:$gameSwitches[_0xee38cc(0x265)](_0x106ed4[_0xee38cc(0x9bc)],!![]));_0x106ed4['SwitchMissEvade']&&(_0x527e8a['missed']||_0x527e8a[_0xee38cc(0x6cd)])&&$gameSwitches['setValue'](_0x106ed4[_0xee38cc(0x261)],!![]);if(_0x106ed4['VariableDmg']){if(_0xee38cc(0xd91)!=='IhZTf'){const _0x3b5c2f=_0x5b2723[_0xee38cc(0x387)][_0xee38cc(0x82a)](this['item'](),_0xee38cc(0x2f2));if(_0x22c4d9[_0xee38cc(0x387)]['JS'][_0x3b5c2f]){_0x5d47c0=_0x284f09[_0xee38cc(0x387)][_0xee38cc(0x268)]['call'](this);const _0x8eb780=_0x47e6c3[_0xee38cc(0x387)][_0xee38cc(0x82a)](this[_0xee38cc(0x7b6)](),_0xee38cc(0x2f2));return _0x4b10a7=_0x21f87a[_0xee38cc(0x387)]['JS'][_0x8eb780][_0xee38cc(0xd6c)](this,this['subject'](),_0x36401d),this[_0xee38cc(0x94c)](_0x15148e);}return this[_0xee38cc(0xcb5)]();}else{let _0x5cf2d9=$gameVariables[_0xee38cc(0x9e0)](_0x106ed4['VariableDmg']);_0x527e8a[_0xee38cc(0x5be)]>0x0&&(_0xee38cc(0x2cf)===_0xee38cc(0x2cf)?_0x5cf2d9+=Math[_0xee38cc(0x87d)](_0x527e8a[_0xee38cc(0x5be)]):this['initialize'](...arguments)),$gameVariables[_0xee38cc(0x265)](_0x106ed4[_0xee38cc(0x60b)],_0x5cf2d9);}}if(_0x106ed4[_0xee38cc(0x854)]){if(_0xee38cc(0xa9e)===_0xee38cc(0xadd))return _0xac8a67['BattleCore'][_0xee38cc(0x916)][_0xee38cc(0x2c1)][_0xee38cc(0x524)]||![];else{let _0x4fdb64=$gameVariables[_0xee38cc(0x9e0)](_0x106ed4[_0xee38cc(0x854)]);_0x527e8a[_0xee38cc(0x5be)]<0x0&&(_0x4fdb64+=Math['abs'](_0x527e8a[_0xee38cc(0x5be)])),$gameVariables[_0xee38cc(0x265)](_0x106ed4[_0xee38cc(0x854)],_0x4fdb64);}}},VisuMZ['BattleCore'][_0x54b1a4(0x4bd)]=Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x900)],Game_BattlerBase['prototype'][_0x54b1a4(0x900)]=function(){const _0x4bfe32=_0x54b1a4;VisuMZ['BattleCore']['Game_BattlerBase_initMembers']['call'](this),this[_0x4bfe32(0x3ee)]();},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x3ee)]=function(){const _0x175890=_0x54b1a4;this[_0x175890(0x4d3)]=![];},VisuMZ['BattleCore'][_0x54b1a4(0x7ff)]=Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x742)],Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x742)]=function(){const _0x371e49=_0x54b1a4;this[_0x371e49(0x91d)]={},VisuMZ[_0x371e49(0x387)]['Game_BattlerBase_refresh'][_0x371e49(0xd6c)](this);},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x68c)]=function(_0x571440){const _0x2ed217=_0x54b1a4;return this[_0x2ed217(0x91d)]=this[_0x2ed217(0x91d)]||{},this[_0x2ed217(0x91d)][_0x571440]!==undefined;},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x1e8)]=function(){const _0x313178=_0x54b1a4;if(this[_0x313178(0x91d)][_0x313178(0x1e8)]!==undefined)return this[_0x313178(0x91d)][_0x313178(0x1e8)];const _0x21fd19=/<DAMAGE CAP:[ ](\d+)>/i,_0x5efc6e=this[_0x313178(0xba6)]()[_0x313178(0x8bb)](_0x1c4e84=>_0x1c4e84&&_0x1c4e84['note'][_0x313178(0x298)](_0x21fd19)?Number(RegExp['$1']):0x0);let _0xde62df=_0x5efc6e[_0x313178(0x69d)]>0x0?Math['max'](..._0x5efc6e):0x0;if(_0xde62df<=0x0)_0xde62df=VisuMZ[_0x313178(0x387)][_0x313178(0x916)][_0x313178(0x5f5)][_0x313178(0xc52)];return this[_0x313178(0x91d)][_0x313178(0x1e8)]=_0xde62df,this[_0x313178(0x91d)]['hardDamageCap'];},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x2e0)]=function(){const _0x389ce9=_0x54b1a4;if(this[_0x389ce9(0x91d)][_0x389ce9(0x92e)]!==undefined)return this[_0x389ce9(0x91d)][_0x389ce9(0x92e)];let _0x3c6c86=VisuMZ[_0x389ce9(0x387)][_0x389ce9(0x916)][_0x389ce9(0x5f5)][_0x389ce9(0xb31)];const _0x35c270=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x3fb067=this[_0x389ce9(0xba6)]()['map'](_0x4d73fb=>_0x4d73fb&&_0x4d73fb[_0x389ce9(0xd77)][_0x389ce9(0x298)](_0x35c270)?Number(RegExp['$1'])/0x64:0x0);return _0x3c6c86=_0x3fb067[_0x389ce9(0x5b1)]((_0xf9b5fc,_0x592d88)=>_0xf9b5fc+_0x592d88,_0x3c6c86),this[_0x389ce9(0x91d)][_0x389ce9(0x92e)]=_0x3c6c86,this['_cache']['softDamageCap']['clamp'](0.01,0x1);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x2de)]=Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x2d8)],Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x2d8)]=function(){const _0x20d4c1=_0x54b1a4;VisuMZ[_0x20d4c1(0x387)]['Game_BattlerBase_die'][_0x20d4c1(0xd6c)](this),SceneManager['isSceneBattle']()&&this[_0x20d4c1(0x676)](_0x20d4c1(0x904));},Game_BattlerBase['prototype'][_0x54b1a4(0x887)]=function(){const _0x8b0eb0=_0x54b1a4;if(!SceneManager[_0x8b0eb0(0xbbd)]())return null;if(!SceneManager['_scene'][_0x8b0eb0(0xaca)])return null;return SceneManager[_0x8b0eb0(0xc22)][_0x8b0eb0(0xaca)][_0x8b0eb0(0x459)](this);},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x5ec)]=function(){const _0x11dde1=_0x54b1a4;return VisuMZ[_0x11dde1(0x387)][_0x11dde1(0x916)][_0x11dde1(0x2c1)][_0x11dde1(0x54d)];},Game_BattlerBase['prototype']['svBattlerAnchorY']=function(){const _0x425987=_0x54b1a4;return VisuMZ[_0x425987(0x387)][_0x425987(0x916)]['Actor'][_0x425987(0x97f)];},Game_BattlerBase[_0x54b1a4(0x375)]['svBattlerShadowVisible']=function(){const _0x2945a2=_0x54b1a4;if(this[_0x2945a2(0xa2c)]&&this['isActor']())return _0x2945a2(0x2d4)!==_0x2945a2(0x2d4)?this[_0x2945a2(0x581)]()[_0x2945a2(0xab2)]():VisuMZ[_0x2945a2(0x387)][_0x2945a2(0x916)][_0x2945a2(0x2c1)][_0x2945a2(0x1f9)];else{if('MRZoF'===_0x2945a2(0x592))return VisuMZ['BattleCore'][_0x2945a2(0x916)][_0x2945a2(0x809)]['Shadow'];else{const _0x3b386b=_0x498e10[_0x1aeb92];_0x3b386b&&_0x1de27c[_0x2945a2(0x69e)](_0xd2bb06);}}},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x8d5)]=function(){return!![];},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0xa27)]=function(){return 0x0;},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x673)]=function(){return 0x0;},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0xac1)]=function(_0x466dd8){const _0x33a0a3=_0x54b1a4;if(!_0x466dd8)return 0x0;let _0x52d2f6=0x0;const _0x176d10=_0x466dd8['note'];return _0x176d10[_0x33a0a3(0x298)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x52d2f6+=Number(RegExp['$1'])),_0x176d10[_0x33a0a3(0x298)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x52d2f6+=Number(RegExp['$1'])),_0x52d2f6;},Game_BattlerBase[_0x54b1a4(0x375)]['createBattleUIOffsetY']=function(_0x5bdb44){const _0x2ae536=_0x54b1a4;if(!_0x5bdb44)return 0x0;let _0x535fab=0x0;const _0x5aa940=_0x5bdb44['note'];return _0x5aa940['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x535fab+=Number(RegExp['$1'])),_0x5aa940[_0x2ae536(0x298)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x535fab+=Number(RegExp['$2'])),_0x535fab;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xb1b)]=Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x7d1)],Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x7d1)]=function(_0x534534){const _0x36557=_0x54b1a4;if(_0x534534===this[_0x36557(0x243)]()&&this[_0x36557(0xdaa)]()){if(_0x36557(0xd0f)===_0x36557(0xb0b)){const _0x548111=this[_0x36557(0x2f3)][_0x36557(0x719)]();for(const _0x18de6d of _0x548111){this['addSkillTypeCommand'](_0x18de6d);}}else return!![];}return VisuMZ['BattleCore'][_0x36557(0xb1b)][_0x36557(0xd6c)](this,_0x534534);},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0xdaa)]=function(){const _0x3bc7f9=_0x54b1a4;return this[_0x3bc7f9(0x4d3)];},Game_BattlerBase[_0x54b1a4(0x375)]['setImmortal']=function(_0x4bc332){const _0xa764eb=_0x54b1a4;if(_0x4bc332){if(_0xa764eb(0xd94)===_0xa764eb(0xd94))this[_0xa764eb(0xccb)]();else{if(!_0x1635df[_0xa764eb(0xbbd)]())return;if(!_0x318f82[_0xa764eb(0xbeb)])return;_0x596a12[_0xa764eb(0x97a)](_0x7a21db,_0x485182);const _0x4d1583=_0xc9b5b['BattleCore']['CreateCutinSettings'](_0x2ce93c);_0x53a44c['_scene']['startVisualCutin'](_0x4d1583);const _0x3b1d66=_0x2a41c7[_0xa764eb(0x859)]();_0x3b1d66&&_0x2d75d2['WaitForEntrance']&&_0x3b1d66['setWaitMode'](_0xa764eb(0x5b3));}}else'iYbbU'!==_0xa764eb(0x55c)?(_0x226e1b[_0xa764eb(0x375)]['initialize'][_0xa764eb(0xd6c)](this,_0xde365d),this[_0xa764eb(0xb88)](this[_0xa764eb(0xa88)]()),this['refresh']()):this[_0xa764eb(0xaf7)]();},Game_BattlerBase['prototype'][_0x54b1a4(0xccb)]=function(){const _0x21e804=_0x54b1a4;if(this['isDead']())return;this[_0x21e804(0x4d3)]=!![],this[_0x21e804(0x528)]=![];},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0xaf7)]=function(){const _0x49cc08=_0x54b1a4,_0x1ebbdb=this[_0x49cc08(0x6a2)]();this[_0x49cc08(0x4d3)]=![];if(_0x1ebbdb&&this[_0x49cc08(0x528)]){if(_0x49cc08(0x4fb)!=='QmsNf'){let _0x47bf5f=_0x5ce43c(_0xb654bd['$1']);while(_0x47bf5f--){_0xa6edbf['push'](this[_0x49cc08(0xb1e)]()[_0x49cc08(0xab2)]());}return this[_0x49cc08(0x94c)](_0x301c9e);}else this[_0x49cc08(0x2d8)]();}this[_0x49cc08(0x528)]=![],this[_0x49cc08(0x742)](),this[_0x49cc08(0x5b2)]()&&_0x1ebbdb&&(this[_0x49cc08(0xa84)](),this[_0x49cc08(0x59e)]());},VisuMZ[_0x54b1a4(0x387)]['Game_Action_numRepeats']=Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x9df)],Game_Action['prototype'][_0x54b1a4(0x9df)]=function(){const _0x4e59ce=_0x54b1a4;if(this[_0x4e59ce(0x7b6)]())return VisuMZ[_0x4e59ce(0x387)][_0x4e59ce(0xdc6)]['call'](this);else{if(_0x4e59ce(0xb9a)===_0x4e59ce(0xb9a))return 0x0;else{const _0x5ec093=_0x44dc7d[_0x4e59ce(0xd77)];if(_0x5ec093[_0x4e59ce(0x298)](_0x912000['BattleCore'][_0x4e59ce(0x794)][_0x49a0f5])){const _0x1a7214=_0x50ea30['$1'],_0x5e5caf='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'['format'](_0x1a7214),_0x3bc16d=_0x8da998[_0x4e59ce(0x387)][_0x4e59ce(0x82a)](_0x1650af,_0x8e7a11);_0x2f9536[_0x4e59ce(0x387)]['JS'][_0x3bc16d]=new _0x227816(_0x5e5caf);}}}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x507)]=Game_Action['prototype'][_0x54b1a4(0x2ab)],Game_Action[_0x54b1a4(0x375)][_0x54b1a4(0x2ab)]=function(){const _0x22ca1a=_0x54b1a4;if(this[_0x22ca1a(0xc0d)]()&&this[_0x22ca1a(0xc0d)]()[_0x22ca1a(0x534)]()){if(_0x22ca1a(0x6d2)===_0x22ca1a(0xd88)){if(!_0x1e1d21[_0x22ca1a(0xbbd)]())return;if(!_0x3ae6bb[_0x22ca1a(0x81b)])return;_0x318285['ConvertParams'](_0x344bab,_0x3a5b38);const _0x4b3286=_0x1998aa['getLastPluginCommandInterpreter'](),_0xf0642d=_0x3e1e38[_0x22ca1a(0xca4)](_0x5e0dd4['Targets']),_0x4dfdfc=_0x50cbfd['WaitForCamera'];_0x5ec8f6[_0x22ca1a(0x8ea)](_0xf0642d,_0x1fdbbd[_0x22ca1a(0x8db)],_0x4794c2[_0x22ca1a(0x4e4)]);if(_0x4dfdfc)_0x4b3286['setWaitMode']('battleCamera');}else VisuMZ['BattleCore']['Game_Action_setAttack'][_0x22ca1a(0xd6c)](this);}else _0x22ca1a(0x479)===_0x22ca1a(0x76a)?(this[_0x22ca1a(0x3b4)]='',this[_0x22ca1a(0x6fe)]()&&this[_0x22ca1a(0x6fe)]()[_0x22ca1a(0xd77)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x22ca1a(0x3b4)]=_0x4c601c(_0x2bea0a['$1']))):this[_0x22ca1a(0x207)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x3cc)]=Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x534)],Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x534)]=function(){const _0x54aaed=_0x54b1a4;if(!this[_0x54aaed(0x20c)]())return![];return VisuMZ['BattleCore'][_0x54aaed(0x3cc)][_0x54aaed(0xd6c)](this);},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x20c)]=function(){const _0x261755=_0x54b1a4;for(const _0x2ba29c of this['traitObjects']()){if('yOFtZ'==='tanSo')return this[_0x261755(0x8c3)][_0x261755(0x38e)](_0x3e1894=>_0x3e1894[_0x261755(0x359)]===_0x38b85c&&_0x3e1894['ext']===_0x2d012e);else{if(!_0x2ba29c)continue;if(_0x2ba29c[_0x261755(0xd77)][_0x261755(0x298)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ['BattleCore'][_0x54b1a4(0x754)]=Game_Action[_0x54b1a4(0x375)]['setGuard'],Game_Action['prototype'][_0x54b1a4(0xc75)]=function(){const _0x32bc6e=_0x54b1a4;this['subject']()['canGuard']()&&VisuMZ['BattleCore'][_0x32bc6e(0x754)]['call'](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x7a8)]=Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x546)],Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x546)]=function(){const _0x39601a=_0x54b1a4;if(!this['canGuardBattleCore']())return![];return VisuMZ[_0x39601a(0x387)][_0x39601a(0x7a8)][_0x39601a(0xd6c)](this);},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x262)]=function(){const _0x1450a3=_0x54b1a4;for(const _0x3a758b of this[_0x1450a3(0xba6)]()){if(!_0x3a758b)continue;if(_0x3a758b['note'][_0x1450a3(0x298)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x54b1a4(0x20a)]=function(){const _0x1c25c4=_0x54b1a4;for(const _0x38183d of this[_0x1c25c4(0xba6)]()){if(!_0x38183d)continue;if(_0x38183d['note'][_0x1c25c4(0x298)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xc36)]=function(){const _0x2119d9=_0x54b1a4;return VisuMZ[_0x2119d9(0x387)][_0x2119d9(0x916)][_0x2119d9(0xc86)][_0x2119d9(0xce7)];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xda6)]=Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x8fc)],Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x8fc)]=function(){const _0x4a59c3=_0x54b1a4;if(SceneManager[_0x4a59c3(0xbbd)]()){if(_0x4a59c3(0x89e)!==_0x4a59c3(0x89e)){const _0x3727a2=_0x570ff7[_0x4a59c3(0x387)][_0x4a59c3(0x916)]['BattleLayout'],_0x3cb69d=this[_0x4a59c3(0x6fe)](_0x5f01c2),_0x56f772=this[_0x4a59c3(0x39c)](_0x313f91),_0x1fce7b=_0x5a9855[_0x4a59c3(0x68d)](_0x56f772['x']+(_0x56f772['width']-0x80)/0x2),_0x51d60e=this[_0x4a59c3(0x79a)](_0x56f772);let _0xf9dc82=_0x1fce7b-_0x22b03d[_0x4a59c3(0xa59)]/0x2-0x4,_0x440795=_0x51d60e+_0x2eb2bc[_0x4a59c3(0x485)]/0x2;_0xf9dc82-_0x76adc7[_0x4a59c3(0xa59)]/0x2<_0x56f772['x']&&(_0xf9dc82=_0x1fce7b+_0x36e27a[_0x4a59c3(0xa59)]/0x2-0x4,_0x440795=_0x51d60e-_0x2dd56c[_0x4a59c3(0x485)]/0x2);const _0x5155aa=_0x1fce7b,_0x503ba3=this[_0x4a59c3(0xd93)](_0x56f772);this[_0x4a59c3(0x3d8)](_0x3cb69d,_0x1fce7b+(_0x3727a2[_0x4a59c3(0x486)]||0x0),_0x51d60e+(_0x3727a2[_0x4a59c3(0x39d)]||0x0)),this[_0x4a59c3(0xa17)](_0x3cb69d,_0x1fce7b+(_0x3727a2[_0x4a59c3(0x4cf)]||0x0),_0x51d60e+(_0x3727a2['NameOffsetY']||0x0)),this[_0x4a59c3(0x59b)](_0x3cb69d,_0xf9dc82+(_0x3727a2[_0x4a59c3(0x20b)]||0x0),_0x440795+(_0x3727a2[_0x4a59c3(0xc51)]||0x0)),this['placeGauge'](_0x3cb69d,'hp',_0x5155aa+(_0x3727a2[_0x4a59c3(0xcfa)]||0x0),_0x503ba3+(_0x3727a2['HpGaugeOffsetY']||0x0)),this[_0x4a59c3(0x626)](_0x3cb69d,'mp',_0x5155aa+(_0x3727a2['MpGaugeOffsetX']||0x0),_0x503ba3+this[_0x4a59c3(0x93e)]()+(_0x3727a2[_0x4a59c3(0xa22)]||0x0)),_0x38fb03[_0x4a59c3(0x96b)]&&this[_0x4a59c3(0x626)](_0x3cb69d,'tp',_0x5155aa+(_0x3727a2[_0x4a59c3(0xaa5)]||0x0),_0x503ba3+this[_0x4a59c3(0x93e)]()*0x2+(_0x3727a2[_0x4a59c3(0x509)]||0x0));}else{if(BattleManager['isTpb']()){if(this[_0x4a59c3(0xd0e)]()<=0x0)return;}else{if($gameTroop[_0x4a59c3(0xd0e)]()<=0x0)return;}}}if(SceneManager[_0x4a59c3(0xbbd)]()&&BattleManager[_0x4a59c3(0x56d)]()&&this['_lastRegenFrameCount']===Graphics[_0x4a59c3(0xccf)]){if(_0x4a59c3(0x25a)==='BquAB')return;else{if(!this['_stateIconSprite'])return;this[_0x4a59c3(0xb7d)]!==this['_stateIconSprite'][_0x4a59c3(0xb7d)]&&this[_0x4a59c3(0xd1e)]['setup'](this['_battler']);const _0x242708=this[_0x4a59c3(0x694)]();this[_0x4a59c3(0x5e3)]=this[_0x4a59c3(0x5e3)]||_0x217134[_0x4a59c3(0x375)][_0x4a59c3(0xd04)](),this[_0x4a59c3(0xd1e)]['x']=_0x34972a['round']((_0x242708+_0x331f01[_0x4a59c3(0xa59)])/0x2)+0x8,this[_0x4a59c3(0xd1e)]['y']=this[_0x4a59c3(0x5e3)]/0x2;const _0x2a0755=_0x3d3775[_0x4a59c3(0x387)][_0x4a59c3(0x916)][_0x4a59c3(0x809)];this[_0x4a59c3(0xd1e)]['x']+=_0x2a0755[_0x4a59c3(0xc6c)]||0x0,this[_0x4a59c3(0xd1e)]['y']+=_0x2a0755['AttachStateOffsetY']||0x0;}}this[_0x4a59c3(0x98d)]=Graphics[_0x4a59c3(0xccf)];SceneManager[_0x4a59c3(0xbbd)]()&&this[_0x4a59c3(0x506)](_0x4a59c3(0x354));VisuMZ[_0x4a59c3(0x387)][_0x4a59c3(0xda6)]['call'](this);if(SceneManager[_0x4a59c3(0xbbd)]()){if('EUAfq'!==_0x4a59c3(0x896)){if(_0x52e26d[_0x4a59c3(0x56d)]()){if(this[_0x4a59c3(0xd0e)]()<=0x0)return;}else{if(_0x4e9d8b[_0x4a59c3(0xd0e)]()<=0x0)return;}}else this['regenerateAllBattleCore'](),this['processBattleCoreJS'](_0x4a59c3(0x8e2));}},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xc48)]=function(){const _0xa171e9=_0x54b1a4;if(SceneManager[_0xa171e9(0xbbd)]())for(const _0x3adda3 of this[_0xa171e9(0xba6)]()){if('UrgAO'===_0xa171e9(0x3dc)){if(!_0x3adda3)continue;this[_0xa171e9(0x536)](_0x3adda3);}else _0x476c0b[_0xa171e9(0x387)][_0xa171e9(0x825)](),_0x3f8fcd[_0xa171e9(0x387)][_0xa171e9(0x32a)](_0x5931ad),_0x5a30a6[_0xa171e9(0x387)]['BindCommonEventKeysForGroup'](_0x5790bd);}},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x536)]=function(_0xd0008e){const _0xef4b02=_0x54b1a4;if(!Imported[_0xef4b02(0x2e5)])return;if(!SceneManager[_0xef4b02(0xbbd)]())return;if(this[_0xef4b02(0x5b2)]())return;if(this[_0xef4b02(0x1fa)]())return;if(_0xd0008e[_0xef4b02(0xd77)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x6f32d3=Number(RegExp['$1']);$gameTemp[_0xef4b02(0xd50)]([this],_0x6f32d3,![],![]);}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xce3)]=Game_Battler['prototype'][_0x54b1a4(0x3ce)],Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x3ce)]=function(){const _0x5117e3=_0x54b1a4;this[_0x5117e3(0x506)](_0x5117e3(0xbd2)),VisuMZ[_0x5117e3(0x387)][_0x5117e3(0xce3)][_0x5117e3(0xd6c)](this),this['processBattleCoreJS'](_0x5117e3(0x391));},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xb93)]=Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xc08)],Game_Battler[_0x54b1a4(0x375)]['onTurnEnd']=function(){const _0x421d0f=_0x54b1a4;this[_0x421d0f(0x506)](_0x421d0f(0xc14)),VisuMZ[_0x421d0f(0x387)][_0x421d0f(0xb93)][_0x421d0f(0xd6c)](this),this[_0x421d0f(0x506)](_0x421d0f(0x416));},Game_Battler[_0x54b1a4(0x375)]['processBattleCoreJS']=function(_0x580cec){const _0x43973e=_0x54b1a4;if(this[_0x43973e(0x774)]||this[_0x43973e(0xbe7)])return;const _0x8ecf34=VisuMZ[_0x43973e(0x387)]['Settings']['Mechanics'];if(_0x8ecf34[_0x580cec])_0x8ecf34[_0x580cec][_0x43973e(0xd6c)](this);for(const _0x45532b of this['traitObjects']()){if(_0x43973e(0x1fb)!==_0x43973e(0x7bf)){if(!_0x45532b)continue;key=VisuMZ[_0x43973e(0x387)][_0x43973e(0x82a)](_0x45532b,_0x580cec),VisuMZ[_0x43973e(0x387)]['JS'][key]&&VisuMZ[_0x43973e(0x387)]['JS'][key][_0x43973e(0xd6c)](this,this,this,_0x45532b,0x0);}else _0xfe1e10[_0x1fa2f8]['call'](this,_0x572af7);}},Game_Battler['prototype'][_0x54b1a4(0x71d)]=function(){const _0x36cbe8=_0x54b1a4;return VisuMZ[_0x36cbe8(0x387)][_0x36cbe8(0x916)][_0x36cbe8(0x2c1)][_0x36cbe8(0x524)]||![];},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x4ac)]=function(){const _0x10f39b=_0x54b1a4;if(this[_0x10f39b(0x540)]()){if(this['chantStyle']()){if(_0x10f39b(0x4c8)===_0x10f39b(0x969))return this['skillItemWindowRectBorderStyle']();else{if(this[_0x10f39b(0x955)]['some'](_0x4e4bb4=>_0x4e4bb4[_0x10f39b(0x7b6)]()&&_0x4e4bb4['isMagical']())){if(_0x10f39b(0x558)===_0x10f39b(0x558))return!![];else this[_0x10f39b(0x2d8)]();}}}else{if(_0x10f39b(0x30d)==='eUnyR'){if(this['_actions'][_0x10f39b(0xd19)](_0x2d64e1=>_0x2d64e1[_0x10f39b(0x7b6)]()&&_0x2d64e1[_0x10f39b(0x27a)]()))return!![];}else _0x4d06e6[_0x10f39b(0x387)][_0x10f39b(0x422)]['call'](this),this[_0x10f39b(0x23f)]=[];}}if(BattleManager[_0x10f39b(0x56d)]()&&this['_tpbState']===_0x10f39b(0xc06))return this['chantStyle']()?this[_0x10f39b(0xb7a)]()&&this[_0x10f39b(0xb7a)]()['item']()&&this['currentAction']()[_0x10f39b(0x40d)]():this[_0x10f39b(0xb7a)]()&&this[_0x10f39b(0xb7a)]()[_0x10f39b(0x7b6)]()&&this['currentAction']()[_0x10f39b(0x27a)]();return![];},Game_Battler[_0x54b1a4(0x375)]['isCharging']=function(){const _0x581c1a=_0x54b1a4;if(BattleManager['isTpb']()&&this[_0x581c1a(0xa93)]===_0x581c1a(0xc06)){if(_0x581c1a(0x5db)===_0x581c1a(0xade))return this[_0x581c1a(0xb4c)]();else{if(this[_0x581c1a(0x71d)]())return this['currentAction']()&&this['currentAction']()[_0x581c1a(0x7b6)]()&&!this[_0x581c1a(0xb7a)]()[_0x581c1a(0x40d)]();else{if(_0x581c1a(0x2cd)!==_0x581c1a(0x688))return this['currentAction']()&&this[_0x581c1a(0xb7a)]()['item']()&&!this[_0x581c1a(0xb7a)]()[_0x581c1a(0x27a)]();else{if(_0x7f8d87[_0x581c1a(0xa07)]())this['selectNextCommand']();else _0x31476e[_0x581c1a(0x56d)]()&&_0x440a18['BattleCore'][_0x581c1a(0xcd8)]['call'](this);}}}}return![];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x422)]=Game_Battler['prototype'][_0x54b1a4(0xc8a)],Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xc8a)]=function(){const _0x172350=_0x54b1a4;VisuMZ['BattleCore'][_0x172350(0x422)]['call'](this),this[_0x172350(0x23f)]=[];},Game_Battler[_0x54b1a4(0x375)]['isDamagePopupRequested']=function(){const _0x1e2a72=_0x54b1a4;if(!this[_0x1e2a72(0x23f)])this['clearDamagePopup']();return this[_0x1e2a72(0x23f)][_0x1e2a72(0x69d)]>0x0;},Game_Battler['prototype'][_0x54b1a4(0x9ba)]=function(){const _0x809268=_0x54b1a4;if(!SceneManager[_0x809268(0xbbd)]())return;if(BattleManager[_0x809268(0x570)]())return;if(!this['_damagePopupArray'])this[_0x809268(0xc8a)]();this['createSeparateDamagePopups']();const _0x446321=this[_0x809268(0x887)]();if(_0x446321)_0x446321[_0x809268(0xa8c)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x44e)]=function(){const _0x2c32a5=_0x54b1a4,_0x1d969f=this[_0x2c32a5(0xb45)]();if(_0x1d969f[_0x2c32a5(0x4ad)]||_0x1d969f['evaded']){const _0x1a3b16=JsonEx['makeDeepCopy'](_0x1d969f);_0x1a3b16['hpAffected']=![],_0x1a3b16[_0x2c32a5(0x6e2)]=0x0,this[_0x2c32a5(0x23f)][_0x2c32a5(0x519)](_0x1a3b16);}if(_0x1d969f[_0x2c32a5(0x77a)]){const _0x35caa1=JsonEx[_0x2c32a5(0x9c2)](_0x1d969f);_0x35caa1[_0x2c32a5(0x4ad)]=![],_0x35caa1[_0x2c32a5(0x6cd)]=![],_0x35caa1[_0x2c32a5(0x6e2)]=0x0,this['_damagePopupArray'][_0x2c32a5(0x519)](_0x35caa1);}if(_0x1d969f[_0x2c32a5(0x6e2)]!==0x0){if(_0x2c32a5(0xafb)==='KrMaf')_0x5e0a00[_0x2c32a5(0x56d)]()?(this[_0x2c32a5(0x60d)](),this[_0x2c32a5(0x48e)]()):_0x46c9cb['BattleCore'][_0x2c32a5(0x4bb)]['call'](this);else{const _0xb8bfef=JsonEx[_0x2c32a5(0x9c2)](_0x1d969f);_0xb8bfef[_0x2c32a5(0x4ad)]=![],_0xb8bfef[_0x2c32a5(0x6cd)]=![],_0xb8bfef[_0x2c32a5(0x77a)]=![],this[_0x2c32a5(0x23f)][_0x2c32a5(0x519)](_0xb8bfef);}}},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xb63)]=function(){const _0x33bf81=_0x54b1a4;if(!this[_0x33bf81(0x23f)])this[_0x33bf81(0xc8a)]();return VisuMZ[_0x33bf81(0x387)][_0x33bf81(0x916)][_0x33bf81(0x5f5)][_0x33bf81(0x7fd)]?this['_damagePopupArray'][_0x33bf81(0x382)]():this[_0x33bf81(0x23f)][_0x33bf81(0x67f)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x703)]=function(_0xfa552b,_0x1f7bf8){const _0x48146c=_0x54b1a4;if(!SceneManager[_0x48146c(0xbbd)]())return;if(BattleManager[_0x48146c(0x570)]())return;if(!this[_0x48146c(0x887)]())return;if(_0xfa552b[_0x48146c(0x69d)]<=0x0)return;_0x1f7bf8=_0x1f7bf8||{},_0x1f7bf8[_0x48146c(0xa28)]=_0x1f7bf8[_0x48146c(0xa28)]||_0x48146c(0x91f),_0x1f7bf8['flashColor']=_0x1f7bf8[_0x48146c(0x8d3)]||[0x0,0x0,0x0,0x0],_0x1f7bf8[_0x48146c(0x27b)]=_0x1f7bf8[_0x48146c(0x27b)]||0x0,this[_0x48146c(0x887)]()[_0x48146c(0x703)](_0xfa552b,_0x1f7bf8);},Game_Battler['prototype'][_0x54b1a4(0x4c2)]=function(_0x324eef,_0x55afc8,_0x15ffd1){const _0x45b051=_0x54b1a4;if(!SceneManager[_0x45b051(0xbbd)]())return;if(BattleManager[_0x45b051(0x570)]())return;if(!this[_0x45b051(0x887)]())return;if(_0x55afc8['length']<=0x0)return;_0x15ffd1=_0x15ffd1||{},_0x15ffd1[_0x45b051(0xa28)]=_0x15ffd1['textColor']||_0x45b051(0x91f),_0x15ffd1['flashColor']=_0x15ffd1[_0x45b051(0x8d3)]||[0x0,0x0,0x0,0x0],_0x15ffd1[_0x45b051(0x27b)]=_0x15ffd1[_0x45b051(0x27b)]||0x0,this[_0x45b051(0x887)]()[_0x45b051(0x4c2)](_0x324eef,_0x55afc8,_0x15ffd1);},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x9ea)]=function(){const _0x35c57a=_0x54b1a4;if(this['isHidden']())return![];if(this[_0x35c57a(0x6a2)]()&&this[_0x35c57a(0x9f2)]())return!![];if(this[_0x35c57a(0xc3c)]()&&this[_0x35c57a(0xb3b)]()){if(this[_0x35c57a(0x5b2)]()&&this[_0x35c57a(0x2e4)]())return![];}else{if(this[_0x35c57a(0x5b2)]())return![];}return!![];},VisuMZ['BattleCore'][_0x54b1a4(0x8e9)]=Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x2f8)],Game_Battler[_0x54b1a4(0x375)]['clearMotion']=function(){const _0x5d914f=_0x54b1a4;VisuMZ[_0x5d914f(0x387)][_0x5d914f(0x8e9)]['call'](this),this[_0x5d914f(0xb5c)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x35c)]=function(){return!![];},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xd28)]=function(){return![];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x388)]=Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x711)],Game_Battler['prototype'][_0x54b1a4(0x711)]=function(_0x11c8fb){const _0x52aa40=_0x54b1a4;VisuMZ[_0x52aa40(0x387)]['Game_Battler_onBattleStart'][_0x52aa40(0xd6c)](this,_0x11c8fb),this[_0x52aa40(0x8a5)](_0x11c8fb),this[_0x52aa40(0xc8a)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x8a5)]=function(_0x511959){const _0x43684a=_0x54b1a4;this[_0x43684a(0xd07)](![]),this[_0x43684a(0xc4a)]=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x685)]=Game_Battler[_0x54b1a4(0x375)]['onBattleEnd'],Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xdb0)]=function(){const _0x4d7518=_0x54b1a4;VisuMZ[_0x4d7518(0x387)][_0x4d7518(0x685)][_0x4d7518(0xd6c)](this),this[_0x4d7518(0xbe1)]();},Game_Battler['prototype'][_0x54b1a4(0xbe1)]=function(){const _0x4c2818=_0x54b1a4;this[_0x4c2818(0xc4a)]=undefined,this[_0x4c2818(0x47e)]=undefined;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x3b5)]=Game_Battler['prototype']['performActionStart'],Game_Battler[_0x54b1a4(0x375)]['performActionStart']=function(_0xa67209){const _0x1eb29e=_0x54b1a4;VisuMZ['BattleCore'][_0x1eb29e(0x3b5)][_0x1eb29e(0xd6c)](this,_0xa67209);if(!_0xa67209[_0x1eb29e(0xc83)]()){const _0x578c44=this[_0x1eb29e(0x887)]();_0x578c44&&_0x578c44[_0x1eb29e(0xadb)]();}this[_0x1eb29e(0xd07)](![]);},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x2c6)]=function(){const _0x18eab4=_0x54b1a4,_0x54feaf=this[_0x18eab4(0xc41)];this['_flinched']=![];if(BattleManager[_0x18eab4(0xa39)]()&&this[_0x18eab4(0x539)]()){const _0x370035=this['battler']();if(_0x370035&&_0x54feaf)_0x370035['stepForward']();return;}const _0x1bc17a=this[_0x18eab4(0x887)]();if(_0x1bc17a)_0x1bc17a[_0x18eab4(0x76d)]();this[_0x18eab4(0xd07)](![]),this[_0x18eab4(0x59e)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x7eb)]=function(_0x67b4d8){const _0x193b77=_0x54b1a4;if(_0x67b4d8[_0x193b77(0x8a7)]())_0x193b77(0x841)!==_0x193b77(0x841)?_0x2c4a50['BattleCore'][_0x193b77(0x5e7)][_0x193b77(0xd6c)](this):this[_0x193b77(0x9c7)]();else{if(_0x67b4d8[_0x193b77(0xc83)]())this[_0x193b77(0x676)](_0x193b77(0x890));else{if(_0x67b4d8[_0x193b77(0x40d)]())this[_0x193b77(0x676)]('spell');else{if(_0x67b4d8['isSkill']()){if(_0x193b77(0xc45)!==_0x193b77(0xc45))_0x10af63['remove'](this['subject']());else{if([0x1,0x2,0x5,0x6][_0x193b77(0xd4a)](_0x67b4d8['item']()[_0x193b77(0x220)][_0x193b77(0x5cc)])){if(_0x193b77(0x95c)!==_0x193b77(0x95c)){let _0x50908c=_0x58408a[_0x193b77(0x9e0)](_0x6d055b[_0x193b77(0x60b)]);_0x261a03['hpDamage']>0x0&&(_0x50908c+=_0x32714d[_0x193b77(0x87d)](_0x1d0b77['hpDamage'])),_0x3bd030[_0x193b77(0x265)](_0xc27363['VariableDmg'],_0x50908c);}else this['performAttack']();}else{if(_0x193b77(0x462)==='BYCns')this['requestMotion'](_0x193b77(0x4ae));else return _0x4721b2(_0x1e20ee['$1'])*0.01;}}}else _0x67b4d8[_0x193b77(0x9e5)]()&&this[_0x193b77(0x676)](_0x193b77(0x7b6));}}}},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x5b5)]=function(){const _0x1995fd=_0x54b1a4;return $dataSystem[_0x1995fd(0x4ab)][0x0];},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xd99)]=function(){const _0x33da82=_0x54b1a4,_0x4af14c=this[_0x33da82(0x5b5)]();return _0x4af14c?_0x4af14c['weaponImageId']:0x0;},Game_Battler['prototype'][_0x54b1a4(0x68a)]=function(_0x553da8){const _0x4bd767=_0x54b1a4;if(!$gameSystem['isSideView']())return;const _0x2263bd=this['battler'](),_0x141326=_0x553da8[_0x4bd767(0x887)]();if(!_0x2263bd||!_0x141326)return;const _0x2085ad=_0x141326[_0x4bd767(0xc43)],_0x42fecb=_0x141326[_0x4bd767(0xb10)];this[_0x4bd767(0x9b8)](_0x2085ad,_0x42fecb,0x0,![],'Linear',-0x1),_0x2263bd['updatePosition']();const _0x5fa7b3=VisuMZ['BattleCore'][_0x4bd767(0x916)][_0x4bd767(0x493)];let _0x46c2d0=(_0x141326[_0x4bd767(0x495)]+_0x2263bd[_0x4bd767(0x495)])/0x2;_0x46c2d0*=this['isActor']()?0x1:-0x1;let _0x48ca56=_0x5fa7b3[_0x4bd767(0xad6)]*(this[_0x4bd767(0xa2c)]()?0x1:-0x1);_0x553da8[_0x4bd767(0xb53)](_0x46c2d0,_0x48ca56,0x0,![],_0x4bd767(0xad4)),_0x141326[_0x4bd767(0x37e)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x676)]=function(_0x550ee6){const _0x4337a5=_0x54b1a4;if(SceneManager[_0x4337a5(0xbbd)]()){if(_0x4337a5(0x209)!==_0x4337a5(0x209))this[_0x4337a5(0x9c7)]();else{const _0x8aa8aa=this[_0x4337a5(0x887)]();_0x8aa8aa&&(_0x8aa8aa['forceMotion'](_0x550ee6),['swing',_0x4337a5(0x405),_0x4337a5(0xd14)]['includes'](_0x550ee6)&&this[_0x4337a5(0x601)]());}}this[_0x4337a5(0xb5c)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x601)]=function(){},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x4c6)]=function(_0x8ce906){const _0x206e27=_0x54b1a4;if(SceneManager['isSceneBattle']()){if(_0x206e27(0x9de)!==_0x206e27(0x9de)){if(!_0x55807c)return;if(!this['_mainSprite'])return;this[_0x206e27(0x4cb)][_0x206e27(0x749)]['x']=this[_0x206e27(0x2f3)][_0x206e27(0x5ec)](),this[_0x206e27(0x4cb)]['anchor']['y']=this[_0x206e27(0x2f3)][_0x206e27(0x976)](),this[_0x206e27(0x32b)]();}else{const _0x307165=this['battler']();if(_0x307165)_0x307165['forceWeaponAnimation'](_0x8ce906);}}},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xa33)]=function(){const _0x372d32=_0x54b1a4;if(SceneManager['isSceneBattle']()){if(_0x372d32(0x768)==='DdjkR')this[_0x372d32(0x65b)][_0x372d32(0xd41)]=_0x2b5b5c[_0x372d32(0x387)][_0x372d32(0x916)][_0x372d32(0x2c1)][_0x372d32(0x393)];else{const _0x2f2a50=this['getAttackWeaponAnimationId']();this['startWeaponAnimation'](_0x2f2a50);}}},Game_Battler['prototype'][_0x54b1a4(0x44d)]=function(_0x4825ee,_0x3e552c){const _0x191022=_0x54b1a4;if(!_0x4825ee)return;if(!_0x4825ee['item']())return;if(_0x4825ee[_0x191022(0x8a7)]())return;if(_0x4825ee[_0x191022(0xc83)]())return;if(_0x4825ee['isItem']())return;let _0x166dec=0x0;const _0x561aac=VisuMZ[_0x191022(0x387)][_0x191022(0x916)][_0x191022(0x493)],_0x208d96=_0x4825ee['item']()[_0x191022(0xd77)];if(_0x208d96[_0x191022(0x298)](/<CAST ANIMATION: (\d+)>/i)){if(_0x191022(0x745)!==_0x191022(0x745))return _0xf1299b[_0x191022(0xb36)];else _0x166dec=Number(RegExp['$1']);}else{if(_0x208d96[_0x191022(0x298)](/<NO CAST ANIMATION>/i)){if(_0x191022(0x253)!==_0x191022(0x9c6))return;else _0x15234f[_0x1c8261]=null;}else{if(_0x4825ee[_0x191022(0x88f)]())_0x166dec=_0x561aac[_0x191022(0xa52)];else{if(_0x4825ee[_0x191022(0x384)]())_0x166dec=_0x561aac[_0x191022(0x293)];else _0x4825ee[_0x191022(0x40d)]()&&(_0x191022(0xc98)!=='QGgzC'?_0x166dec=_0x561aac[_0x191022(0xc49)]:(this[_0x191022(0x4cb)]['x']=0x0,this['_mainSprite']['y']=this[_0x191022(0xdd7)]*0.5));}}}if(_0x166dec>0x0){if('yPfok'!==_0x191022(0x4d1))$gameTemp[_0x191022(0x89d)]([this],_0x166dec,!!_0x3e552c);else return _0xb3fd11[_0x191022(0x387)]['Settings']['Actor'][_0x191022(0x393)];}},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xcb2)]=function(){const _0x292a8d=_0x54b1a4;SoundManager[_0x292a8d(0xa9d)]();let _0x176e73=VisuMZ[_0x292a8d(0x387)][_0x292a8d(0x916)][_0x292a8d(0x493)][_0x292a8d(0x888)];if(_0x176e73>0x0){if(_0x292a8d(0xdc2)!==_0x292a8d(0xdc2)){if(!_0x1c7b6d[_0x292a8d(0xbbd)]())return;if(!_0x5a9997['VisuMZ_2_BattleSystemPTB'])return;if(!_0x20e6d7[_0x292a8d(0xb30)]())return;_0x3915a7[_0x292a8d(0x97a)](_0x25a926,_0x695f26);const _0x543075=_0x590b52[_0x292a8d(0x644)]['friendsUnit']();let _0x40086b=_0x25ada5[_0x292a8d(0x6b2)],_0x201e18=_0x43b7dc[_0x292a8d(0xa30)];_0x543075[_0x292a8d(0xc2c)](_0x40086b),_0x543075[_0x292a8d(0x330)](_0x201e18);}else Imported['VisuMZ_0_CoreEngine']?$gameTemp[_0x292a8d(0xd50)]([this],_0x176e73):$gameTemp[_0x292a8d(0x89d)]([this],_0x176e73);}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x751)]=Game_Battler[_0x54b1a4(0x375)]['performDamage'],Game_Battler['prototype'][_0x54b1a4(0x512)]=function(){const _0x340348=_0x54b1a4;VisuMZ[_0x340348(0x387)][_0x340348(0x751)]['call'](this),this[_0x340348(0xd4f)](),this[_0x340348(0x47a)]();},VisuMZ[_0x54b1a4(0x387)]['Game_Battler_performMiss']=Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xbb7)],Game_Battler['prototype'][_0x54b1a4(0xbb7)]=function(){const _0x5d7931=_0x54b1a4;VisuMZ[_0x5d7931(0x387)]['Game_Battler_performMiss'][_0x5d7931(0xd6c)](this),this['performFlinch']();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xd12)]=Game_Battler['prototype'][_0x54b1a4(0x2aa)],Game_Battler['prototype'][_0x54b1a4(0x2aa)]=function(){const _0x252afb=_0x54b1a4;VisuMZ[_0x252afb(0x387)][_0x252afb(0xd12)][_0x252afb(0xd6c)](this),this[_0x252afb(0xd4f)]();},Game_Battler['prototype'][_0x54b1a4(0xd4f)]=function(){const _0x1d3480=_0x54b1a4;if(!$gameSystem[_0x1d3480(0xc91)]())return;if(this['_flinched'])return;this[_0x1d3480(0xc41)]=!![];const _0x3febf7=this['battler']();if(_0x3febf7)_0x3febf7[_0x1d3480(0xd62)]();},Game_Battler['prototype'][_0x54b1a4(0x47a)]=function(){const _0x454347=_0x54b1a4;if(!this[_0x454347(0x35c)]())return;const _0x1e7d96=VisuMZ[_0x454347(0x387)][_0x454347(0x916)][_0x454347(0x2c1)];if(!(_0x1e7d96[_0x454347(0xdad)]??![]))return;if(this['_lastHpDamage']<=0x0)return;const _0x37cb33=this[_0x454347(0x887)]();if(_0x37cb33){const _0x5d135b=this[_0x454347(0xb6e)],_0x4439e7=(_0x5d135b/this['mhp'])[_0x454347(0x2cb)](0.8,0x1),_0x3a32ed=_0x1e7d96[_0x454347(0x223)]??0x30,_0x27c88c=_0x4439e7*_0x3a32ed;_0x37cb33[_0x454347(0xd84)](_0x27c88c,_0x4439e7);}},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x59e)]=function(){const _0xe4fc08=_0x54b1a4;if(this[_0xe4fc08(0x5b2)]()&&this['_motionType']!==_0xe4fc08(0x904)){this[_0xe4fc08(0x676)](_0xe4fc08(0x904));return;}if(this[_0xe4fc08(0x5b2)]()&&this[_0xe4fc08(0x98b)]===_0xe4fc08(0x904))return;if(!!this[_0xe4fc08(0x344)])return;if(this[_0xe4fc08(0xc3c)]()){if('topUZ'!=='topUZ')_0x533d71[_0xe4fc08(0x59c)]()?_0x4f6e9a['prototype'][_0xe4fc08(0xad7)][_0xe4fc08(0xd6c)](this):_0x24849b['BattleCore'][_0xe4fc08(0x470)][_0xe4fc08(0xd6c)](this);else{if(!this[_0xe4fc08(0x1f7)]()&&this!==BattleManager['_subject']){if(this[_0xe4fc08(0x887)]())this[_0xe4fc08(0x887)]()['refreshMotion']();}this[_0xe4fc08(0xb5c)]();return;}}if(this[_0xe4fc08(0x98b)]===_0xe4fc08(0x61f))return;if(this[_0xe4fc08(0x98b)]===_0xe4fc08(0x81e)&&!BattleManager[_0xe4fc08(0x539)]())return;if(this[_0xe4fc08(0x98b)]===_0xe4fc08(0x890)&&!BattleManager[_0xe4fc08(0x539)]())return;this[_0xe4fc08(0x2f8)]();if(BattleManager[_0xe4fc08(0xa39)]()&&this===BattleManager[_0xe4fc08(0x644)])return;if(this[_0xe4fc08(0x887)]()&&BattleManager[_0xe4fc08(0x539)]()){this['battler']()[_0xe4fc08(0x671)](),this[_0xe4fc08(0xb5c)]();return;}},Game_Enemy[_0x54b1a4(0x375)]['isDuringNonLoopingMotion']=function(){const _0x3833df=_0x54b1a4;if(!this[_0x3833df(0xb3b)]())return![];const _0x7009ad=this['battler']();if(!_0x7009ad)return![];const _0x154acd=_0x7009ad[_0x3833df(0xbb1)];if(!_0x154acd)return![];const _0xfe747a=_0x154acd['_motion'];return _0xfe747a&&!_0xfe747a['loop'];},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x993)]=function(){return this['_isBattlerFlipped'];},Game_Battler[_0x54b1a4(0x375)]['setBattlerFlip']=function(_0xeabdc9){const _0x4634be=_0x54b1a4;if(!$gameSystem[_0x4634be(0xc91)]())return;this[_0x4634be(0x45b)]=_0xeabdc9;const _0x3ccdf9=this['battler']();if(_0x3ccdf9)_0x3ccdf9[_0x4634be(0xbba)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x83a)]=function(_0x4e22ab,_0x5c6865,_0x423a16){const _0x1570ec=_0x54b1a4;if(!$gameSystem[_0x1570ec(0xc91)]())return;const _0x15af85=this[_0x1570ec(0x887)]();if(!_0x15af85)return;if(_0x4e22ab===_0x15af85[_0x1570ec(0xc43)])return;let _0x2f75f6=![];if(this[_0x1570ec(0xa2c)]()){if(_0x4e22ab>_0x15af85[_0x1570ec(0xc43)])_0x2f75f6=!![];if(_0x4e22ab<_0x15af85['_baseX'])_0x2f75f6=![];}else{if(this[_0x1570ec(0xc3c)]()){if(_0x4e22ab>_0x15af85[_0x1570ec(0xc43)])_0x2f75f6=![];if(_0x4e22ab<_0x15af85[_0x1570ec(0xc43)])_0x2f75f6=!![];}};this[_0x1570ec(0xd07)](_0x423a16?!_0x2f75f6:_0x2f75f6),_0x15af85[_0x1570ec(0xbba)]();},Game_Battler['prototype']['moveBattlerDistance']=function(_0x2b807d,_0x4b8ef6,_0x2af42d,_0x48397f,_0x13b1c2){const _0x5df6ba=_0x54b1a4;if(!$gameSystem[_0x5df6ba(0xc91)]())return;const _0x53a059=this[_0x5df6ba(0x887)]();if(!_0x53a059)return;if(_0x48397f)this['setBattlerFacePoint'](_0x2b807d+_0x53a059[_0x5df6ba(0xc43)],_0x4b8ef6+_0x53a059[_0x5df6ba(0xb10)],![]);_0x2b807d+=_0x53a059[_0x5df6ba(0xc43)]-_0x53a059[_0x5df6ba(0x6f7)],_0x4b8ef6+=_0x53a059['_baseY']-_0x53a059[_0x5df6ba(0x96f)],_0x53a059[_0x5df6ba(0x835)](_0x2b807d,_0x4b8ef6,_0x2af42d);if(Imported[_0x5df6ba(0x2e5)])_0x53a059['setMoveEasingType'](_0x13b1c2||'Linear');},Game_Battler['prototype'][_0x54b1a4(0x9b8)]=function(_0x5ab5fa,_0x5e76b6,_0x515762,_0x404952,_0x1c8764,_0x18881b){const _0x4eaa71=_0x54b1a4;if(!$gameSystem[_0x4eaa71(0xc91)]())return;const _0x34aa63=this[_0x4eaa71(0x887)]();if(!_0x34aa63)return;if(_0x5ab5fa===Infinity||_0x5e76b6===Infinity)return;if(isNaN(_0x5ab5fa)||isNaN(_0x5e76b6))return;_0x18881b=_0x18881b||0x0;if(_0x18881b>0x0){if(_0x4eaa71(0x37a)===_0x4eaa71(0x37a)){if(_0x34aa63[_0x4eaa71(0xc43)]>_0x5ab5fa)_0x5ab5fa+=_0x34aa63['width']/0x2+_0x18881b;if(_0x34aa63[_0x4eaa71(0xc43)]<_0x5ab5fa)_0x5ab5fa-=_0x34aa63[_0x4eaa71(0x495)]/0x2+_0x18881b;}else{const _0x3b8b98=_0x167154[0x0][_0x4eaa71(0xd76)](_0x46ec65[0x0],_0x4e8ee1[0x0]),_0x1f9cf3=_0x156c22[0x1][_0x4eaa71(0xd76)](_0x470e90[0x1],_0x916b35[0x1])[_0x4eaa71(0x2f4)](),_0x211a0d=new _0x400543(_0x332dac['format'](_0x1f9cf3),'i');_0xb51bd[_0x3b8b98]=_0x211a0d;}}if(_0x404952)this[_0x4eaa71(0x83a)](_0x5ab5fa,_0x5e76b6,![]);_0x5ab5fa-=_0x34aa63[_0x4eaa71(0x6f7)],_0x5e76b6-=_0x34aa63[_0x4eaa71(0x96f)],_0x34aa63['startMove'](_0x5ab5fa,_0x5e76b6,_0x515762);if(Imported['VisuMZ_0_CoreEngine'])_0x34aa63[_0x4eaa71(0xc6f)](_0x1c8764||_0x4eaa71(0xad4));},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x953)]=function(_0x4b2329,_0x53512f,_0xe8f813,_0xb5daca,_0x575750){const _0x47b294=_0x54b1a4;if(!$gameSystem[_0x47b294(0xc91)]())return;const _0x4795f7=this[_0x47b294(0x887)]();if(!_0x4795f7)return;if(_0xb5daca)this[_0x47b294(0x83a)](_0x4b2329+_0x4795f7[_0x47b294(0xc43)],_0x53512f+_0x4795f7[_0x47b294(0xb10)],![]);_0x4b2329+=_0x4795f7[_0x47b294(0x6f7)],_0x53512f+=_0x4795f7[_0x47b294(0x96f)],_0x4795f7[_0x47b294(0x5fb)](_0x4b2329,_0x53512f,_0xe8f813,_0x575750),this[_0x47b294(0xc4a)]=_0x4b2329,this[_0x47b294(0x47e)]=_0x53512f;},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x22f)]=function(_0x3faa6c,_0xab22b9,_0x155fdd,_0x1e90aa,_0x30d0bb,_0x5a773b){const _0x1c15dc=_0x54b1a4;if(!$gameSystem[_0x1c15dc(0xc91)]())return;const _0x490a5a=this['battler']();if(!_0x490a5a)return;_0x5a773b=_0x5a773b||0x0;if(_0x5a773b>0x0){if(_0x490a5a[_0x1c15dc(0xc43)]>_0x3faa6c)_0x3faa6c+=_0x490a5a[_0x1c15dc(0x495)]/0x2+_0x5a773b;if(_0x490a5a[_0x1c15dc(0xc43)]<_0x3faa6c)_0x3faa6c-=_0x490a5a[_0x1c15dc(0x495)]/0x2+_0x5a773b;}if(_0x1e90aa)this[_0x1c15dc(0x83a)](_0x3faa6c,_0xab22b9,![]);_0x490a5a['startHomeMove'](_0x3faa6c,_0xab22b9,_0x155fdd,_0x30d0bb),this[_0x1c15dc(0xc4a)]=_0x3faa6c,this[_0x1c15dc(0x47e)]=_0xab22b9;},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xd20)]=function(_0x3125a1,_0x433dd0,_0x47dc65){const _0x1078b1=_0x54b1a4;if(!$gameSystem[_0x1078b1(0xc91)]())return;const _0x5652ce=this[_0x1078b1(0x887)]();if(!_0x5652ce)return;_0x5652ce['startFloat'](_0x3125a1,_0x433dd0,_0x47dc65);},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xa7a)]=function(_0x5b9afb,_0x4772a1){const _0x2b931c=_0x54b1a4;if(!$gameSystem[_0x2b931c(0xc91)]())return;const _0x4892d0=this[_0x2b931c(0x887)]();if(!_0x4892d0)return;_0x4892d0['startJump'](_0x5b9afb,_0x4772a1);},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x491)]=function(_0x127452,_0x10bfba,_0x226ed4,_0xdf69f8){const _0x4aa366=_0x54b1a4;if(!$gameSystem[_0x4aa366(0xc91)]())return;const _0x3e0d93=this[_0x4aa366(0x887)]();if(!_0x3e0d93)return;_0x3e0d93[_0x4aa366(0x851)](_0x127452,_0x10bfba,_0x226ed4,_0xdf69f8);},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xc5b)]=function(_0x589217,_0xc977f,_0x35e2f4,_0x5de347){const _0x1da407=_0x54b1a4;if(!$gameSystem[_0x1da407(0xc91)]())return;const _0x1d9e7a=this[_0x1da407(0x887)]();if(!_0x1d9e7a)return;if(this[_0x1da407(0xa2c)]()){if(_0x1da407(0x683)!=='CQiDD')_0x589217*=-0x1,_0xc977f*=-0x1;else{_0x4fd36f[_0x1da407(0x375)][_0x1da407(0x815)][_0x1da407(0xd6c)](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();}}_0x1d9e7a[_0x1da407(0xc77)](_0x589217,_0xc977f,_0x35e2f4,_0x5de347);},Game_Battler['prototype']['growBattler']=function(_0x33914b,_0x5871ab,_0x1ba91a,_0x1ae471){const _0x2b8630=_0x54b1a4;if(!$gameSystem[_0x2b8630(0xc91)]())return;const _0x382cc0=this[_0x2b8630(0x887)]();if(!_0x382cc0)return;_0x382cc0['startGrow'](_0x33914b,_0x5871ab,_0x1ba91a,_0x1ae471);},Game_Battler[_0x54b1a4(0x375)]['changeBattlerOpacity']=function(_0x43a217,_0x2589ec,_0xcece16){const _0x5388f9=_0x54b1a4;if(!$gameSystem[_0x5388f9(0xc91)]())return;const _0x553739=this['battler']();if(!_0x553739)return;_0x553739[_0x5388f9(0x812)](_0x43a217,_0x2589ec,_0xcece16);},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xb5c)]=function(){const _0x54268e=_0x54b1a4,_0xee46a1=!!this[_0x54268e(0x344)];this[_0x54268e(0x344)]=undefined,_0xee46a1&&(this['requestMotionRefresh'](),this[_0x54268e(0x3f6)]());},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x3f6)]=function(){const _0x261d94=_0x54b1a4;if(!SceneManager[_0x261d94(0xbbd)]())return;const _0x2fea56=this[_0x261d94(0x887)]();if(!_0x2fea56)return;let _0xead70d=this['isActor']()?_0x2fea56[_0x261d94(0xa20)]:_0x2fea56[_0x261d94(0xbb1)][_0x261d94(0xa20)];if(_0xead70d){if('sEznt'!==_0x261d94(0xbf4))_0xead70d[_0x261d94(0x915)](0x0);else return _0x121736[_0x261d94(0x2e5)]?_0x1623d3['getInputButtonString'](_0x261d94(0xa70)):_0x5e0a3c['BattleCore'][_0x261d94(0x916)][_0x261d94(0xc85)][_0x261d94(0x234)];}},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xbbc)]=function(_0x206af6,_0x542976,_0x39282e){const _0x9c9ad8=_0x54b1a4;if(this[_0x9c9ad8(0xc3c)]()&&!this[_0x9c9ad8(0xb3b)]())return;let _0x164a12=0x0,_0x455345=0x0;_0x206af6[_0x9c9ad8(0x298)](/ATTACK[ ](\d+)/i)&&(_0x455345=Number(RegExp['$1']),_0x455345--);if(this[_0x9c9ad8(0xa2c)]()){const _0x1edde8=this[_0x9c9ad8(0x765)]();_0x164a12=_0x1edde8[_0x455345]?_0x1edde8[_0x455345][_0x9c9ad8(0xc87)]:0x0;}else this['isEnemy']()&&(_0x164a12=this[_0x9c9ad8(0xc0a)]()['wtypeId']||0x0);const _0xecf15f=$dataSystem[_0x9c9ad8(0x4ab)][_0x164a12];_0x206af6[_0x9c9ad8(0x298)](/attack/i)&&(_0x206af6=['thrust',_0x9c9ad8(0x3c3),_0x9c9ad8(0xd14)][_0xecf15f[_0x9c9ad8(0x5cc)]]||_0x9c9ad8(0x3c3)),this[_0x9c9ad8(0x344)]={'motionType':_0x206af6,'weaponImageId':_0x542976?_0xecf15f['weaponImageId']:0x0,'pattern':_0x39282e};},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xd1d)]=function(_0x1232d4){const _0x4d5db2=_0x54b1a4;if(!_0x1232d4)return![];return _0x1232d4['friendsUnit']()===this[_0x4d5db2(0x581)]();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x760)]=function(_0x166c04){const _0x56a691=_0x54b1a4;if(!_0x166c04)return![];return _0x166c04[_0x56a691(0xb1e)]()===this['friendsUnit']();},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x702)]=function(){return![];},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x702)]=function(){const _0x25d703=_0x54b1a4;return this[_0x25d703(0x829)]()[_0x25d703(0x298)](/\$/i);},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x702)]=function(){const _0x34e884=_0x54b1a4;return this[_0x34e884(0xb3b)]()&&this['svBattlerName']()[_0x34e884(0x298)](/\$/i);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x70d)]=Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x915)],Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x915)]=function(_0xd19109){const _0x4c9945=_0x54b1a4;VisuMZ['BattleCore']['Game_Actor_setup'][_0x4c9945(0xd6c)](this,_0xd19109),this[_0x4c9945(0x89c)]();},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x89c)]=function(){const _0xd9b8ef=_0x54b1a4;this[_0xd9b8ef(0x3b4)]='',this[_0xd9b8ef(0x6fe)]()&&this['actor']()[_0xd9b8ef(0xd77)][_0xd9b8ef(0x298)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0xd9b8ef(0x3b4)]=String(RegExp['$1']));},Game_Actor['prototype']['getBattlePortraitFilename']=function(){const _0x470590=_0x54b1a4;if(this['getBattlePortrait']()!=='')return this[_0x470590(0x91a)]();else{if(Imported[_0x470590(0x24f)]&&this[_0x470590(0xb4c)]()!==''){if(_0x470590(0x33f)!==_0x470590(0xa7e))return this[_0x470590(0xb4c)]();else{if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()){const _0x292580=this[_0x470590(0x7b6)]()[_0x470590(0x508)];return _0x292580['match'](/(?:ENEMY|FOE)/i)&&_0x292580[_0x470590(0x298)](/OR/i)&&_0x292580[_0x470590(0x298)](/(?:ALLY|FRIEND)/i);}else return![];}}}return'';},Game_Actor['prototype'][_0x54b1a4(0x91a)]=function(){const _0x569db5=_0x54b1a4;if(this[_0x569db5(0x3b4)]===undefined)this[_0x569db5(0x89c)]();return this['_battlePortrait'];},Game_Actor['prototype'][_0x54b1a4(0xc93)]=function(_0x3f84a5){const _0x3a9fdc=_0x54b1a4;if(this[_0x3a9fdc(0x3b4)]===undefined)this['initBattlePortrait']();this['_battlePortrait']=_0x3f84a5;if(SceneManager[_0x3a9fdc(0xbbd)]()&&$gameParty[_0x3a9fdc(0x562)]()[_0x3a9fdc(0xd4a)](this)){const _0x34131d=SceneManager[_0x3a9fdc(0xc22)][_0x3a9fdc(0x89f)];_0x34131d&&(_0x3a9fdc(0xb11)!==_0x3a9fdc(0xb11)?_0x57ea2f[_0x3a9fdc(0x33b)](_0x3a9fdc(0x44c)):_0x34131d[_0x3a9fdc(0x642)](this));}},Game_Actor[_0x54b1a4(0x375)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x811)]=function(){const _0x543e40=_0x54b1a4;if(!this[_0x543e40(0xaee)]()&&BattleManager[_0x543e40(0xcb7)])return!![];return Game_Battler[_0x543e40(0x375)][_0x543e40(0x811)][_0x543e40(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x72b)]=Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x322)],Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x322)]=function(){const _0x41ec2c=_0x54b1a4;if(BattleManager['_autoBattle']&&!ConfigManager[_0x41ec2c(0x3c1)])return this[_0x41ec2c(0xd4d)]();else{if(_0x41ec2c(0x807)===_0x41ec2c(0x807)){return VisuMZ[_0x41ec2c(0x387)][_0x41ec2c(0x72b)]['call'](this);;}else{_0x23b081['playReflection']();let _0x39bd51=_0x31ec20['BattleCore'][_0x41ec2c(0x916)][_0x41ec2c(0x493)][_0x41ec2c(0x888)];_0x39bd51>0x0&&(_0x318c19[_0x41ec2c(0x2e5)]?_0x166d86[_0x41ec2c(0xd50)]([this],_0x39bd51):_0x53f2bd[_0x41ec2c(0x89d)]([this],_0x39bd51));}}},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xd4d)]=function(){const _0x18041c=_0x54b1a4,_0xeb72ad=[],_0x5902c3=new Game_Action(this);return _0x5902c3[_0x18041c(0x2ab)](),_0xeb72ad[_0x18041c(0x519)](_0x5902c3),_0xeb72ad;},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x875)]=function(){const _0x9450d1=_0x54b1a4;if(this[_0x9450d1(0xdd8)]()[_0x9450d1(0xd77)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x9450d1(0xbfb)===_0x9450d1(0xbfb))return String(RegExp['$1'])['split'](/[\r\n]+/);else _0x43e26f=_0x482115[_0x9450d1(0x887)]()[_0x9450d1(0x6f7)],_0x3653a9=_0x4c4137['battler']()[_0x9450d1(0x96f)];}else return VisuMZ[_0x9450d1(0x387)][_0x9450d1(0x916)]['ActorCmd'][_0x9450d1(0x4ec)];},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x5ec)]=function(){const _0xa1d22d=_0x54b1a4;if(this['_cache'][_0xa1d22d(0x9fa)]!==undefined)return this[_0xa1d22d(0x91d)][_0xa1d22d(0x9fa)];return this[_0xa1d22d(0x6fe)]()[_0xa1d22d(0xd77)][_0xa1d22d(0x298)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xa1d22d(0x91d)][_0xa1d22d(0x9fa)]=eval(RegExp['$1']),this[_0xa1d22d(0x91d)][_0xa1d22d(0x9d4)]=eval(RegExp['$2'])):_0xa1d22d(0x9b2)===_0xa1d22d(0x9b2)?this[_0xa1d22d(0x91d)][_0xa1d22d(0x9fa)]=Game_Battler[_0xa1d22d(0x375)][_0xa1d22d(0x5ec)]['call'](this):this['drawItemStyleIconText'](_0x548cdb),this[_0xa1d22d(0x91d)][_0xa1d22d(0x9fa)];},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x976)]=function(){const _0x145371=_0x54b1a4;if(this[_0x145371(0x91d)][_0x145371(0x9d4)]!==undefined)return this['_cache'][_0x145371(0x9d4)];return this[_0x145371(0x6fe)]()['note'][_0x145371(0x298)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x145371(0x91d)]['svAnchorX']=eval(RegExp['$1']),this[_0x145371(0x91d)][_0x145371(0x9d4)]=eval(RegExp['$2'])):this[_0x145371(0x91d)]['svAnchorY']=Game_Battler['prototype'][_0x145371(0x976)][_0x145371(0xd6c)](this),this['_cache'][_0x145371(0x9d4)];},Game_Actor['prototype'][_0x54b1a4(0xc7a)]=function(){const _0x291a4e=_0x54b1a4;if(this[_0x291a4e(0x91d)][_0x291a4e(0x82b)]!==undefined)return this[_0x291a4e(0x91d)][_0x291a4e(0x82b)];if(this[_0x291a4e(0x6fe)]()[_0x291a4e(0xd77)][_0x291a4e(0x298)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x291a4e(0x91d)][_0x291a4e(0x82b)]=!![];else{if(this[_0x291a4e(0x6fe)]()['note'][_0x291a4e(0x298)](/<SIDEVIEW HIDE SHADOW>/i))'djYmn'!==_0x291a4e(0xbf7)?this[_0x291a4e(0x9e2)]-=0x10:this[_0x291a4e(0x91d)]['svShadow']=![];else{if(_0x291a4e(0xcb3)!==_0x291a4e(0xcb3)){if(_0x31b293){const _0x15d64e=_0x2b2773['indexOf'](_0x222bfd);return _0x15d64e>=0x0?[_0x1cdf11[_0x15d64e+0x1]||_0xafa137]:[_0x491078];}}else this[_0x291a4e(0x91d)][_0x291a4e(0x82b)]=Game_Battler['prototype'][_0x291a4e(0xc7a)][_0x291a4e(0xd6c)](this);}}return this[_0x291a4e(0x91d)][_0x291a4e(0x82b)];},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x8d5)]=function(){const _0xec83b7=_0x54b1a4;return VisuMZ[_0xec83b7(0x387)][_0xec83b7(0x916)]['Actor'][_0xec83b7(0x393)];},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x601)]=function(){const _0x8b91ae=_0x54b1a4,_0x44b89c=this[_0x8b91ae(0x765)](),_0x993f4c=_0x44b89c[0x0]?_0x44b89c[0x0][_0x8b91ae(0xc87)]:0x0,_0x1999f2=$dataSystem[_0x8b91ae(0x4ab)][_0x993f4c];_0x1999f2&&this[_0x8b91ae(0x4c6)](_0x1999f2['weaponImageId']);},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x357)]=function(_0x1f9500){const _0x3f41d9=_0x54b1a4;Game_Battler[_0x3f41d9(0x375)][_0x3f41d9(0x357)][_0x3f41d9(0xd6c)](this,_0x1f9500),this[_0x3f41d9(0x7eb)](_0x1f9500);},Game_Actor[_0x54b1a4(0x375)]['getAttackMotion']=function(){const _0x2d40d5=_0x54b1a4,_0xb99707=this['weapons'](),_0x46badd=_0xb99707[0x0]?_0xb99707[0x0][_0x2d40d5(0xc87)]:0x0;return $dataSystem[_0x2d40d5(0x4ab)][_0x46badd];},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x804)]=function(_0x36400e){const _0x27a816=_0x54b1a4;_0x36400e=_0x36400e||0x1,_0x36400e--;const _0x44416b=this[_0x27a816(0x765)]();return _0x44416b[_0x36400e]?_0x44416b[_0x36400e][_0x27a816(0xbb4)]:0x0;},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x43b)]=function(_0x558dbb){const _0x568be4=_0x54b1a4;_0x558dbb=_0x558dbb||0x1,_0x558dbb--;const _0x16f615=this[_0x568be4(0x765)](),_0x738f05=_0x16f615[_0x558dbb]?_0x16f615[_0x558dbb][_0x568be4(0xc87)]:0x0;return $dataSystem[_0x568be4(0x4ab)][_0x738f05];},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x3e1)]=function(_0x14b616){const _0x175b8b=_0x54b1a4;_0x14b616=_0x14b616||0x1,_0x14b616--;const _0x87c920=this[_0x175b8b(0x765)](),_0x27ede=_0x87c920[_0x14b616]?_0x87c920[_0x14b616]['wtypeId']:0x0,_0x51ab2d=$dataSystem[_0x175b8b(0x4ab)][_0x27ede];if(_0x51ab2d){if(_0x51ab2d[_0x175b8b(0x5cc)]===0x0)_0x175b8b(0x2a2)!==_0x175b8b(0x2a2)?(this[_0x175b8b(0xc9a)](),this[_0x175b8b(0xc15)]=null,this[_0x175b8b(0x2e1)]=![]):this[_0x175b8b(0x676)]('thrust');else{if(_0x51ab2d[_0x175b8b(0x5cc)]===0x1)this['requestMotion'](_0x175b8b(0x3c3));else _0x51ab2d[_0x175b8b(0x5cc)]===0x2&&this['requestMotion'](_0x175b8b(0xd14));}this[_0x175b8b(0x4c6)](_0x51ab2d['weaponImageId']);}},Game_Battler['prototype'][_0x54b1a4(0x635)]=function(_0xd9c333){const _0x14374a=_0x54b1a4;this[_0x14374a(0x86a)]=_0xd9c333||0x0,this[_0x14374a(0x91d)]={};},Game_Battler['prototype'][_0x54b1a4(0xd83)]=function(){const _0x1c80ef=_0x54b1a4;this[_0x1c80ef(0x86a)]=this['_activeWeaponSlot']||0x0,this[_0x1c80ef(0x86a)]++,this[_0x1c80ef(0x91d)]={};},Game_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xd5b)]=function(){const _0x195807=_0x54b1a4;this['_activeWeaponSlot']=undefined,this[_0x195807(0x91d)]={};},VisuMZ[_0x54b1a4(0x387)]['Game_Actor_equips']=Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xaf3)],Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xaf3)]=function(){const _0x407c9c=_0x54b1a4;let _0x5b6ef1=VisuMZ['BattleCore'][_0x407c9c(0xdb6)]['call'](this);if(this['_tempEquipCheck'])return _0x5b6ef1;if(this[_0x407c9c(0x86a)]!==undefined){this[_0x407c9c(0x333)]=!![];const _0x9c2021=this[_0x407c9c(0xa4f)]();for(let _0x1463c7=0x0;_0x1463c7<_0x9c2021[_0x407c9c(0x69d)];_0x1463c7++){_0x407c9c(0xb47)!==_0x407c9c(0xb47)?this['openBattleActorWindow']():_0x9c2021[_0x1463c7]===0x1&&this[_0x407c9c(0x86a)]!==_0x1463c7&&(_0x5b6ef1[_0x1463c7]=null);}this[_0x407c9c(0x333)]=undefined;}return _0x5b6ef1;},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x423)]=function(_0x2acf24){const _0x304e9a=_0x54b1a4;if(_0x2acf24[_0x304e9a(0xa2c)]()){if(_0x304e9a(0xaef)!=='jqKAM')_0x3ff0c2[_0x304e9a(0x5e6)]();else return _0x2acf24[_0x304e9a(0x765)]()[_0x304e9a(0x69d)]||0x1;}else{if(_0x304e9a(0xba7)===_0x304e9a(0xae7))_0x45296a['BattleCore'][_0x304e9a(0x658)][_0x304e9a(0xd6c)](this,_0x10ff81),this[_0x304e9a(0x412)]();else return 0x1;}},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x8d2)]=function(_0x1b4317,_0x71c8d6){const _0x18aafa=_0x54b1a4;_0x1b4317&&_0x1b4317[_0x18aafa(0xa2c)]()&&_0x1b4317['setActiveWeaponSlot'](_0x71c8d6),this[_0x18aafa(0x318)]();},Window_BattleLog[_0x54b1a4(0x375)]['clearActiveWeaponSet']=function(_0x3ab77b){const _0x212d79=_0x54b1a4;_0x3ab77b&&_0x3ab77b[_0x212d79(0xa2c)]()&&_0x3ab77b['clearActiveWeaponSlot'](),this[_0x212d79(0x318)]();},Game_Actor[_0x54b1a4(0x375)]['battleUIOffsetX']=function(){const _0x547dde=_0x54b1a4;let _0x4fdddb=_0x547dde(0xa27);if(this[_0x547dde(0x68c)](_0x4fdddb))return this['_cache'][_0x4fdddb];return this[_0x547dde(0x91d)][_0x4fdddb]=this[_0x547dde(0xac1)](this[_0x547dde(0x6fe)]()),this[_0x547dde(0x91d)][_0x4fdddb];},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x673)]=function(){const _0x193a4c=_0x54b1a4;let _0x229103=_0x193a4c(0x673);if(this[_0x193a4c(0x68c)](_0x229103))return this[_0x193a4c(0x91d)][_0x229103];return this[_0x193a4c(0x91d)][_0x229103]=this[_0x193a4c(0x367)](this[_0x193a4c(0x6fe)]()),this['_cache'][_0x229103];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x4e8)]=Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x915)],Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x915)]=function(_0x312454,_0x454362,_0x4c8f26){const _0x1c4ba4=_0x54b1a4;_0x312454=DataManager['swapEnemyIDs'](_0x312454),VisuMZ[_0x1c4ba4(0x387)][_0x1c4ba4(0x4e8)][_0x1c4ba4(0xd6c)](this,_0x312454,_0x454362,_0x4c8f26),Imported[_0x1c4ba4(0xcbe)]&&this[_0x1c4ba4(0x9a2)](),this[_0x1c4ba4(0xcf5)](),this['setupBattleCoreData'](),Imported[_0x1c4ba4(0xcbe)]&&this['recoverAll']();},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xcf5)]=function(){const _0x902b8a=_0x54b1a4,_0x444a26=VisuMZ[_0x902b8a(0x387)][_0x902b8a(0x916)][_0x902b8a(0x809)];this[_0x902b8a(0x252)]=_0x444a26[_0x902b8a(0x5b7)],this[_0x902b8a(0xadc)]={};},Game_Enemy[_0x54b1a4(0x375)]['setupBattleCoreData']=function(){const _0x5616cf=_0x54b1a4,_0x37942b=VisuMZ[_0x5616cf(0x387)]['Settings'][_0x5616cf(0x809)],_0x48904f=this['enemy']()['note'];this[_0x5616cf(0xadc)]={'name':'','wtypeId':_0x37942b[_0x5616cf(0x29e)],'collapse':_0x37942b['AllowCollapse'],'motionIdle':_0x37942b[_0x5616cf(0x518)],'width':_0x37942b['Width']||0x40,'height':_0x37942b[_0x5616cf(0x5a0)]||0x40,'anchorX':_0x37942b[_0x5616cf(0x54d)]||0x0,'anchorY':_0x37942b['AnchorY']||0x0,'shadow':_0x37942b['Shadow']};if(_0x48904f[_0x5616cf(0x298)](/<ATTACK ANIMATION:[ ](\d+)>/i)){if(_0x5616cf(0x27d)===_0x5616cf(0x27d))this[_0x5616cf(0x252)]=Number(RegExp['$1']);else return 0x1;}const _0x2051a7=this[_0x5616cf(0xadc)];if(_0x48904f[_0x5616cf(0x298)](/<SIDEVIEW BATTLER: (.*)>/i))_0x2051a7[_0x5616cf(0x56b)]=String(RegExp['$1']);else{if(_0x48904f['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x5ce103=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x5616cf(0xd79)]('');_0x2051a7[_0x5616cf(0x56b)]=DataManager['processRandomizedData'](_0x5ce103);}}_0x48904f[_0x5616cf(0x298)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x2051a7[_0x5616cf(0x613)]=eval(RegExp['$1']),_0x2051a7[_0x5616cf(0x6f3)]=eval(RegExp['$2']));if(_0x48904f['match'](/<SIDEVIEW COLLAPSE>/i))_0x2051a7['collapse']=!![];else _0x48904f[_0x5616cf(0x298)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x2051a7['collapse']=![]);if(_0x48904f[_0x5616cf(0x298)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x5616cf(0x8b7)!=='iCWot')return _0x58fd40[_0x5616cf(0x887)]()[_0x5616cf(0xb10)]-_0xccaf00['battler']()['_baseY'];else _0x2051a7['shadow']=!![];}else _0x48904f[_0x5616cf(0x298)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x2051a7[_0x5616cf(0xa8e)]=![]);if(_0x48904f['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x2051a7[_0x5616cf(0xad2)]=String(RegExp['$1'])[_0x5616cf(0x6d1)]()[_0x5616cf(0x2f4)]();else{if(_0x48904f[_0x5616cf(0x298)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x5616cf(0x2fe)!==_0x5616cf(0x2fe))this[_0x5616cf(0xa99)]=_0x3fbf22;else{const _0x2a4d8a=String(RegExp['$1'])[_0x5616cf(0x3a1)](/[\r\n]+/)[_0x5616cf(0xd79)]('');_0x2051a7[_0x5616cf(0xad2)]=DataManager[_0x5616cf(0x9eb)](_0x2a4d8a);}}}if(_0x48904f['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)){if(_0x5616cf(0xa62)!==_0x5616cf(0xa62))for(const _0x30aedd of this['members']()){if(_0x30aedd)_0x30aedd[_0x5616cf(0x506)](_0x282377);}else _0x2051a7[_0x5616cf(0x495)]=Number(RegExp['$1']),_0x2051a7[_0x5616cf(0xdd7)]=Number(RegExp['$2']);}if(_0x48904f[_0x5616cf(0x298)](/<SIDEVIEW WEAPON: (.*)>/i))_0x2051a7[_0x5616cf(0xc87)]=DataManager[_0x5616cf(0x2f0)](RegExp['$1']);else{if(_0x48904f[_0x5616cf(0x298)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x50130c=String(RegExp['$1'])[_0x5616cf(0x3a1)](/[\r\n]+/)[_0x5616cf(0xd79)](''),_0x7599c4=DataManager[_0x5616cf(0x9eb)](_0x50130c);_0x2051a7[_0x5616cf(0xc87)]=DataManager[_0x5616cf(0x2f0)](_0x7599c4);}}if(Imported[_0x5616cf(0xcbe)]){const _0x2c0422=this[_0x5616cf(0x852)]();for(const _0x35bced of _0x2c0422){if(_0x5616cf(0xc80)==='myUwh')this[_0x5616cf(0x582)]()?(this[_0x5616cf(0x464)]=!![],this[_0x5616cf(0x82e)][_0x5616cf(0x519)](_0x5616cf(0xcd7),_0x3c05c8[_0x5616cf(0x387)][_0x5616cf(0x916)][_0x5616cf(0x458)][_0x5616cf(0xa83)])):this[_0x5616cf(0x446)]();else{const _0x2adae4=this[_0x5616cf(0x241)](_0x35bced)[_0x5616cf(0x8cf)][_0x5616cf(0x8fd)]()[_0x5616cf(0x2f4)](),_0x309849=_0x35bced[_0x5616cf(0x8fd)]()[_0x5616cf(0x2f4)]();if(_0x48904f[_0x5616cf(0x298)](VisuMZ[_0x5616cf(0x324)]['RegExp'][_0x5616cf(0x434)[_0x5616cf(0xd76)](_0x309849,_0x2adae4)]))_0x2051a7[_0x5616cf(0x56b)]=String(RegExp['$1']);else{if(_0x48904f['match'](VisuMZ[_0x5616cf(0x324)]['RegExp']['SvBattlerMass-%1-%2'[_0x5616cf(0xd76)](_0x309849,_0x2adae4)])){const _0x8caea9=String(RegExp['$1'])[_0x5616cf(0x3a1)](/[\r\n]+/)[_0x5616cf(0xd79)]('');_0x2051a7[_0x5616cf(0x56b)]=DataManager['processRandomizedData'](_0x8caea9);}}if(_0x48904f[_0x5616cf(0x298)](VisuMZ['ElementStatusCore'][_0x5616cf(0x794)]['SvWeaponSolo-%1-%2'['format'](_0x309849,_0x2adae4)]))_0x5616cf(0x606)!==_0x5616cf(0x606)?this[_0x5616cf(0xa42)][_0x5616cf(0x6a8)](_0x58aa69):_0x2051a7[_0x5616cf(0xc87)]=DataManager[_0x5616cf(0x2f0)](RegExp['$1']);else{if(_0x48904f[_0x5616cf(0x298)](VisuMZ[_0x5616cf(0x324)]['RegExp'][_0x5616cf(0x2a9)[_0x5616cf(0xd76)](_0x309849,_0x2adae4)])){const _0x443ffe=String(RegExp['$1'])[_0x5616cf(0x3a1)](/[\r\n]+/)[_0x5616cf(0xd79)](''),_0x3ec1f7=DataManager[_0x5616cf(0x9eb)](_0x443ffe);_0x2051a7['wtypeId']=DataManager[_0x5616cf(0x2f0)](_0x3ec1f7);}}if(_0x48904f[_0x5616cf(0x298)](VisuMZ[_0x5616cf(0x324)][_0x5616cf(0x794)][_0x5616cf(0x498)[_0x5616cf(0xd76)](_0x309849,_0x2adae4)]))_0x2051a7[_0x5616cf(0xad2)]=String(RegExp['$1'])[_0x5616cf(0x6d1)]()[_0x5616cf(0x2f4)]();else{if(_0x48904f[_0x5616cf(0x298)](VisuMZ[_0x5616cf(0x324)][_0x5616cf(0x794)][_0x5616cf(0x778)[_0x5616cf(0xd76)](_0x309849,_0x2adae4)])){const _0x32df71=String(RegExp['$1'])[_0x5616cf(0x3a1)](/[\r\n]+/)['remove']('');_0x2051a7[_0x5616cf(0xad2)]=DataManager[_0x5616cf(0x9eb)](_0x32df71);}}}}}},Game_Enemy[_0x54b1a4(0x375)]['attackAnimationId1']=function(){const _0x448719=_0x54b1a4;return this[_0x448719(0x252)]||0x0;},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x968)]=function(){const _0x19c675=_0x54b1a4;return this[_0x19c675(0xba3)]();},Game_Enemy['prototype'][_0x54b1a4(0x804)]=function(_0x4ee25b){return this['attackAnimationId1']();},Game_Enemy['prototype'][_0x54b1a4(0x35c)]=function(){const _0x282327=_0x54b1a4;if(this[_0x282327(0x717)]()[_0x282327(0xd77)][_0x282327(0x298)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x282327(0x375)][_0x282327(0x35c)]['call'](this);},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xd28)]=function(){const _0x407b05=_0x54b1a4;if(this['enemy']()[_0x407b05(0xd77)][_0x407b05(0x298)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x32f)]=function(){const _0x278fe9=_0x54b1a4,_0x96d73=[];for(const _0x9b72b7 of this[_0x278fe9(0x717)]()[_0x278fe9(0x69c)]){if('FLLbB'!==_0x278fe9(0x5f3)){const _0x2d3ea4=_0x850cbf[_0x278fe9(0x387)][_0x278fe9(0x916)][_0x278fe9(0x3a2)],_0x386edd=_0x4b153e[_0x278fe9(0xb45)]();if(_0x2d3ea4[_0x278fe9(0xd9b)])this[_0x278fe9(0x8ee)](_0x57b0ff,_0x386edd['addedBuffs'],_0x16516f['buffAdd']);if(_0x2d3ea4[_0x278fe9(0x756)])this[_0x278fe9(0x8ee)](_0x3c34a4,_0x386edd[_0x278fe9(0x3f9)],_0x23d2ec[_0x278fe9(0x291)]);if(_0x2d3ea4[_0x278fe9(0x1e7)])this['displayBuffs'](_0x135b0a,_0x386edd[_0x278fe9(0xd47)],_0x1270ef['buffRemove']);}else{const _0x1524e3=$dataSkills[_0x9b72b7[_0x278fe9(0x2ff)]];if(_0x1524e3&&!_0x96d73[_0x278fe9(0xd4a)](_0x1524e3))_0x96d73['push'](_0x1524e3);}}return _0x96d73;},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xa27)]=function(){const _0x5b6dc2=_0x54b1a4;let _0x646863=_0x5b6dc2(0xa27);if(this[_0x5b6dc2(0x68c)](_0x646863))return this['_cache'][_0x646863];return this['_cache'][_0x646863]=this['createBattleUIOffsetX'](this['enemy']()),this[_0x5b6dc2(0x91d)][_0x646863];},Game_Enemy[_0x54b1a4(0x375)]['battleUIOffsetY']=function(){const _0xf7896=_0x54b1a4;let _0x3428f4=_0xf7896(0x673);if(this[_0xf7896(0x68c)](_0x3428f4))return this[_0xf7896(0x91d)][_0x3428f4];return this[_0xf7896(0x91d)][_0x3428f4]=this[_0xf7896(0x367)](this[_0xf7896(0x717)]()),this['_cache'][_0x3428f4];},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xc0a)]=function(){const _0x1b8f0a=_0x54b1a4;if(this['_svBattlerData']!==undefined)return this[_0x1b8f0a(0xadc)];return this[_0x1b8f0a(0x574)](),this[_0x1b8f0a(0xadc)];},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xb3b)]=function(){const _0x111ac5=_0x54b1a4;return this[_0x111ac5(0xc0a)]()[_0x111ac5(0x56b)]!=='';},Game_Enemy['prototype']['svBattlerName']=function(){const _0x38bf5b=_0x54b1a4;return this['svBattlerData']()[_0x38bf5b(0x56b)];},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x8d5)]=function(){const _0xa00c1=_0x54b1a4;return this['hasSvBattler']()?VisuMZ['BattleCore'][_0xa00c1(0x916)][_0xa00c1(0x2c1)][_0xa00c1(0x393)]:VisuMZ[_0xa00c1(0x387)][_0xa00c1(0x916)][_0xa00c1(0x809)][_0xa00c1(0x393)];},Game_Enemy[_0x54b1a4(0x375)]['performAction']=function(_0x4f556){const _0x1f5159=_0x54b1a4;Game_Battler[_0x1f5159(0x375)]['performAction'][_0x1f5159(0xd6c)](this,_0x4f556);if(this[_0x1f5159(0xb3b)]())this[_0x1f5159(0x7eb)](_0x4f556);},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x9c7)]=function(){const _0x3c5e3d=_0x54b1a4,_0x412a36=this['svBattlerData']()['wtypeId']||0x0,_0x328634=$dataSystem[_0x3c5e3d(0x4ab)][_0x412a36];if(_0x328634){if(_0x328634[_0x3c5e3d(0x5cc)]===0x0){if(_0x3c5e3d(0x1f6)!==_0x3c5e3d(0x639))this[_0x3c5e3d(0x676)](_0x3c5e3d(0x405));else{if(_0x468f6a['createKeyJS'])return _0x2ba3b0[_0x3c5e3d(0x82a)](_0x11eac1,_0x2e4843);let _0x471d44='';if(_0x57e365['includes'](_0x3c518f))_0x471d44=_0x3c5e3d(0xd3c)['format'](_0x5919c2['id'],_0x290a28);if(_0x36a1c0[_0x3c5e3d(0xd4a)](_0x2ac7e2))_0x471d44=_0x3c5e3d(0x91c)[_0x3c5e3d(0xd76)](_0x202934['id'],_0x53bc8a);if(_0x2bfdb2['includes'](_0x54f467))_0x471d44='Skill-%1-%2'[_0x3c5e3d(0xd76)](_0x59fd66['id'],_0x47dfc2);if(_0x46c7c1[_0x3c5e3d(0xd4a)](_0x20e14a))_0x471d44=_0x3c5e3d(0x56f)[_0x3c5e3d(0xd76)](_0x4577ea['id'],_0x364ca4);if(_0x429887[_0x3c5e3d(0xd4a)](_0x12446a))_0x471d44=_0x3c5e3d(0xc9c)[_0x3c5e3d(0xd76)](_0x4b8503['id'],_0x2d9af5);if(_0xde384c['includes'](_0x267619))_0x471d44=_0x3c5e3d(0x548)[_0x3c5e3d(0xd76)](_0x37af2c['id'],_0x5a9234);if(_0x1aaa2d[_0x3c5e3d(0xd4a)](_0x5e313c))_0x471d44=_0x3c5e3d(0xbc9)[_0x3c5e3d(0xd76)](_0x5ad26b['id'],_0x32bb2b);if(_0x52fe2c[_0x3c5e3d(0xd4a)](_0x267ea5))_0x471d44='State-%1-%2'[_0x3c5e3d(0xd76)](_0x38e187['id'],_0x7e8d8);return _0x471d44;}}else{if(_0x328634[_0x3c5e3d(0x5cc)]===0x1){if('cUJgb'===_0x3c5e3d(0x87a)){const _0x2064b6=this[_0x3c5e3d(0x8a1)];_0x2064b6[_0x3c5e3d(0x733)](_0x15072c,0x0,_0x3b14a9['y'],_0x2064b6[_0x3c5e3d(0xc0c)],'center');}else this['requestMotion'](_0x3c5e3d(0x3c3));}else _0x328634['type']===0x2&&(_0x3c5e3d(0xbee)===_0x3c5e3d(0x323)?_0x451b37[_0x3c5e3d(0x7d0)]?this['battleCorePreBattleCommonEvent']():_0x103a43[_0x3c5e3d(0x387)][_0x3c5e3d(0x98f)][_0x3c5e3d(0xd6c)](this):this[_0x3c5e3d(0x676)](_0x3c5e3d(0xd14)));}}},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x601)]=function(){const _0x31607d=_0x54b1a4,_0x96e2e4=this[_0x31607d(0xc0a)]()[_0x31607d(0xc87)]||0x0,_0x296a54=$dataSystem['attackMotions'][_0x96e2e4];_0x296a54&&this[_0x31607d(0x4c6)](_0x296a54[_0x31607d(0xb16)]);},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x5b5)]=function(){const _0x195887=_0x54b1a4,_0x3b979a=this['svBattlerData']()[_0x195887(0xc87)]||0x0;return $dataSystem[_0x195887(0x4ab)][_0x3b979a];},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x43b)]=function(_0x1fbaa7){const _0x3f5d31=_0x54b1a4;return this[_0x3f5d31(0x5b5)]();},Game_Enemy[_0x54b1a4(0x375)]['performDamage']=function(){const _0x598924=_0x54b1a4;Game_Battler[_0x598924(0x375)][_0x598924(0x512)]['call'](this),this[_0x598924(0xd4b)]()&&this[_0x598924(0xb3b)]()&&this[_0x598924(0x676)](_0x598924(0x220)),SoundManager[_0x598924(0x2ad)]();},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x2aa)]=function(){const _0xd74139=_0x54b1a4;Game_Battler['prototype'][_0xd74139(0x2aa)][_0xd74139(0xd6c)](this),this[_0xd74139(0x676)]('evade');},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xac2)]=function(){const _0x1732a2=_0x54b1a4;Game_Battler[_0x1732a2(0x375)][_0x1732a2(0xac2)][_0x1732a2(0xd6c)](this),this[_0x1732a2(0x676)]('evade');},Game_Enemy[_0x54b1a4(0x375)]['performCounter']=function(){const _0x23f86d=_0x54b1a4;Game_Battler[_0x23f86d(0x375)]['performCounter'][_0x23f86d(0xd6c)](this),this[_0x23f86d(0x9c7)]();},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x2e4)]=function(){const _0x3cd703=_0x54b1a4;if(this[_0x3cd703(0xb3b)]()){if(this[_0x3cd703(0x3c2)]()>=0x1)return!![];return this[_0x3cd703(0xc0a)]()[_0x3cd703(0xcc2)];}else return!![];},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x5ec)]=function(){const _0x17e7c3=_0x54b1a4;return this[_0x17e7c3(0xc0a)]()['anchorX'];},Game_Enemy[_0x54b1a4(0x375)]['svBattlerAnchorY']=function(){const _0x5b8908=_0x54b1a4;return this[_0x5b8908(0xc0a)]()[_0x5b8908(0x6f3)];},Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xc7a)]=function(){const _0x3ddfda=_0x54b1a4;return this[_0x3ddfda(0xc0a)]()[_0x3ddfda(0xa8e)];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xdca)]=Game_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x430)],Game_Enemy['prototype'][_0x54b1a4(0x430)]=function(_0x322935){const _0x376f77=_0x54b1a4;VisuMZ[_0x376f77(0x387)][_0x376f77(0xdca)]['call'](this,_0x322935),this[_0x376f77(0xcf5)](),this[_0x376f77(0x574)]();const _0x4719e4=this['battler']();_0x4719e4&&(_0x4719e4['_battlerName']=undefined,_0x4719e4[_0x376f77(0xc0f)](this));},Game_Unit[_0x54b1a4(0x375)][_0x54b1a4(0x506)]=function(_0x2153de){const _0x5980b8=_0x54b1a4;for(const _0x175409 of this[_0x5980b8(0x328)]()){if(_0x175409)_0x175409['processBattleCoreJS'](_0x2153de);}},Game_Unit[_0x54b1a4(0x375)][_0x54b1a4(0xab2)]=function(){const _0x2a2ca1=_0x54b1a4,_0x471d43=this[_0x2a2ca1(0x6a6)]();return _0x471d43[Math[_0x2a2ca1(0xcf9)](_0x471d43[_0x2a2ca1(0x69d)])];},VisuMZ['BattleCore'][_0x54b1a4(0xa0a)]=Game_Party[_0x54b1a4(0x375)][_0x54b1a4(0x5c1)],Game_Party[_0x54b1a4(0x375)][_0x54b1a4(0x5c1)]=function(_0x3d6324){const _0x58b167=_0x54b1a4;VisuMZ['BattleCore'][_0x58b167(0xa0a)][_0x58b167(0xd6c)](this,_0x3d6324),BattleManager['refreshStatusWindow']();},VisuMZ[_0x54b1a4(0x387)]['Game_Party_removeActor']=Game_Party['prototype'][_0x54b1a4(0x277)],Game_Party[_0x54b1a4(0x375)]['removeActor']=function(_0x5383ed){const _0x25e5fe=_0x54b1a4;VisuMZ[_0x25e5fe(0x387)]['Game_Party_removeActor'][_0x25e5fe(0xd6c)](this,_0x5383ed),BattleManager[_0x25e5fe(0x7a5)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x8f7)]=Game_Troop[_0x54b1a4(0x375)]['setup'],Game_Troop[_0x54b1a4(0x375)][_0x54b1a4(0x915)]=function(_0x1c23f4){const _0x1edfb0=_0x54b1a4;$gameTemp[_0x1edfb0(0x7ae)](),$gameTemp[_0x1edfb0(0x9cf)](_0x1c23f4),VisuMZ[_0x1edfb0(0x387)][_0x1edfb0(0x8f7)][_0x1edfb0(0xd6c)](this,_0x1c23f4),this[_0x1edfb0(0x748)]();},VisuMZ[_0x54b1a4(0x387)]['Game_Troop_expTotal']=Game_Troop[_0x54b1a4(0x375)]['expTotal'],Game_Troop['prototype'][_0x54b1a4(0xacf)]=function(){const _0x220fc9=_0x54b1a4;let _0x316ebb=VisuMZ[_0x220fc9(0x387)]['Game_Troop_expTotal'][_0x220fc9(0xd6c)](this);return this['expRate']&&(_0x316ebb*=this['expRate']()),Math[_0x220fc9(0x8c0)](_0x316ebb);},Game_Troop[_0x54b1a4(0x375)][_0x54b1a4(0xcde)]=function(){return 0x1;},Game_Troop[_0x54b1a4(0x375)][_0x54b1a4(0x748)]=function(){const _0x34b816=_0x54b1a4,_0x1d9762=DataManager[_0x34b816(0x6fa)](this['troop']()['id']);if(_0x1d9762[_0x34b816(0x298)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x2cad3c=RegExp['$1'][_0x34b816(0x3a1)](',')[_0x34b816(0x8bb)](_0x56c8e9=>Number(_0x56c8e9));this[_0x34b816(0xcc5)](),this['processExtendTroopMembers'](_0x2cad3c);}},Game_Troop[_0x54b1a4(0x375)][_0x54b1a4(0xcc5)]=function(){const _0x30ca0a=_0x54b1a4;let _0x4b89e8=_0x30ca0a(0x1ee)+'\x0a';_0x4b89e8+=_0x30ca0a(0x758);Imported[_0x30ca0a(0x69b)]&&(_0x30ca0a(0x2fb)!==_0x30ca0a(0x2fb)?(this['_currentActor']=this['_tpbSceneChangeCacheActor'],this[_0x30ca0a(0xc15)]['_tpbState']=_0x30ca0a(0x650),this[_0x30ca0a(0x2e1)]=!![],this[_0x30ca0a(0x3a0)]=null):VisuMZ[_0x30ca0a(0x250)][_0x30ca0a(0xc92)]<1.11&&(alert(_0x4b89e8[_0x30ca0a(0xd76)](_0x30ca0a(0x240))),SceneManager['exit']()));Imported['VisuMZ_2_BattleSystemCTB']&&(VisuMZ[_0x30ca0a(0x8f4)][_0x30ca0a(0xc92)]<1.19&&(alert(_0x4b89e8['format'](_0x30ca0a(0x8ba))),SceneManager[_0x30ca0a(0x3ca)]()));if(Imported[_0x30ca0a(0xa12)]){if(_0x30ca0a(0x664)!==_0x30ca0a(0x664)){_0x113a30(_0x30ca0a(0xb61)),_0x192b57[_0x30ca0a(0x3ca)]();return;}else{if(VisuMZ['BattleSystemSTB'][_0x30ca0a(0xc92)]<1.15){if('ATwNs'!==_0x30ca0a(0xb5d)){const _0x4af15a=this['battleLayoutStyle']();['xp','portrait',_0x30ca0a(0x218)][_0x30ca0a(0xd4a)](_0x4af15a)&&this[_0x30ca0a(0x532)][_0x30ca0a(0x263)](),(_0x4af15a===_0x30ca0a(0x218)||this[_0x30ca0a(0x62c)]())&&(this['_skillWindow']['close'](),this[_0x30ca0a(0x750)][_0x30ca0a(0x263)]());}else alert(_0x4b89e8['format']('STB')),SceneManager[_0x30ca0a(0x3ca)]();}}}},Game_Troop['prototype']['processExtendTroopMembers']=function(_0x597f1c){const _0x4adb30=_0x54b1a4;this[_0x4adb30(0xd48)]={};for(const _0x3b0a61 of this['members']()){if(_0x4adb30(0x5ce)==='hVsbr'){if(!_0x3b0a61)continue;_0x3b0a61[_0x4adb30(0x8fb)]('');}else _0x22bbb9=this[_0x4adb30(0xc2f)]();}for(const _0x33a291 of _0x597f1c){const _0x504664=$dataTroops[_0x33a291];if(_0x504664)this[_0x4adb30(0x1f8)](_0x504664);}this[_0x4adb30(0x667)]();},Game_Troop[_0x54b1a4(0x375)][_0x54b1a4(0x1f8)]=function(_0x12f14b){const _0x4c284e=_0x54b1a4;for(const _0x24296d of _0x12f14b['members']){if($dataEnemies[_0x24296d['enemyId']]){const _0x16cbbe=_0x24296d[_0x4c284e(0x313)],_0x1d537a=_0x24296d['x'],_0x313578=_0x24296d['y'],_0x18af90=new Game_Enemy(_0x16cbbe,_0x1d537a,_0x313578);_0x24296d[_0x4c284e(0x602)]&&_0x18af90[_0x4c284e(0x5e6)](),this[_0x4c284e(0xa4d)][_0x4c284e(0x519)](_0x18af90);}}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x914)]=Game_Map[_0x54b1a4(0x375)]['setupBattleback'],Game_Map['prototype'][_0x54b1a4(0x6b7)]=function(){const _0x10abf7=_0x54b1a4;VisuMZ[_0x10abf7(0x387)]['Game_Map_setupBattleback'][_0x10abf7(0xd6c)](this),this[_0x10abf7(0x2ae)]();},Game_Map[_0x54b1a4(0x375)][_0x54b1a4(0x2ae)]=function(){const _0x3755f0=_0x54b1a4;this[_0x3755f0(0x78e)]={},this[_0x3755f0(0x3ab)]={};if(!$dataMap)return;const _0x2fdf91=$dataMap[_0x3755f0(0xd77)];if(!_0x2fdf91)return;const _0x3d6b26=_0x2fdf91['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x3d6b26){if(_0x3755f0(0xb6b)!==_0x3755f0(0xb6b))this[_0x3755f0(0x519)](_0x3755f0(0xcd7),this[_0x3755f0(0xc90)](_0x44e887));else for(const _0xe0a9f1 of _0x3d6b26){_0xe0a9f1[_0x3755f0(0x298)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x4531e8=Number(RegExp['$1']),_0x16ecb7=Number(RegExp['$2']),_0x2330b7=_0x16ecb7===0x1?this['_regionBattleback1']:this['_regionBattleback2'],_0x147876=String(RegExp['$3']);_0x2330b7[_0x4531e8]=_0x147876;}}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x862)]=Game_Map['prototype'][_0x54b1a4(0x75a)],Game_Map[_0x54b1a4(0x375)]['battleback1Name']=function(){const _0x3489a2=_0x54b1a4;if(!BattleManager['isBattleTest']()){const _0x185591=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3489a2(0x78e)]&&this['_regionBattleback1'][_0x185591])return this['_regionBattleback1'][_0x185591];}return VisuMZ[_0x3489a2(0x387)][_0x3489a2(0x862)]['call'](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x6e7)]=Game_Map[_0x54b1a4(0x375)]['battleback2Name'],Game_Map[_0x54b1a4(0x375)][_0x54b1a4(0xa5d)]=function(){const _0x33c31f=_0x54b1a4;if(!BattleManager[_0x33c31f(0x877)]()){const _0x12c980=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x33c31f(0x3ab)][_0x12c980]){if(_0x33c31f(0x63e)!=='gstBM')_0x3eb02d=(_0x269a45+_0x48414e)/0x2,_0x9fa137=-0x1;else return this[_0x33c31f(0x3ab)][_0x12c980];}}return VisuMZ[_0x33c31f(0x387)][_0x33c31f(0x6e7)][_0x33c31f(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x35a)]=Game_Map[_0x54b1a4(0x375)][_0x54b1a4(0xcae)],Game_Map[_0x54b1a4(0x375)][_0x54b1a4(0xcae)]=function(){const _0x2bbaba=_0x54b1a4;let _0x5af2bc=JsonEx['makeDeepCopy'](VisuMZ[_0x2bbaba(0x387)][_0x2bbaba(0x35a)][_0x2bbaba(0xd6c)](this));return VisuMZ[_0x2bbaba(0x387)][_0x2bbaba(0xaec)](_0x5af2bc);},VisuMZ['BattleCore'][_0x54b1a4(0xaec)]=function(_0x15eb62){const _0x29f09c=_0x54b1a4;var _0x50543a,_0x14ad6d,_0x41c28;for(_0x41c28=_0x15eb62['length']-0x1;_0x41c28>0x0;_0x41c28--){if(_0x29f09c(0x951)==='shKqu'){_0x426d10('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x24c2f4[_0x29f09c(0x3ca)]();return;}else _0x50543a=Math['floor'](Math[_0x29f09c(0xc4b)]()*(_0x41c28+0x1)),_0x14ad6d=_0x15eb62[_0x41c28],_0x15eb62[_0x41c28]=_0x15eb62[_0x50543a],_0x15eb62[_0x50543a]=_0x14ad6d;}return _0x15eb62;},VisuMZ['BattleCore'][_0x54b1a4(0x950)]=Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x477)],Game_Interpreter[_0x54b1a4(0x375)]['command357']=function(_0x124abe){const _0x31f47e=_0x54b1a4;return $gameTemp[_0x31f47e(0x46d)](this),VisuMZ[_0x31f47e(0x387)][_0x31f47e(0x950)]['call'](this,_0x124abe);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x273)]=Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x686)],Game_Interpreter[_0x54b1a4(0x375)]['updateWaitMode']=function(){const _0x5073b9=_0x54b1a4;if(SceneManager[_0x5073b9(0xbbd)]()){if(_0x5073b9(0x337)!=='fIThO')switch(this['_waitMode']){case _0x5073b9(0xb64):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x5073b9(0xa25)]()['angleDuration']>0x0)return!![];this[_0x5073b9(0xac8)]='';}break;case _0x5073b9(0xb2b):if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0xdd0)]())return!![];this['_waitMode']='';break;case _0x5073b9(0x2c0):if(Imported[_0x5073b9(0x81b)]){if('KxyDI'===_0x5073b9(0xbe2)){if($gameScreen['battleCameraData']()['cameraDuration']>0x0)return!![];if($gameScreen[_0x5073b9(0xa25)]()[_0x5073b9(0x77e)]>0x0)return!![];this[_0x5073b9(0xac8)]='';}else this[_0x5073b9(0x79b)](_0x5073b9(0xab1));}break;case _0x5073b9(0x435):if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x2e2)]())return!![];this[_0x5073b9(0xac8)]='';break;case _0x5073b9(0x6b0):if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x6f4)]())return!![];this[_0x5073b9(0xac8)]='';break;case _0x5073b9(0x668):if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x395)]())return!![];this[_0x5073b9(0xac8)]='';break;case'battlelog':if(BattleManager[_0x5073b9(0x82e)]['isBusy']())return!![];this[_0x5073b9(0xac8)]='';break;case'battleMove':if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x341)]())return!![];this[_0x5073b9(0xac8)]='';break;case _0x5073b9(0x37f):if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x7e6)]())return!![];this[_0x5073b9(0xac8)]='';break;case _0x5073b9(0x5ab):if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x6f2)]())return!![];this['_waitMode']='';break;case _0x5073b9(0x71a):if(BattleManager[_0x5073b9(0xaca)]['isAnyoneSkewing']())return!![];this[_0x5073b9(0xac8)]='';break;case _0x5073b9(0x78f):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x902)]())return!![];this[_0x5073b9(0xac8)]='';}break;case _0x5073b9(0xbb5):if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x5073b9(0xaa9)!==_0x5073b9(0xaa9))return _0x13a774[_0x5073b9(0x387)]['Settings'][_0x5073b9(0x3a2)][_0x5073b9(0x3ae)];else{if($gameScreen[_0x5073b9(0xa25)]()[_0x5073b9(0xbc4)]>0x0)return!![];this[_0x5073b9(0xac8)]='';}}break;case'battleSpin':if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x5eb)]())return!![];this[_0x5073b9(0xac8)]='';break;case _0x5073b9(0x9d0):if(Imported[_0x5073b9(0x81b)]){if($gameScreen['battleCameraData']()[_0x5073b9(0x690)]>0x0)return!![];this['_waitMode']='';}break;case _0x5073b9(0x9d7):if(Imported[_0x5073b9(0xd1c)]){if(_0x5073b9(0x549)==='bWyeh'){if(BattleManager[_0x5073b9(0xaca)]['isAnyoneInjectAniPrepping']){if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x62b)]())return!![];this[_0x5073b9(0xac8)]='battleInjectAni';}else this[_0x5073b9(0xac8)]='';break;}else _0x369132[_0x5073b9(0x387)][_0x5073b9(0x58a)][_0x5073b9(0xd6c)](this);}break;case _0x5073b9(0x55e):if(Imported[_0x5073b9(0xd1c)]){if('bXLPv'==='helHK')this['_phase']=_0x5073b9(0xb03);else{if(BattleManager[_0x5073b9(0xaca)][_0x5073b9(0x8d9)]())return!![];this['_waitMode']='';}}break;}else _0x2d395d=_0x3797b4;}return VisuMZ['BattleCore']['Game_Interpreter_updateWaitMode'][_0x5073b9(0xd6c)](this);},VisuMZ['BattleCore'][_0x54b1a4(0x9c4)]=Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x53d)],Game_Interpreter['prototype']['command301']=function(_0x2adede){const _0x12c2da=_0x54b1a4;if(!$gameParty[_0x12c2da(0xb98)]()){if(_0x12c2da(0x2f1)==='WopwP')return this[_0x12c2da(0x9b0)](_0x2adede);else this['_statusWindow'][_0x12c2da(0x340)](),this[_0x12c2da(0x2d5)][_0x12c2da(0x5e6)](),this['_actorCommandWindow'][_0x12c2da(0x741)]();}else{if('fhoHP'!==_0x12c2da(0x7bb))this[_0x12c2da(0x966)]=this['_targets']['slice'](0x0),this[_0x12c2da(0x466)]=0x0,this['_target']=this['_allTargets'][0x0]||null,this['_phase']=_0x12c2da(0x34b);else return VisuMZ['BattleCore'][_0x12c2da(0x9c4)][_0x12c2da(0xd6c)](this,_0x2adede);}},Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0xb46)]=function(_0xd15afc){const _0x5a1513=_0x54b1a4;return VisuMZ[_0x5a1513(0x387)][_0x5a1513(0x9c4)]['call'](this,_0xd15afc),BattleManager[_0x5a1513(0x394)](_0x110029=>{const _0x2f4786=_0x5a1513;this[_0x2f4786(0x5e5)][this[_0x2f4786(0xa7d)]]=_0x110029;}),!![];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x31d)]=function(_0x57b6a0){const _0xa51b75=_0x54b1a4,_0x4d99ac=$dataCommonEvents[_0x57b6a0];if(!_0x4d99ac)return![];if(_0x4d99ac[_0xa51b75(0xd3a)]['length']<=0x1)return![];return!![];},Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x9b0)]=function(_0x2a06d4){const _0x9c50d9=_0x54b1a4,_0x16294c=VisuMZ[_0x9c50d9(0x387)][_0x9c50d9(0x916)]['Mechanics'],_0x540706=_0x16294c[_0x9c50d9(0x374)],_0x59eabd=$dataCommonEvents[_0x540706];if(_0x59eabd&&VisuMZ[_0x9c50d9(0x387)][_0x9c50d9(0x31d)](_0x540706)){const _0x20b020=this[_0x9c50d9(0x94f)]()?this[_0x9c50d9(0x360)]:0x0,_0x59596b=_0x59eabd['list'];this[_0x9c50d9(0xd0d)](_0x59596b,_0x20b020),this['_list']=JsonEx['makeDeepCopy'](this[_0x9c50d9(0x8c3)]);const _0x5423bb={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx[_0x9c50d9(0x9c2)](_0x2a06d4)};return this[_0x9c50d9(0x8c3)]['splice'](this[_0x9c50d9(0x7e4)]+0x1,0x0,_0x5423bb),!![];}else return VisuMZ[_0x9c50d9(0x387)][_0x9c50d9(0x9c4)][_0x9c50d9(0xd6c)](this,_0x2a06d4);},VisuMZ['BattleCore']['BattleManager_onEncounter']=BattleManager['onEncounter'],BattleManager[_0x54b1a4(0x928)]=function(){const _0x5f3b80=_0x54b1a4;VisuMZ[_0x5f3b80(0x387)][_0x5f3b80(0x57e)][_0x5f3b80(0xd6c)](this),this[_0x5f3b80(0x78a)]();},BattleManager[_0x54b1a4(0x78a)]=function(){const _0x1bcba7=_0x54b1a4,_0x547c71=VisuMZ[_0x1bcba7(0x387)][_0x1bcba7(0x916)]['Mechanics'],_0x2c9297=_0x547c71[_0x1bcba7(0x374)];_0x2c9297&&VisuMZ['BattleCore'][_0x1bcba7(0x31d)](_0x2c9297)&&(this[_0x1bcba7(0x7d0)]=!![],$gameTemp[_0x1bcba7(0x69e)](_0x547c71[_0x1bcba7(0x374)]),$gameMap[_0x1bcba7(0x520)](),$gameMap[_0x1bcba7(0x78c)][_0x1bcba7(0x5b6)]=!![]),_0x547c71[_0x1bcba7(0xab7)]>0x0&&(_0x1bcba7(0x4bf)===_0x1bcba7(0xd1f)?this[_0x1bcba7(0xc0d)]()['canGuard']()&&_0x133924['BattleCore'][_0x1bcba7(0x754)][_0x1bcba7(0xd6c)](this):this[_0x1bcba7(0x52c)]=!![]);},VisuMZ['BattleCore'][_0x54b1a4(0x873)]=Scene_Map[_0x54b1a4(0x375)][_0x54b1a4(0x3bc)],Scene_Map[_0x54b1a4(0x375)][_0x54b1a4(0x3bc)]=function(){const _0x5aa094=_0x54b1a4;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ[_0x5aa094(0x387)][_0x5aa094(0x873)][_0x5aa094(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x98f)]=Scene_Map[_0x54b1a4(0x375)][_0x54b1a4(0x5af)],Scene_Map['prototype']['launchBattle']=function(){const _0x395b2d=_0x54b1a4;if(BattleManager[_0x395b2d(0x7d0)]){if(_0x395b2d(0x609)===_0x395b2d(0x316)){const _0x160e93=_0x1faeb3[_0x395b2d(0x89b)](this[_0x395b2d(0x6d0)]),_0x2171f8=_0x3baa5e[_0x395b2d(0x2eb)][_0x160e93];if(!_0x2171f8)return this[_0x395b2d(0xab6)]();const _0xe7a5cc=_0x395b2d(0x9ee)['format'](this[_0x395b2d(0x6d0)][_0x395b2d(0x220)][_0x395b2d(0x5cc)]),_0x27209c=[null,_0x3378fa['hp'],_0x58dc2b['mp'],_0x4bf486['hp'],_0x2c09f0['mp'],_0x4007fe['hp'],_0x142dd9['mp']][this['_item'][_0x395b2d(0x220)][_0x395b2d(0x5cc)]];return _0x2171f8[_0xe7a5cc][_0x395b2d(0xd76)](_0x27209c);}else this[_0x395b2d(0x6dc)]();}else VisuMZ['BattleCore'][_0x395b2d(0x98f)][_0x395b2d(0xd6c)](this);},Scene_Map[_0x54b1a4(0x375)][_0x54b1a4(0x6dc)]=function(){const _0x573758=_0x54b1a4;this[_0x573758(0xa63)]=!![];},VisuMZ[_0x54b1a4(0x387)]['SceneManager_isSceneChanging']=SceneManager[_0x54b1a4(0xd56)],SceneManager[_0x54b1a4(0xd56)]=function(){const _0x13bb0f=_0x54b1a4;if(BattleManager[_0x13bb0f(0x7d0)])return![];return VisuMZ['BattleCore']['SceneManager_isSceneChanging']['call'](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xcb0)]=Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x9d2)],Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x9d2)]=function(){const _0x3f7eed=_0x54b1a4;VisuMZ['BattleCore']['Game_Interpreter_terminate'][_0x3f7eed(0xd6c)](this);if(this[_0x3f7eed(0x5b6)]){if(_0x3f7eed(0x6a0)===_0x3f7eed(0x6a0))this[_0x3f7eed(0x5b6)]=undefined,SceneManager[_0x3f7eed(0xc22)][_0x3f7eed(0x998)]();else{const _0x1bb678=_0x1d8b21[_0x3f7eed(0xba3)]();_0x1bb678<=0x0?_0x28ad78['playEnemyAttack']():this[_0x3f7eed(0xcea)](_0x1ae463,_0x1bb678);}}},Scene_Map['prototype'][_0x54b1a4(0x998)]=function(){const _0x2a7531=_0x54b1a4;BattleManager[_0x2a7531(0x7d0)]=undefined,BattleManager[_0x2a7531(0x2bc)]=!![],this['stop']();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xca8)]=Scene_Map['prototype'][_0x54b1a4(0xbc1)],Scene_Map[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)]=function(){const _0x1edff4=_0x54b1a4;VisuMZ[_0x1edff4(0x387)][_0x1edff4(0xca8)][_0x1edff4(0xd6c)](this),BattleManager['_battleCoreBattleResumeAfter']&&(this[_0x1edff4(0xa63)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x54b1a4(0x387)]['Scene_Map_initialize']=Scene_Map[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)],Scene_Map[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)]=function(){const _0x477fd8=_0x54b1a4;VisuMZ[_0x477fd8(0x387)]['Scene_Map_initialize']['call'](this),$gameTemp[_0x477fd8(0x7ae)]();},VisuMZ['BattleCore'][_0x54b1a4(0x33d)]=Scene_ItemBase[_0x54b1a4(0x375)][_0x54b1a4(0x8f5)],Scene_ItemBase[_0x54b1a4(0x375)][_0x54b1a4(0x8f5)]=function(){const _0x490470=_0x54b1a4;VisuMZ[_0x490470(0x387)][_0x490470(0x33d)][_0x490470(0xd6c)](this);if(this[_0x490470(0x7b6)]()[_0x490470(0xd77)][_0x490470(0x298)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x490470(0x595)===_0x490470(0x638)){if(!_0x14bbea)return;_0x565eac['VisuMZ_1_SkillsStatesCore']?_0x5896e1[_0x490470(0x375)][_0x490470(0xbd6)][_0x490470(0xd6c)](this,_0x15e920,_0xb8e5b3,_0x120bfb,_0x38d81b,_0x1255b5):_0x3d4e24['prototype'][_0x490470(0xbd6)][_0x490470(0xd6c)](this,_0x1096ba,_0x46a31b,_0x2bf5bd,_0x2d6f1c);}else return;}this[_0x490470(0x7b6)]()[_0x490470(0xd77)][_0x490470(0x298)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x490470(0x84a)]=[]),DataManager[_0x490470(0xaa6)](this[_0x490470(0x7b6)]())&&($gameTemp[_0x490470(0x84a)]=[]);},VisuMZ[_0x54b1a4(0x387)]['Scene_Options_maxCommands']=Scene_Options[_0x54b1a4(0x375)][_0x54b1a4(0x7e3)],Scene_Options['prototype'][_0x54b1a4(0x7e3)]=function(){const _0x5ba3ed=_0x54b1a4;let _0x161132=VisuMZ[_0x5ba3ed(0x387)][_0x5ba3ed(0x9c5)]['call'](this);const _0x500621=VisuMZ['BattleCore'][_0x5ba3ed(0x916)];if(_0x500621['AutoBattle'][_0x5ba3ed(0x368)]&&_0x500621[_0x5ba3ed(0xc85)]['AdjustRect'])_0x161132+=0x2;if(_0x500621[_0x5ba3ed(0x60e)][_0x5ba3ed(0x368)]&&_0x500621[_0x5ba3ed(0x60e)][_0x5ba3ed(0x908)])_0x161132+=0x1;return _0x161132;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x31b)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)]=function(){const _0x24059e=_0x54b1a4;VisuMZ[_0x24059e(0x387)]['Scene_Battle_initialize']['call'](this),this[_0x24059e(0x7fc)]();},VisuMZ['BattleCore']['Scene_Battle_start']=Scene_Battle[_0x54b1a4(0x375)]['start'],Scene_Battle['prototype'][_0x54b1a4(0xcd5)]=function(){const _0x548c60=_0x54b1a4;if(SceneManager[_0x548c60(0x5b4)]()){Scene_Message[_0x548c60(0x375)][_0x548c60(0xcd5)][_0x548c60(0xd6c)](this);this[_0x548c60(0xaca)]&&this[_0x548c60(0xaca)]['update']();if(BattleManager[_0x548c60(0x3a0)]){if(_0x548c60(0xa4e)!==_0x548c60(0xa4e)){const _0x254303=this[_0x548c60(0x347)](_0xd0e112),_0x8e2232=this[_0x548c60(0xa51)](_0x2ad4cf),_0x18ebb9=this[_0x548c60(0x9d8)](_0x8e2232)[_0x548c60(0x495)];this[_0x548c60(0x63a)](this[_0x548c60(0x786)](_0x57f4e2));const _0x39a7e2=this[_0x548c60(0x5c9)]();if(_0x39a7e2===_0x548c60(0x5ff))this['drawTextEx'](_0x8e2232,_0x254303['x']+_0x254303['width']-_0x18ebb9,_0x254303['y'],_0x18ebb9);else{if(_0x39a7e2===_0x548c60(0x8b9)){const _0x51e28b=_0x254303['x']+_0xf2dff1[_0x548c60(0x8a3)]((_0x254303['width']-_0x18ebb9)/0x2);this[_0x548c60(0xb2c)](_0x8e2232,_0x51e28b,_0x254303['y'],_0x18ebb9);}else this[_0x548c60(0xb2c)](_0x8e2232,_0x254303['x'],_0x254303['y'],_0x18ebb9);}}else BattleManager[_0x548c60(0xc9d)]();}}else VisuMZ[_0x548c60(0x387)][_0x548c60(0x550)][_0x548c60(0xd6c)](this),$gameTroop[_0x548c60(0x80f)]();},VisuMZ['BattleCore'][_0x54b1a4(0x470)]=Scene_Battle[_0x54b1a4(0x375)]['stop'],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xad7)]=function(){const _0x56b7c6=_0x54b1a4;SceneManager[_0x56b7c6(0x59c)]()?Scene_Message['prototype'][_0x56b7c6(0xad7)][_0x56b7c6(0xd6c)](this):VisuMZ[_0x56b7c6(0x387)]['Scene_Battle_stop'][_0x56b7c6(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x5e7)]=Scene_Battle['prototype'][_0x54b1a4(0x9d2)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x9d2)]=function(){const _0x471ea5=_0x54b1a4;if(SceneManager[_0x471ea5(0x59c)]()){if(_0x471ea5(0x833)===_0x471ea5(0x833))Scene_Message[_0x471ea5(0x375)][_0x471ea5(0x9d2)][_0x471ea5(0xd6c)](this);else{if(_0xed7560[_0x471ea5(0x5cc)]===0x0)this['requestMotion'](_0x471ea5(0x405));else{if(_0x10cc21[_0x471ea5(0x5cc)]===0x1)this['requestMotion']('swing');else _0x16efb5['type']===0x2&&this['requestMotion']('missile');}}}else VisuMZ[_0x471ea5(0x387)][_0x471ea5(0x5e7)][_0x471ea5(0xd6c)](this);this[_0x471ea5(0x7fc)]();},Scene_Battle['prototype'][_0x54b1a4(0x9bb)]=function(){const _0x4b7e11=_0x54b1a4;if(ConfigManager[_0x4b7e11(0x2e7)]&&ConfigManager[_0x4b7e11(0x510)]!==undefined)return ConfigManager[_0x4b7e11(0x510)];else{if(this[_0x4b7e11(0xd92)]()===_0x4b7e11(0x218))return![];else{if('ifQgw'===_0x4b7e11(0x429)){if(!_0x2692aa[_0x4b7e11(0xbbd)]())return;_0xc85409[_0x4b7e11(0x97a)](_0x55ca91,_0x380da0);const _0x5b764f=_0x199ec6[_0x4b7e11(0x804)](_0x227e77[_0x4b7e11(0x7e9)]);if(_0x5b764f<=0x0)return;const _0xd5c502=_0x354ba0[_0x4b7e11(0x859)](),_0x199ec6=_0x4a8282['_subject'],_0x2e66be=_0x186ead[_0x4b7e11(0xca4)](_0x52802a[_0x4b7e11(0x2f2)]),_0x4a060f=_0x970fc3[_0x4b7e11(0x457)],_0x4f4004=_0x3b49d5[_0x4b7e11(0x82e)];if(!_0xd5c502||!_0x199ec6)return;_0x41e688[_0x4b7e11(0x89d)](_0x2e66be,_0x5b764f,_0x4a060f),_0x50b477[_0x4b7e11(0xb83)]&&_0xd5c502[_0x4b7e11(0xc6a)](_0x4b7e11(0xb2b));}else{return Scene_Message[_0x4b7e11(0x375)][_0x4b7e11(0x9bb)][_0x4b7e11(0xd6c)](this);;}}}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x50f)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x65e)],Scene_Battle['prototype'][_0x54b1a4(0x65e)]=function(){const _0x14f917=_0x54b1a4;this['createEnemyNameContainer'](),VisuMZ[_0x14f917(0x387)]['Scene_Battle_createAllWindows'][_0x14f917(0xd6c)](this),this[_0x14f917(0xda1)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x6ae)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x636)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x636)]=function(){const _0x1dbfee=_0x54b1a4;VisuMZ[_0x1dbfee(0x387)]['Scene_Battle_createEnemyWindow'][_0x1dbfee(0xd6c)](this),this['createMultiTargetWindows']();},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x666)]=function(){const _0x1553e6=_0x54b1a4;this[_0x1553e6(0x632)](!![]),this[_0x1553e6(0x632)](![]);},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x28e)]=function(_0x425c95){const _0x131a77=_0x54b1a4,_0x1de201=Window_BattleMultiTarget[_0x131a77(0x7f0)],_0x85669a=this[_0x131a77(0xa1f)](0x1,!![]);let _0x3e5593=_0x425c95?Graphics['boxWidth']-_0x1de201:0x0;_0x3e5593+=_0x425c95?Window_BattleMultiTarget[_0x131a77(0xbcf)]:Window_BattleMultiTarget[_0x131a77(0x3cb)];const _0x504a6=['frontview_ui'][_0x131a77(0xd4a)](this[_0x131a77(0xd92)]())?0x0:this[_0x131a77(0x89f)][_0x131a77(0xdd7)];let _0x471216=Graphics[_0x131a77(0x67b)]-_0x504a6-_0x85669a;return _0x471216+=_0x425c95?Window_BattleMultiTarget[_0x131a77(0xa85)]:Window_BattleMultiTarget[_0x131a77(0x8cd)],new Rectangle(_0x3e5593,_0x471216,_0x1de201,_0x85669a);},Scene_Battle['prototype'][_0x54b1a4(0x632)]=function(_0x3b0f04){const _0x1938fc=_0x54b1a4,_0x22c86e=this['multiTargetWindowRect'](_0x3b0f04),_0x46530b=new Window_BattleMultiTarget(_0x22c86e,_0x3b0f04);this[_0x1938fc(0x76e)](_0x46530b);if(_0x3b0f04)this[_0x1938fc(0x2b0)]=_0x46530b;else{if(_0x1938fc(0x9d5)==='NVBsJ'){this[_0x1938fc(0x519)](_0x1938fc(0x4c4),_0x353c06);_0x1c9bcf[_0x1938fc(0x387)][_0x1938fc(0x916)][_0x1938fc(0x493)][_0x1938fc(0xdc7)]&&this[_0x1938fc(0x519)](_0x1938fc(0x767),_0x12d8d9,[_0x295ccc['_subject']],-0x1);if(!_0x14ebc7['BattleCore'][_0x1938fc(0x916)][_0x1938fc(0x3a2)]['ShowCounter'])return;this[_0x1938fc(0x519)](_0x1938fc(0xcd7),_0xebd84b['counterAttack'][_0x1938fc(0xd76)](_0x3f86e2['name']()));}else this[_0x1938fc(0x9ec)]=_0x46530b;}},VisuMZ[_0x54b1a4(0x387)]['Scene_Battle_createCancelButton']=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x585)],Scene_Battle['prototype'][_0x54b1a4(0x585)]=function(){const _0x49a59e=_0x54b1a4;VisuMZ[_0x49a59e(0x387)]['Scene_Battle_createCancelButton'][_0x49a59e(0xd6c)](this),this[_0x49a59e(0xd92)]()===_0x49a59e(0x218)&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x217)]=function(_0x5d1dde){const _0x2c4359=_0x54b1a4;_0x5d1dde?(this[_0x2c4359(0x9c0)]['x']=(Graphics[_0x2c4359(0x495)]-Graphics[_0x2c4359(0xb36)])/0x2,this[_0x2c4359(0x9c0)]['y']=(Graphics[_0x2c4359(0xdd7)]-Graphics[_0x2c4359(0x67b)])/0x2):(this[_0x2c4359(0x9c0)]['x']=Graphics[_0x2c4359(0x495)]*0xa,this[_0x2c4359(0x9c0)]['y']=Graphics[_0x2c4359(0xdd7)]*0xa);},VisuMZ[_0x54b1a4(0x387)]['Scene_Battle_selectNextCommand']=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xb67)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xb67)]=function(){const _0x2b5f57=_0x54b1a4,_0x2b90a6=BattleManager[_0x2b5f57(0x6fe)]();VisuMZ[_0x2b5f57(0x387)][_0x2b5f57(0x88b)][_0x2b5f57(0xd6c)](this);if(_0x2b90a6){if(_0x2b90a6===BattleManager[_0x2b5f57(0x6fe)]())return;if(_0x2b90a6===BattleManager[_0x2b5f57(0x644)])return;if(_0x2b90a6[_0x2b5f57(0x887)]())_0x2b90a6[_0x2b5f57(0x887)]()[_0x2b5f57(0x76d)]();}},VisuMZ[_0x54b1a4(0x387)]['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x7d3)],Scene_Battle[_0x54b1a4(0x375)]['selectPreviousCommand']=function(){const _0x3a9cef=_0x54b1a4,_0x1b1fc3=BattleManager[_0x3a9cef(0x6fe)]();if(_0x1b1fc3&&_0x1b1fc3[_0x3a9cef(0x887)])_0x1b1fc3[_0x3a9cef(0x887)]()['stepBack']();VisuMZ['BattleCore']['Scene_Battle_selectPreviousCommand']['call'](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x517)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x34e)],Scene_Battle['prototype'][_0x54b1a4(0x34e)]=function(){const _0x1f73f1=_0x54b1a4;if(VisuMZ[_0x1f73f1(0x387)][_0x1f73f1(0x916)][_0x1f73f1(0x3a2)][_0x1f73f1(0x6e3)])return VisuMZ['BattleCore']['Settings']['BattleLog']['BattleLogRectJS'][_0x1f73f1(0xd6c)](this);return VisuMZ[_0x1f73f1(0x387)]['Scene_Battle_logWindowRect']['call'](this);},VisuMZ['BattleCore'][_0x54b1a4(0x230)]=Scene_Battle['prototype'][_0x54b1a4(0x737)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x737)]=function(){const _0x54576f=_0x54b1a4;VisuMZ['BattleCore'][_0x54576f(0x230)]['call'](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xb0d)]=function(){const _0x39ec2b=_0x54b1a4,_0x34acfd=this[_0x39ec2b(0xa92)];_0x34acfd[_0x39ec2b(0xaf0)](_0x39ec2b(0xb28),this[_0x39ec2b(0x79c)][_0x39ec2b(0xc8f)](this)),_0x34acfd['setHandler'](_0x39ec2b(0x891),this['commandOptions'][_0x39ec2b(0xc8f)](this));const _0x207066=this['battleLayoutStyle']();switch(_0x207066){case'xp':case _0x39ec2b(0x7f7):return this[_0x39ec2b(0xa92)][_0x39ec2b(0xb88)](0x1);break;}},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x79c)]=function(){const _0x1c6c08=_0x54b1a4;BattleManager['_autoBattle']=!![],$gameParty[_0x1c6c08(0x2a6)](),this[_0x1c6c08(0xb67)](),BattleManager[_0x1c6c08(0x56d)]()&&('jVHNR'===_0x1c6c08(0xce9)?BattleManager[_0x1c6c08(0x2e1)]=![]:this[_0x1c6c08(0x626)](_0x4779f7,'tp',_0x380574+(_0x438484[_0x1c6c08(0xaa5)]||0x0),_0x1b566a+this['gaugeLineHeight']()*0x2+(_0x2221cb['TpGaugeOffsetY']||0x0)));},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x62e)]=function(){const _0xe23f00=_0x54b1a4;this[_0xe23f00(0x582)]()?(this['_callSceneOptions']=!![],this[_0xe23f00(0x82e)]['push'](_0xe23f00(0xcd7),VisuMZ[_0xe23f00(0x387)][_0xe23f00(0x916)][_0xe23f00(0x458)][_0xe23f00(0xa83)])):this[_0xe23f00(0x446)]();},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x582)]=function(){const _0x3dac34=_0x54b1a4;return BattleManager[_0x3dac34(0xa39)]();},Scene_Battle[_0x54b1a4(0x375)]['callOptions']=function(){const _0x570165=_0x54b1a4;this[_0x570165(0x464)]=![],this[_0x570165(0xaca)][_0x570165(0x879)](),this[_0x570165(0x9c0)][_0x570165(0x739)]=![];if(BattleManager[_0x570165(0x877)]()){if(_0x570165(0x657)!==_0x570165(0x699))($dataSystem[_0x570165(0x75a)]||$dataSystem['battleback2Name'])&&SceneManager[_0x570165(0x996)]();else{_0x2c89a7['BattleCore']['Scene_Battle_updateBattleProcess'][_0x570165(0xd6c)](this);if(this[_0x570165(0x464)]&&!_0x2b3955['_subject'])this[_0x570165(0x446)]();}}else($gameMap[_0x570165(0x75a)]()||$gameMap[_0x570165(0xa5d)]())&&SceneManager['snapForBackground']();SceneManager[_0x570165(0x519)](Scene_Options),BattleManager[_0x570165(0x56d)]()&&(_0x570165(0xce4)==='bIMfq'?this[_0x570165(0x79b)](_0x4f8fbb['svBattlerData']()[_0x570165(0xad2)]||_0x570165(0x572)):BattleManager[_0x570165(0x3a0)]=BattleManager[_0x570165(0x6fe)]());},VisuMZ[_0x54b1a4(0x387)]['Scene_Battle_updateBattleProcess']=Scene_Battle['prototype'][_0x54b1a4(0x455)],Scene_Battle['prototype'][_0x54b1a4(0x455)]=function(){const _0x2976bc=_0x54b1a4;VisuMZ[_0x2976bc(0x387)][_0x2976bc(0xc74)]['call'](this);if(this[_0x2976bc(0x464)]&&!BattleManager[_0x2976bc(0x644)])this['callOptions']();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xc7c)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x879)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x879)]=function(){const _0x3d7619=_0x54b1a4;VisuMZ['BattleCore']['Scene_Battle_update'][_0x3d7619(0xd6c)](this),this[_0x3d7619(0x986)]();},Scene_Battle['prototype']['createAutoBattleWindow']=function(){const _0x20a879=_0x54b1a4,_0x42b9d7=this[_0x20a879(0x401)]();this[_0x20a879(0x248)]=new Window_AutoBattleCancel(_0x42b9d7),this['_autoBattleWindow']['hide'](),this[_0x20a879(0x6a8)](this[_0x20a879(0x248)]);},Scene_Battle[_0x54b1a4(0x375)]['autoBattleWindowRect']=function(){const _0x1dd41b=_0x54b1a4;return VisuMZ[_0x1dd41b(0x387)][_0x1dd41b(0x916)][_0x1dd41b(0xc85)][_0x1dd41b(0xb40)]['call'](this);},Scene_Battle['prototype'][_0x54b1a4(0x7fc)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x986)]=function(){const _0x4db8ad=_0x54b1a4;if(!this[_0x4db8ad(0x885)])return;for(const _0x1e972 of this[_0x4db8ad(0x885)]){_0x1e972&&(_0x4db8ad(0xd35)===_0x4db8ad(0x9bf)?_0x4e3a0d[_0x4db8ad(0x65b)]=_0x598266[_0x4db8ad(0xcfe)](_0x35e169):_0x1e972[_0x4db8ad(0x879)]());}},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x61e)]=function(_0x46d490){const _0x40c111=_0x54b1a4,_0x5449e6=$dataCommonEvents[_0x46d490];if(!_0x5449e6)return;const _0x23c50e=new Game_BattleOnceParallelInterpreter();this[_0x40c111(0xd27)](_0x23c50e),_0x23c50e[_0x40c111(0xb71)](_0x46d490);},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xd27)]=function(_0x25a60e){const _0xa5ef7f=_0x54b1a4;this[_0xa5ef7f(0x885)]=this[_0xa5ef7f(0x885)]||[],this[_0xa5ef7f(0x885)][_0xa5ef7f(0x519)](_0x25a60e);},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x312)]=function(_0x5ecc4c){const _0x1d334a=_0x54b1a4;this[_0x1d334a(0x885)]=this['_onceParallelInterpreters']||[],this[_0x1d334a(0x885)][_0x1d334a(0xd79)](_0x5ecc4c);},Game_Troop[_0x54b1a4(0x375)]['onBattleStartOnceParallels']=function(){const _0x48fe4e=_0x54b1a4;for(const _0x2ea130 of this[_0x48fe4e(0xae9)]()[_0x48fe4e(0xda2)]){if(!this['doesPageHaveOnceParallelStart'](_0x2ea130))continue;SceneManager[_0x48fe4e(0xc22)]['playOnceParallelTroopPage'](_0x2ea130);}},Game_Troop['prototype'][_0x54b1a4(0x421)]=function(_0x28bd18){const _0x210a88=_0x54b1a4;if(!_0x28bd18)return;for(const _0x2ee7e2 of _0x28bd18[_0x210a88(0xd3a)]){if([0x6c,0x198]['includes'](_0x2ee7e2[_0x210a88(0xdb8)])){const _0xc07a37=_0x2ee7e2[_0x210a88(0x6a4)][0x0];if(_0xc07a37[_0x210a88(0x298)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x86e)]=function(_0x5c56b2){const _0x3564ea=_0x54b1a4;if(!_0x5c56b2)return;const _0x38e6c3=new Game_BattleOnceParallelInterpreter();this[_0x3564ea(0xd27)](_0x38e6c3),_0x38e6c3[_0x3564ea(0xbc6)](_0x5c56b2);};function Game_BattleOnceParallelInterpreter(){const _0x4704a5=_0x54b1a4;this[_0x4704a5(0xbc1)](...arguments);}Game_BattleOnceParallelInterpreter[_0x54b1a4(0x375)]=Object['create'](Game_Interpreter[_0x54b1a4(0x375)]),Game_BattleOnceParallelInterpreter[_0x54b1a4(0x375)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x54b1a4(0x375)]['setCommonEvent']=function(_0x4897be){const _0x464c83=_0x54b1a4,_0x45a3a4=$dataCommonEvents[_0x4897be];_0x45a3a4?this[_0x464c83(0x915)](_0x45a3a4[_0x464c83(0xd3a)],0x0):this[_0x464c83(0x9d2)]();},Game_BattleOnceParallelInterpreter['prototype'][_0x54b1a4(0x9d2)]=function(){const _0x577aeb=_0x54b1a4;if(!SceneManager['isSceneBattle']())return;SceneManager[_0x577aeb(0xc22)][_0x577aeb(0x312)](this),Game_Interpreter[_0x577aeb(0x375)][_0x577aeb(0x9d2)][_0x577aeb(0xd6c)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x54b1a4(0xbc6)]=function(_0x4f3214){const _0x407bf5=_0x54b1a4;if(_0x4f3214){if(_0x407bf5(0x473)!==_0x407bf5(0x521))this[_0x407bf5(0x915)](_0x4f3214[_0x407bf5(0xd3a)],0x0);else{if(!_0x332e17[_0x407bf5(0xbbd)]())return;const _0x28302b=_0x138a2b['getLastPluginCommandInterpreter']();if(!_0x28302b)return;_0x28302b[_0x407bf5(0xc6a)](_0x407bf5(0x37f));}}else'ysEGH'!==_0x407bf5(0x881)?this[_0x407bf5(0x9d2)]():_0x49a0d6+=_0xab9682[_0x407bf5(0xa59)];},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x39f)]=function(){const _0x3e5cdd=_0x54b1a4;return VisuMZ[_0x3e5cdd(0x387)]['Settings'][_0x3e5cdd(0x458)][_0x3e5cdd(0x8ca)];},VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x54b1a4(0x375)]['startPartyCommandSelection'],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x808)]=function(){const _0x35165f=_0x54b1a4;this[_0x35165f(0x39f)]()?_0x35165f(0xcef)!=='gUfZY'?this[_0x35165f(0x239)]():this['tpbActorSwitchConditionsMet']()?this['performTpbActiveCheckSwitch']():this[_0x35165f(0x942)]():VisuMZ[_0x35165f(0x387)][_0x35165f(0xcd8)]['call'](this);},Scene_Battle['prototype'][_0x54b1a4(0x239)]=function(){const _0x1b92bf=_0x54b1a4;if(BattleManager[_0x1b92bf(0xa07)]())this['selectNextCommand']();else BattleManager['isTpb']()&&VisuMZ['BattleCore'][_0x1b92bf(0xcd8)][_0x1b92bf(0xd6c)](this);},VisuMZ['BattleCore'][_0x54b1a4(0x4bb)]=Scene_Battle['prototype'][_0x54b1a4(0x8c8)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x8c8)]=function(){const _0x3c6469=_0x54b1a4;if(BattleManager[_0x3c6469(0x56d)]())this['tpbCommandFight'](),this[_0x3c6469(0x48e)]();else{if(_0x3c6469(0x41a)!=='PcquT')VisuMZ['BattleCore']['Scene_Battle_commandFight']['call'](this);else{_0x4b640e[_0x3c6469(0x375)]['show'][_0x3c6469(0xd6c)](this);if(!_0x534745[_0x3c6469(0xc91)]())this[_0x3c6469(0x742)]();}}},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x60d)]=function(){const _0x3817a1=_0x54b1a4;if(!VisuMZ[_0x3817a1(0x387)][_0x3817a1(0x2c7)])return;if(Imported[_0x3817a1(0x718)]&&BattleManager[_0x3817a1(0x419)]())return;const _0x256a39=$gameParty[_0x3817a1(0x6a6)]()[_0x3817a1(0x661)](_0xfde8d9=>_0xfde8d9[_0x3817a1(0xc56)]()&&_0xfde8d9['canInput']());BattleManager['_currentActor']=_0x256a39[0x0]||null,BattleManager[_0x3817a1(0xc15)]&&BattleManager[_0x3817a1(0xc15)][_0x3817a1(0xa9b)](_0x3817a1(0xb99));},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x909)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x2e9)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x2e9)]=function(){const _0x71f25a=_0x54b1a4;VisuMZ[_0x71f25a(0x387)]['Scene_Battle_createActorCommandWindow'][_0x71f25a(0xd6c)](this),this[_0x71f25a(0x286)]();},Scene_Battle['prototype']['createActorCommandWindowBattleCore']=function(){const _0x12156b=_0x54b1a4,_0x1414f3=this[_0x12156b(0x532)];_0x1414f3['setHandler'](_0x12156b(0x81e),this[_0x12156b(0x2fc)][_0x12156b(0xc8f)](this)),_0x1414f3[_0x12156b(0xaf0)](_0x12156b(0xb28),this[_0x12156b(0x249)][_0x12156b(0xc8f)](this)),_0x1414f3[_0x12156b(0xaf0)](_0x12156b(0x441),this[_0x12156b(0x45d)]['bind'](this)),BattleManager[_0x12156b(0x56d)]()&&(this[_0x12156b(0x39f)]()?delete _0x1414f3[_0x12156b(0x489)][_0x12156b(0xa70)]:_0x1414f3[_0x12156b(0xaf0)]('cancel',this[_0x12156b(0xc84)]['bind'](this)));},Scene_Battle[_0x54b1a4(0x375)]['actorCommandEscape']=function(){const _0x55f059=_0x54b1a4;this[_0x55f059(0x5d0)]();},Scene_Battle['prototype'][_0x54b1a4(0x249)]=function(){const _0x283081=_0x54b1a4;BattleManager[_0x283081(0x6fe)]()[_0x283081(0x38f)](),BattleManager['finishActorInput'](),BattleManager[_0x283081(0xb5e)](),this[_0x283081(0x92a)]();},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x45d)]=function(){const _0x1913db=_0x54b1a4,_0x42fc59=BattleManager[_0x1913db(0x8e7)](),_0x4855ab=this['_actorCommandWindow'][_0x1913db(0xaa1)]();_0x42fc59[_0x1913db(0x397)](_0x4855ab),BattleManager[_0x1913db(0x6fe)]()[_0x1913db(0xd23)]($dataSkills[_0x4855ab]),this[_0x1913db(0x4fc)]();},Scene_Battle[_0x54b1a4(0x375)]['actorCommandCancelTPB']=function(){const _0x2c74f0=_0x54b1a4;this[_0x2c74f0(0x38c)]()?this[_0x2c74f0(0x72f)]():_0x2c74f0(0xbe9)===_0x2c74f0(0x5fc)?this[_0x2c74f0(0x39f)]()?delete _0x42af43[_0x2c74f0(0x489)][_0x2c74f0(0xa70)]:_0x188319['setHandler'](_0x2c74f0(0xa70),this[_0x2c74f0(0xc84)]['bind'](this)):this['processActorCommandCancelTPB']();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x2c7)]=![],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x38c)]=function(){const _0x4a99b5=_0x54b1a4;if(Imported[_0x4a99b5(0x718)]&&BattleManager['isCTB']())return![];else{if(!VisuMZ[_0x4a99b5(0x387)][_0x4a99b5(0x2c7)])return![];const _0x14797a=$gameParty[_0x4a99b5(0x6a6)]()['filter'](_0x5e147d=>_0x5e147d[_0x4a99b5(0xc56)]()&&_0x5e147d[_0x4a99b5(0xbd9)]());return _0x14797a[_0x4a99b5(0x69d)]>0x0&&BattleManager['actor']()!==_0x14797a[_0x14797a['length']-0x1];}},Scene_Battle[_0x54b1a4(0x375)]['performTpbActiveCheckSwitch']=function(){const _0x28f89e=_0x54b1a4,_0x111bec=BattleManager[_0x28f89e(0x6fe)](),_0x3fccfb=_0x111bec[_0x28f89e(0x887)]();if(_0x3fccfb)_0x3fccfb[_0x28f89e(0x76d)]();const _0x5bbda5=$gameParty[_0x28f89e(0x6a6)]()[_0x28f89e(0x661)](_0xe90f9f=>_0xe90f9f[_0x28f89e(0xc56)]()&&_0xe90f9f[_0x28f89e(0xbd9)]()),_0x36222c=_0x5bbda5['indexOf'](_0x111bec),_0x14c7ac=_0x5bbda5[_0x36222c+0x1];BattleManager[_0x28f89e(0xc15)]=_0x14c7ac||null;if(_0x14c7ac)_0x14c7ac[_0x28f89e(0xa9b)](_0x28f89e(0xb99));_0x111bec['setActionState'](_0x28f89e(0xb43)),this[_0x28f89e(0x92a)]();},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x942)]=function(){const _0x1b366c=_0x54b1a4;this[_0x1b366c(0xa92)]['setup'](),this[_0x1b366c(0x532)]['close']();if(!VisuMZ[_0x1b366c(0x387)]['TpbActiveChangeEnabled'])return;if(Imported[_0x1b366c(0x718)]&&BattleManager['isCTB']())return;if(BattleManager[_0x1b366c(0xc15)]){BattleManager['_currentActor'][_0x1b366c(0xa9b)](_0x1b366c(0xb43));const _0x485c86=BattleManager['_currentActor'][_0x1b366c(0x887)]();if(_0x485c86)_0x485c86[_0x1b366c(0x76d)]();}BattleManager['_currentActor']=null;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x988)]=Scene_Battle[_0x54b1a4(0x375)]['createHelpWindow'],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xd74)]=function(){const _0xade347=_0x54b1a4;VisuMZ['BattleCore'][_0xade347(0x988)][_0xade347(0xd6c)](this),this[_0xade347(0x42c)]();},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x42c)]=function(){const _0x471ad3=_0x54b1a4;this['_actorCommandWindow'][_0x471ad3(0x883)](this[_0x471ad3(0x59a)]),this[_0x471ad3(0xa92)][_0x471ad3(0x883)](this[_0x471ad3(0x59a)]);},Scene_Battle[_0x54b1a4(0x375)]['battleLayoutStyle']=function(){const _0x3c54ec=_0x54b1a4;if($gameTemp['_forcedBattleLayout']!==undefined){if('uFuSX'===_0x3c54ec(0x29a)){if(!_0x43c52f[_0x3c54ec(0x9cd)](_0x11c33a))return this[_0x3c54ec(0x26c)](_0x2e290b);_0x2e0b12['BattleCore'][_0x3c54ec(0x50d)][_0x3c54ec(0xd6c)](this,_0xfd7151);}else return $gameTemp[_0x3c54ec(0xa99)];}if(this[_0x3c54ec(0x83b)]){if(_0x3c54ec(0x939)==='oPpYJ'){const _0x41ab7=_0x51a9af[_0x3c54ec(0x511)];_0x5c8ba9[_0x3c54ec(0x955)][_0x41ab7]=new _0x5c2a2b(_0x5e7820);}else return this[_0x3c54ec(0x83b)];}return this[_0x3c54ec(0x83b)]=VisuMZ['BattleCore']['Settings'][_0x3c54ec(0x6f0)][_0x3c54ec(0x88a)][_0x3c54ec(0x6d1)]()['trim'](),this[_0x3c54ec(0x83b)]===_0x3c54ec(0x722)&&!Imported['VisuMZ_3_SideviewBattleUI']&&(_0x3c54ec(0x92d)===_0x3c54ec(0x47d)?(_0xdd42d3[_0x3c54ec(0x387)]['Window_PartyCommand_initialize'][_0x3c54ec(0xd6c)](this,_0x2c8823),this['createCommandNameWindow'](_0x571efa)):this[_0x3c54ec(0x83b)]=_0x3c54ec(0x761)),this[_0x3c54ec(0x83b)]===_0x3c54ec(0x3a8)&&!Imported[_0x3c54ec(0x8ed)]&&(_0x3c54ec(0x87b)!=='OZNQW'?this[_0x3c54ec(0x83b)]=_0x3c54ec(0x761):_0x4052db[_0x3c54ec(0x2c1)][_0x3c54ec(0xa4b)]=![]),this[_0x3c54ec(0x83b)];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xcf8)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x271)],Scene_Battle['prototype'][_0x54b1a4(0x271)]=function(){const _0x20ae8d=_0x54b1a4,_0x2ef86b=this[_0x20ae8d(0xd92)]();switch(_0x2ef86b){case'list':return this[_0x20ae8d(0xa1f)](Math['max'](0x1,$gameParty[_0x20ae8d(0x373)]()),!![]);break;default:return VisuMZ['BattleCore']['Scene_Battle_windowAreaHeight']['call'](this);break;}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x433)]=Scene_Battle[_0x54b1a4(0x375)]['helpWindowRect'],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x451)]=function(){const _0x900876=_0x54b1a4,_0x169f81=this[_0x900876(0xd92)]();switch(_0x169f81){case'border':return this[_0x900876(0x7a9)]();break;case _0x900876(0x761):case'list':case'xp':case _0x900876(0x7f7):default:return VisuMZ[_0x900876(0x387)]['Scene_Battle_helpWindowRect'][_0x900876(0xd6c)](this);break;}},Scene_Battle[_0x54b1a4(0x375)]['statusWindowRect']=function(){const _0x4e593f=_0x54b1a4,_0x4cdaa9=this[_0x4e593f(0xd92)]();switch(_0x4cdaa9){case'xp':case'portrait':return this[_0x4e593f(0x35b)]();break;case _0x4e593f(0x218):return this['statusWindowRectBorderStyle']();break;case _0x4e593f(0x761):case'list':default:return this[_0x4e593f(0x28a)]();break;}},VisuMZ['BattleCore'][_0x54b1a4(0x260)]=Scene_Battle[_0x54b1a4(0x375)]['partyCommandWindowRect'],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xb6a)]=function(){const _0xe11ac4=_0x54b1a4,_0x10207c=this[_0xe11ac4(0xd92)]();switch(_0x10207c){case'xp':case'portrait':return this['partyCommandWindowRectXPStyle']();break;case _0xe11ac4(0x218):return this['partyCommandWindowRectBorderStyle']();case _0xe11ac4(0x761):case _0xe11ac4(0xd3a):default:return this[_0xe11ac4(0x40f)]();break;}},Scene_Battle['prototype'][_0x54b1a4(0x40f)]=function(){const _0x5e2aca=_0x54b1a4,_0x416dc1=VisuMZ[_0x5e2aca(0x387)][_0x5e2aca(0x916)][_0x5e2aca(0x6f0)],_0x2421c9=_0x416dc1[_0x5e2aca(0x232)]||0xc0,_0x1f917f=this[_0x5e2aca(0x271)](),_0x411754=this['isRightInputMode']()?Graphics[_0x5e2aca(0xb36)]-_0x2421c9:0x0,_0x295951=Graphics['boxHeight']-_0x1f917f;return new Rectangle(_0x411754,_0x295951,_0x2421c9,_0x1f917f);},Scene_Battle[_0x54b1a4(0x375)]['actorCommandWindowRect']=function(){const _0x27b159=_0x54b1a4;return this[_0x27b159(0xb6a)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x8a8)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x660)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x660)]=function(){const _0x32e6f1=_0x54b1a4,_0x37d0bb=this[_0x32e6f1(0xd92)]();switch(_0x37d0bb){case'xp':case _0x32e6f1(0x7f7):case _0x32e6f1(0x218):break;case'default':case _0x32e6f1(0xd3a):default:VisuMZ[_0x32e6f1(0x387)][_0x32e6f1(0x8a8)]['call'](this);break;}},VisuMZ[_0x54b1a4(0x387)]['Scene_Battle_startActorSelection']=Scene_Battle['prototype']['startActorSelection'],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xba4)]=function(){const _0x2ea0c1=_0x54b1a4;VisuMZ[_0x2ea0c1(0x387)][_0x2ea0c1(0x484)][_0x2ea0c1(0xd6c)](this),this[_0x2ea0c1(0x4a5)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x432)]=Scene_Battle[_0x54b1a4(0x375)]['startEnemySelection'],Scene_Battle[_0x54b1a4(0x375)]['startEnemySelection']=function(){const _0x586752=_0x54b1a4;VisuMZ[_0x586752(0x387)][_0x586752(0x432)]['call'](this),this[_0x586752(0x8c2)][_0x586752(0xc50)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0x54b1a4(0x375)]['makeTargetSelectionMoreVisible']=function(){const _0x2741b8=_0x54b1a4,_0x57f91e=this[_0x2741b8(0xd92)]();if(['xp',_0x2741b8(0x7f7),_0x2741b8(0x218)]['includes'](_0x57f91e)){if(_0x2741b8(0x50a)===_0x2741b8(0x32d)){if(_0x2a0b04['isActor']()&&!_0x20bcd3[_0x2741b8(0xc91)]())return;const _0x5cd9d9=_0x47e215[_0x2741b8(0x887)]();if(_0x5cd9d9&&_0x217dad[_0x2741b8(0xa2c)]())this[_0x2741b8(0xa42)]['addChild'](_0x5cd9d9);}else this[_0x2741b8(0x532)]['close']();}(_0x57f91e===_0x2741b8(0x218)||this[_0x2741b8(0x62c)]())&&(_0x2741b8(0x8a4)!==_0x2741b8(0x8a4)?(this['applyFreezeMotionFrames'](),_0x3507b7[_0x2741b8(0x387)]['Sprite_Actor_updateFrame'][_0x2741b8(0xd6c)](this)):(this[_0x2741b8(0xa65)]['close'](),this[_0x2741b8(0x750)]['close']()));},VisuMZ[_0x54b1a4(0x387)]['Scene_Battle_onActorOk']=Scene_Battle[_0x54b1a4(0x375)]['onActorOk'],Scene_Battle['prototype'][_0x54b1a4(0x4ee)]=function(){const _0x25f64f=_0x54b1a4;VisuMZ['BattleCore']['Scene_Battle_onActorOk'][_0x25f64f(0xd6c)](this),this[_0x25f64f(0xd3b)]();},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x2b5)]=function(){const _0x450c51=_0x54b1a4;return[_0x450c51(0x371),'guard',_0x450c51(0x441)][_0x450c51(0xd4a)](this[_0x450c51(0x532)][_0x450c51(0x3ed)]());},VisuMZ[_0x54b1a4(0x387)]['Scene_Battle_onActorCancel']=Scene_Battle['prototype'][_0x54b1a4(0x6c2)],Scene_Battle['prototype'][_0x54b1a4(0x6c2)]=function(){const _0x5edc0a=_0x54b1a4;this[_0x5edc0a(0x2b5)]()?(this['_statusWindow'][_0x5edc0a(0x340)](),this[_0x5edc0a(0x2d5)]['hide'](),this[_0x5edc0a(0x532)][_0x5edc0a(0x741)]()):VisuMZ[_0x5edc0a(0x387)][_0x5edc0a(0x4e7)][_0x5edc0a(0xd6c)](this),this[_0x5edc0a(0x6c9)]();},VisuMZ['BattleCore'][_0x54b1a4(0x840)]=Scene_Battle['prototype'][_0x54b1a4(0xc7f)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xc7f)]=function(){const _0x41fdd1=_0x54b1a4,_0x32d223=BattleManager['inputtingAction']();_0x32d223[_0x41fdd1(0x802)](this[_0x41fdd1(0x8c2)][_0x41fdd1(0x717)]()),this['_enemyWindow']['closeBattleActorWindow'](),VisuMZ[_0x41fdd1(0x387)][_0x41fdd1(0x840)][_0x41fdd1(0xd6c)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x2b7)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x77d)],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x77d)]=function(){const _0x260db4=_0x54b1a4;if(this[_0x260db4(0x2b5)]()){if('osTpq'!==_0x260db4(0x49d))return _0x260db4(0x604);else this[_0x260db4(0x89f)]['show'](),this[_0x260db4(0x8c2)][_0x260db4(0x5e6)](),this['_actorCommandWindow'][_0x260db4(0x741)]();}else{if('eMrrZ'!==_0x260db4(0x504))VisuMZ[_0x260db4(0x387)][_0x260db4(0x2b7)][_0x260db4(0xd6c)](this);else{const _0x215bd9=_0x1b955d[_0x260db4(0x387)][_0x260db4(0x916)][_0x260db4(0x809)];if(_0x215bd9[_0x260db4(0x54e)]&&!_0x215bd9[_0x260db4(0x60f)]){this[_0x260db4(0xd1e)]['opacity']=0x0;return;}this[_0x260db4(0xd1e)]['x']=0x0,this['_stateIconSprite']['x']+=this['_battler'][_0x260db4(0xa27)](),this[_0x260db4(0xd1e)]['y']=-this[_0x260db4(0x65b)][_0x260db4(0xdd7)]-this['_stateIconSprite']['height']-0x4,this['_stateIconSprite']['y']+=this['_battler'][_0x260db4(0x673)](),this[_0x260db4(0xd1e)]['scale']['x']=0x1/(this['scale']['x']||0.001),this['_stateIconSprite']['scale']['y']=0x1/(this[_0x260db4(0xbcd)]['y']||0.001),this[_0x260db4(0xb3b)]()&&(this[_0x260db4(0xbb1)][_0x260db4(0x7cd)]['scale']['x']=-0x1/(this[_0x260db4(0xbcd)]['x']||0.001),this[_0x260db4(0xbb1)][_0x260db4(0x7cd)]['scale']['y']=0x1/(this[_0x260db4(0xbcd)]['y']||0.001));}}this[_0x260db4(0x6c9)](),this[_0x260db4(0x8c2)][_0x260db4(0x97b)]();},Scene_Battle['prototype']['okTargetSelectionVisibility']=function(){const _0x1fe271=_0x54b1a4,_0xeb9b3b=this[_0x1fe271(0xd92)]();if(_0xeb9b3b===_0x1fe271(0x218)||this[_0x1fe271(0x62c)]()){if(_0x1fe271(0x53c)!==_0x1fe271(0x53c)){const _0x44305e=_0x3eb0b6['_scene']['_actorWindow'];this['enemy']()['isActor']()?_0x44305e['select'](this[_0x1fe271(0x717)]()[_0x1fe271(0x58f)]()):_0x44305e['deselect']();}else this[_0x1fe271(0xa65)][_0x1fe271(0x95e)](),this[_0x1fe271(0xa65)][_0x1fe271(0xaae)]&&('wIjnS'!==_0x1fe271(0x6e1)?this['_skillWindow'][_0x1fe271(0x340)]():(this[_0x1fe271(0x7cf)]=![],this[_0x1fe271(0x742)](),this[_0x1fe271(0x922)]())),this[_0x1fe271(0x750)]['open'](),this['_itemWindow'][_0x1fe271(0xaae)]&&this[_0x1fe271(0x750)][_0x1fe271(0x340)]();}},Scene_Battle['prototype'][_0x54b1a4(0x6c9)]=function(){const _0x614356=_0x54b1a4,_0x1c99f4=this[_0x614356(0xd92)]();['xp',_0x614356(0x7f7),'border'][_0x614356(0xd4a)](_0x1c99f4)&&this[_0x614356(0x532)][_0x614356(0x95e)](),this[_0x614356(0xd3b)]();},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x28a)]=function(){const _0x507a1a=_0x54b1a4,_0x49ca23=VisuMZ['BattleCore'][_0x507a1a(0x916)][_0x507a1a(0x6f0)],_0x399d7d=Window_BattleStatus['prototype'][_0x507a1a(0x3f8)](),_0x27b03c=Graphics['boxWidth']-(_0x49ca23[_0x507a1a(0x232)]||0xc0),_0x7cd897=this[_0x507a1a(0x271)]()+_0x399d7d,_0x400d44=this['isRightInputMode']()?0x0:Graphics[_0x507a1a(0xb36)]-_0x27b03c,_0x518a8f=Graphics[_0x507a1a(0x67b)]-_0x7cd897+_0x399d7d;return new Rectangle(_0x400d44,_0x518a8f,_0x27b03c,_0x7cd897);},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x35b)]=function(){const _0x439601=_0x54b1a4,_0x5b12f3=Window_BattleStatus[_0x439601(0x375)][_0x439601(0x3f8)](),_0x219688=Graphics[_0x439601(0xb36)],_0x3bb2f6=this['windowAreaHeight']()+_0x5b12f3,_0x2a2f95=0x0,_0x3ae5e1=Graphics['boxHeight']-_0x3bb2f6+_0x5b12f3;return new Rectangle(_0x2a2f95,_0x3ae5e1,_0x219688,_0x3bb2f6);},Scene_Battle[_0x54b1a4(0x375)]['partyCommandWindowRectXPStyle']=function(){const _0x18172a=_0x54b1a4,_0x590d05=Graphics[_0x18172a(0xb36)]/0x2,_0x37cbbe=this['calcWindowHeight'](VisuMZ['BattleCore']['Settings']['BattleLayout'][_0x18172a(0x66d)],!![]),_0x29672a=Math[_0x18172a(0x68d)]((Graphics[_0x18172a(0xb36)]-_0x590d05)/0x2),_0x58de89=Graphics['boxHeight']-_0x37cbbe-this['statusWindowRectXPStyle']()[_0x18172a(0xdd7)];return new Rectangle(_0x29672a,_0x58de89,_0x590d05,_0x37cbbe);},Scene_Battle['prototype'][_0x54b1a4(0x7a9)]=function(){const _0x404a8c=_0x54b1a4,_0x5cae94=Graphics[_0x404a8c(0x495)],_0x27815b=Math[_0x404a8c(0x68d)]((Graphics[_0x404a8c(0xb36)]-_0x5cae94)/0x2),_0x442ee0=this[_0x404a8c(0x442)](),_0x4cb420=(Graphics[_0x404a8c(0xdd7)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x27815b,_0x4cb420,_0x5cae94,_0x442ee0);},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x2c2)]=function(){const _0x389524=_0x54b1a4,_0x4ec0ba=Graphics[_0x389524(0x495)],_0x5dd171=Math['round']((Graphics[_0x389524(0xb36)]-_0x4ec0ba)/0x2),_0x79138a=this[_0x389524(0xa1f)](0x4,!![]),_0x3a1058=Graphics[_0x389524(0x67b)]-_0x79138a+(Graphics[_0x389524(0xdd7)]-Graphics[_0x389524(0x67b)])/0x2;return new Rectangle(_0x5dd171,_0x3a1058,_0x4ec0ba,_0x79138a);},Scene_Battle['prototype']['partyCommandWindowRectBorderStyle']=function(){const _0x318036=_0x54b1a4,_0xbacf18=Math[_0x318036(0x8a3)](Graphics['width']/0x3),_0x469e51=this[_0x318036(0x9bb)]()?(Graphics[_0x318036(0x495)]+Graphics['boxWidth'])/0x2-_0xbacf18:(Graphics['width']-Graphics['boxWidth'])/-0x2,_0x1899cd=this['helpWindowRectBorderStyle'](),_0x2f9a62=_0x1899cd['y']+_0x1899cd[_0x318036(0xdd7)],_0x252038=this[_0x318036(0x2c2)](),_0x252cbc=_0x252038['y']-_0x2f9a62;return new Rectangle(_0x469e51,_0x2f9a62,_0xbacf18,_0x252cbc);},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xd4c)]=function(){const _0x234e98=_0x54b1a4,_0x20baf8=Math['ceil'](Graphics[_0x234e98(0x495)]/0x3),_0x1daf29=Math[_0x234e98(0x68d)]((Graphics[_0x234e98(0xb36)]-_0x20baf8)/0x2),_0x34a70f=this[_0x234e98(0x414)](),_0x4984bb=_0x34a70f['y'],_0x2c2c37=_0x34a70f[_0x234e98(0xdd7)];return new Rectangle(_0x1daf29,_0x4984bb,_0x20baf8,_0x2c2c37);},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x460)]=function(){const _0x4a586f=_0x54b1a4;this[_0x4a586f(0x61d)]['y']=this[_0x4a586f(0x59a)]['y']+this[_0x4a586f(0x59a)]['height'];if(this['isRightInputMode']()){if(this[_0x4a586f(0xd92)]()===_0x4a586f(0x218))this[_0x4a586f(0x61d)]['x']=0x8;else{if(_0x4a586f(0xc34)!==_0x4a586f(0xc34)){let _0xdffa6d=(_0x353c11[_0x4a586f(0xb2d)]*_0x18dca4[_0x4a586f(0x587)]+_0x9bf9e5[_0x4a586f(0xb0f)])*_0x2754fe['rec'];_0xdffa6d=this['disperseDamage'](_0xdffa6d),this['isItem']()&&(_0xdffa6d*=this[_0x4a586f(0xc0d)]()[_0x4a586f(0x8de)]),_0xdffa6d=_0x2618c9[_0x4a586f(0x8a3)](_0xdffa6d),_0xdffa6d!==0x0&&(_0x3367ef[_0x4a586f(0xc73)](_0xdffa6d),this[_0x4a586f(0x868)](_0xc46ed9));}else this[_0x4a586f(0x61d)]['x']=-this[_0x4a586f(0x61d)][_0x4a586f(0x495)]-0x4;}}else this[_0x4a586f(0x61d)]['x']=Graphics[_0x4a586f(0x495)]-(Graphics[_0x4a586f(0x495)]-Graphics[_0x4a586f(0xb36)])/0x2-this[_0x4a586f(0x61d)][_0x4a586f(0x495)]-0x4;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x662)]=Scene_Battle['prototype']['skillWindowRect'],Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x568)]=function(){const _0x2bae8=_0x54b1a4;if(this[_0x2bae8(0xd92)]()==='border'){if(_0x2bae8(0xbbb)!==_0x2bae8(0xbbb)){const _0x34e6a2=this[_0x2bae8(0x532)];_0x34e6a2[_0x2bae8(0xaf0)]('escape',this[_0x2bae8(0x2fc)]['bind'](this)),_0x34e6a2[_0x2bae8(0xaf0)](_0x2bae8(0xb28),this[_0x2bae8(0x249)][_0x2bae8(0xc8f)](this)),_0x34e6a2[_0x2bae8(0xaf0)]('singleSkill',this[_0x2bae8(0x45d)][_0x2bae8(0xc8f)](this)),_0x38b7be[_0x2bae8(0x56d)]()&&(this[_0x2bae8(0x39f)]()?delete _0x34e6a2[_0x2bae8(0x489)][_0x2bae8(0xa70)]:_0x34e6a2[_0x2bae8(0xaf0)](_0x2bae8(0xa70),this['actorCommandCancelTPB']['bind'](this)));}else return this[_0x2bae8(0xd4c)]();}else{if(this['isSkillItemWindowsMiddle']())return this[_0x2bae8(0x552)]();else{if('tQaOp'!==_0x2bae8(0x402))_0xf55f12['removeBuff'](_0x2e11b8);else return VisuMZ[_0x2bae8(0x387)]['Scene_Battle_skillWindowRect'][_0x2bae8(0xd6c)](this);}}},VisuMZ['BattleCore'][_0x54b1a4(0x597)]=Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x575)],Scene_Battle['prototype'][_0x54b1a4(0x575)]=function(){const _0x3ffada=_0x54b1a4;if(this[_0x3ffada(0xd92)]()==='border')return this[_0x3ffada(0xd4c)]();else{if(this[_0x3ffada(0x62c)]()){if(_0x3ffada(0x74a)===_0x3ffada(0x74a))return this['skillItemWindowRectMiddle']();else{const _0x132298=_0xa98093['max'](this[_0x3ffada(0xa48)](),_0x50482b[_0x3ffada(0x485)]),_0x427428=_0x414f52[_0x3ffada(0x8a3)](_0x132298*0x1e),_0x5c82d1=this[_0x3ffada(0x5c3)](_0x427428,_0x132298),_0x3d3fa0=_0x359f6f[_0x3ffada(0xa59)]/0x2,_0x22c6ea=_0x5c82d1[_0x3ffada(0x65b)][_0x3ffada(0x4d8)](_0x41fa6c+'\x20');_0x5c82d1['bitmap'][_0x3ffada(0xa28)]=_0x2cb74f[_0x3ffada(0xcc3)](_0x551444['textColor']),_0x5c82d1[_0x3ffada(0x65b)][_0x3ffada(0x733)](_0x2faa4e,_0x3d3fa0,0x0,_0x427428-_0x3d3fa0,_0x132298,_0x3ffada(0x8b9));const _0x80dd9a=_0x155fa1[_0x3ffada(0x68d)]((_0x132298-_0xb5e70c[_0x3ffada(0x485)])/0x2),_0x2ce2f6=_0x427428/0x2-_0x24fca2[_0x3ffada(0xa59)]-_0x22c6ea/0x2+_0x3d3fa0/0x2,_0x4492be=_0x103977[_0x3ffada(0x715)](_0x3ffada(0xd65)),_0x20dd7a=_0x27082f[_0x3ffada(0xa59)],_0x10c68b=_0xe3825f['iconHeight'],_0x18006c=_0x481dad%0x10*_0x20dd7a,_0x1c1eb3=_0x2a7eaa['floor'](_0x364b08/0x10)*_0x10c68b;_0x5c82d1['bitmap']['blt'](_0x4492be,_0x18006c,_0x1c1eb3,_0x20dd7a,_0x10c68b,_0x2ce2f6,_0x80dd9a),this[_0x3ffada(0xd8a)]=_0x2cb947['flashColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x3679bd[_0x3ffada(0x9c2)](this['_flashColor']),this[_0x3ffada(0x55f)]=_0x177c0f[_0x3ffada(0x27b)]||0x0,_0x5c82d1['dy']=0x0;}}else{if(_0x3ffada(0xb8a)===_0x3ffada(0xb8a))return VisuMZ[_0x3ffada(0x387)][_0x3ffada(0x597)]['call'](this);else{this[_0x3ffada(0x676)](_0x3ffada(0x904));return;}}}},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x62c)]=function(){const _0x5b7904=_0x54b1a4;return VisuMZ['BattleCore']['Settings'][_0x5b7904(0x6f0)]['SkillItemMiddleLayout'];},Scene_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x552)]=function(){const _0x51017c=_0x54b1a4,_0x3b11df=Sprite_Button[_0x51017c(0x375)]['blockWidth']()*0x2+0x4;let _0x4136ad=Graphics[_0x51017c(0xb36)]-_0x3b11df;Imported[_0x51017c(0x2e5)]&&SceneManager['isSideButtonLayout']()&&(_0x4136ad+=_0x3b11df);const _0x149ce7=this[_0x51017c(0x48d)](),_0x2ae594=Graphics[_0x51017c(0x67b)]-_0x149ce7-this[_0x51017c(0x5a2)]()['height']+Window_BattleStatus[_0x51017c(0x375)][_0x51017c(0x3f8)](),_0x22d5ab=0x0;return new Rectangle(_0x22d5ab,_0x149ce7,_0x4136ad,_0x2ae594);},Scene_Battle[_0x54b1a4(0x375)]['createEnemyNameContainer']=function(){const _0x5c00c3=_0x54b1a4;if(!VisuMZ['BattleCore'][_0x5c00c3(0x916)][_0x5c00c3(0x809)][_0x5c00c3(0x60f)])return;this[_0x5c00c3(0xc09)]=new Sprite(),this['_enemyNameContainer']['x']=this[_0x5c00c3(0x9c0)]['x'],this[_0x5c00c3(0xc09)]['y']=this[_0x5c00c3(0x9c0)]['y'];const _0x4e1ebe=this[_0x5c00c3(0x6c0)][_0x5c00c3(0x940)](this[_0x5c00c3(0x9c0)]);this['addChildAt'](this['_enemyNameContainer'],_0x4e1ebe);for(let _0x1b3040=0x0;_0x1b3040<0x8;_0x1b3040++){if(_0x5c00c3(0x5d1)===_0x5c00c3(0xc2d))this[_0x5c00c3(0xa4d)][_0x5c00c3(0x44a)]();else{const _0x8db5f3=new Window_EnemyName(_0x1b3040);this['_enemyNameContainer'][_0x5c00c3(0x6a8)](_0x8db5f3);}}},Sprite_Battler[_0x54b1a4(0xd53)]=VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x916)][_0x54b1a4(0x2c1)][_0x54b1a4(0x2b2)],VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xbaf)]=Sprite_Battler[_0x54b1a4(0x375)]['initMembers'],Sprite_Battler['prototype'][_0x54b1a4(0x900)]=function(){const _0x5afb0a=_0x54b1a4;VisuMZ[_0x5afb0a(0x387)]['Sprite_Battler_initMembers'][_0x5afb0a(0xd6c)](this),this[_0x5afb0a(0x3ee)]();if(this[_0x5afb0a(0x3ac)]===Sprite_Enemy)this[_0x5afb0a(0x938)]();this[_0x5afb0a(0x2c3)]();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x3ee)]=function(){const _0x43ef1f=_0x54b1a4;this['_baseX']=0x0,this[_0x43ef1f(0xb10)]=0x0,this[_0x43ef1f(0x501)]=0x0,this[_0x43ef1f(0xa3d)]=0x0,this[_0x43ef1f(0x278)]=0x0,this[_0x43ef1f(0xa06)]=0x0,this[_0x43ef1f(0x832)]=_0x43ef1f(0xad4),this[_0x43ef1f(0xd0c)]=0x0,this['_jumpMaxHeight']=0x0,this[_0x43ef1f(0x42a)]=0x0,this[_0x43ef1f(0xc28)]=0x0,this[_0x43ef1f(0x5d8)]=0xff,this[_0x43ef1f(0x284)]=0x0,this[_0x43ef1f(0x846)]=0x0,this['_opacityEasing']=_0x43ef1f(0xad4),this[_0x43ef1f(0x78d)]=0x0,this[_0x43ef1f(0xdcc)]=0x0,this[_0x43ef1f(0x631)]=0x0,this[_0x43ef1f(0xdb3)]=0x0,this[_0x43ef1f(0xdab)]=_0x43ef1f(0xad4),this['_angleRevertOnFinish']=!![],this[_0x43ef1f(0x227)]=0x0,this[_0x43ef1f(0xd6a)]=0x0,this[_0x43ef1f(0xdbb)]=0x0,this[_0x43ef1f(0x81a)]=0x0,this['_skewDuration']=0x0,this[_0x43ef1f(0x37b)]=0x0,this[_0x43ef1f(0x8ad)]=_0x43ef1f(0xad4),this['_growX']=0x1,this['_growY']=0x1,this['_targetGrowX']=0x1,this['_targetGrowY']=0x1,this[_0x43ef1f(0x288)]=0x0,this['_growWholeDuration']=0x0,this[_0x43ef1f(0xdb2)]='Linear',this['_flipScaleX']=0x1,this['_targetHomeX']=0x0,this['_targetHomeY']=0x0,this[_0x43ef1f(0x40a)]=0x0,this['_homeWholeDuration']=0x0,this[_0x43ef1f(0x4f4)]='Linear',this[_0x43ef1f(0xb8b)]=0x0,this[_0x43ef1f(0x54c)]=0x0;},Sprite_Battler['prototype'][_0x54b1a4(0x938)]=function(){const _0x58122f=_0x54b1a4;this[_0x58122f(0xb62)]=new Sprite(),this[_0x58122f(0xb62)][_0x58122f(0x65b)]=ImageManager[_0x58122f(0x715)](_0x58122f(0x839)),this[_0x58122f(0xb62)][_0x58122f(0x65b)][_0x58122f(0xd41)]=VisuMZ[_0x58122f(0x387)][_0x58122f(0x916)]['Actor']['SmoothImage'],this[_0x58122f(0xb62)][_0x58122f(0x749)]['x']=0.5,this[_0x58122f(0xb62)][_0x58122f(0x749)]['y']=0.5,this[_0x58122f(0xb62)]['y']=-0x2,this[_0x58122f(0xb62)][_0x58122f(0x739)]=![],this[_0x58122f(0x6a8)](this[_0x58122f(0xb62)]);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x2c3)]=function(){const _0x5cf3c9=_0x54b1a4;this['_distortionSprite']=new Sprite(),this['_distortionSprite'][_0x5cf3c9(0x749)]['x']=0.5,this[_0x5cf3c9(0x267)][_0x5cf3c9(0x749)]['y']=0.5,this[_0x5cf3c9(0x6a8)](this[_0x5cf3c9(0x267)]);},Sprite_Battler['prototype'][_0x54b1a4(0x3fa)]=function(){const _0x2df2aa=_0x54b1a4;if(!this[_0x2df2aa(0x267)])return;if(this['_shadowSprite']){const _0x8064a5=this[_0x2df2aa(0x6a9)](this[_0x2df2aa(0x267)]);this[_0x2df2aa(0x7fa)](this[_0x2df2aa(0xb62)],_0x8064a5),this[_0x2df2aa(0x32b)]();}this[_0x2df2aa(0xbb1)]&&this[_0x2df2aa(0x267)][_0x2df2aa(0x6a8)](this[_0x2df2aa(0xbb1)]);this[_0x2df2aa(0xa20)]&&this['_distortionSprite']['addChild'](this[_0x2df2aa(0xa20)]);if(this['_mainSprite']){if(_0x2df2aa(0xb02)==='crpMO')this[_0x2df2aa(0x267)][_0x2df2aa(0x6a8)](this[_0x2df2aa(0x4cb)]);else{if(!_0x29cce0[_0x2df2aa(0xbbd)]())return;if(!_0x49b3a9['VisuMZ_3_ActSeqCamera'])return;const _0x3952fc=_0x975e17[_0x2df2aa(0x859)]();if(!_0x3952fc)return;_0x3952fc['setWaitMode'](_0x2df2aa(0xb64));}}this[_0x2df2aa(0x259)]&&this[_0x2df2aa(0x267)][_0x2df2aa(0x6a8)](this[_0x2df2aa(0x259)]),this[_0x2df2aa(0x372)]&&this[_0x2df2aa(0x267)][_0x2df2aa(0x6a8)](this[_0x2df2aa(0x372)]);},Sprite_Battler[_0x54b1a4(0x375)]['updateShadowVisibility']=function(){const _0x15e6e4=_0x54b1a4;if(!this[_0x15e6e4(0xb62)])return;if(this[_0x15e6e4(0xb7d)]&&this['_battler'][_0x15e6e4(0xc7a)]()){const _0x2ca349=this[_0x15e6e4(0xb62)][_0x15e6e4(0x65b)];this[_0x15e6e4(0xb62)][_0x15e6e4(0x96a)](0x0,0x0,_0x2ca349['width'],_0x2ca349[_0x15e6e4(0xdd7)]);}else this[_0x15e6e4(0xb62)][_0x15e6e4(0x96a)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x91e)]=function(){const _0x5ce71a=_0x54b1a4;return SceneManager['isSceneBattle']()?SceneManager[_0x5ce71a(0xc22)][_0x5ce71a(0xaca)][_0x5ce71a(0x9dc)]:this[_0x5ce71a(0x7bd)];},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x703)]=function(_0x562ecc,_0x5c23b6){const _0x5677ea=_0x54b1a4;if(!this[_0x5677ea(0xb7d)]['isSpriteVisible']())return;if(BattleManager[_0x5677ea(0x570)]())return;const _0x4a80ab=VisuMZ['BattleCore'][_0x5677ea(0x916)]['Damage'],_0x72ff41=new Sprite_Damage();_0x72ff41['_duration']=_0x4a80ab['PopupDuration'],this[_0x5677ea(0x513)](_0x72ff41),_0x72ff41[_0x5677ea(0x703)](_0x562ecc,_0x5c23b6),this[_0x5677ea(0xd7f)](_0x72ff41);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x4c2)]=function(_0x347c93,_0x4c9b92,_0x2f08eb){const _0x44691e=_0x54b1a4;if(!this[_0x44691e(0xb7d)][_0x44691e(0xd4b)]())return;if(BattleManager[_0x44691e(0x570)]())return;const _0x51de77=VisuMZ[_0x44691e(0x387)][_0x44691e(0x916)][_0x44691e(0x5f5)],_0xd6fbaa=new Sprite_Damage();_0xd6fbaa[_0x44691e(0x9fc)]=_0x51de77[_0x44691e(0x3df)],this[_0x44691e(0x513)](_0xd6fbaa),_0xd6fbaa['setupIconTextPopup'](_0x347c93,_0x4c9b92,_0x2f08eb),this[_0x44691e(0xd7f)](_0xd6fbaa);},Sprite_Battler['prototype'][_0x54b1a4(0xa8c)]=function(){const _0x4a0f0f=_0x54b1a4;if(!this[_0x4a0f0f(0xb7d)][_0x4a0f0f(0x304)]())return;while(this[_0x4a0f0f(0xb7d)][_0x4a0f0f(0x304)]()){if('YjOCN'===_0x4a0f0f(0x689)){if(this['_battler'][_0x4a0f0f(0xd4b)]()){if('hddUv'===_0x4a0f0f(0xa6f))this[_0x4a0f0f(0x728)]();else{_0xf48c8f[_0x4a0f0f(0x387)][_0x4a0f0f(0x74c)]['call'](this,_0x1c3f60,_0x5ca627);if(!_0x324748['isImmortal']())return;if(_0x221845[_0x4a0f0f(0x3de)]!==_0x21bac7[_0x4a0f0f(0x243)]())return;let _0x16558d=_0x20900a[_0x4a0f0f(0x587)];!this[_0x4a0f0f(0x88f)]()&&(_0x16558d*=_0x4c51db['stateRate'](_0x197fbf[_0x4a0f0f(0x3de)]),_0x16558d*=this[_0x4a0f0f(0xb80)](_0x47ed3f)),_0x2d4221[_0x4a0f0f(0xc4b)]()<_0x16558d&&(_0x37c05f[_0x4a0f0f(0x528)]=!![],this[_0x4a0f0f(0x868)](_0x38bf80));}}}else{if(!this[_0x4a0f0f(0xb7d)])return;if(!this[_0x4a0f0f(0x8a9)])return;const _0xb7dcd6=_0x2c71b7[_0x4a0f0f(0x387)][_0x4a0f0f(0x916)][_0x4a0f0f(0x60e)],_0x1a0221=this[_0x4a0f0f(0x8a9)];_0x1a0221[_0x4a0f0f(0x739)]=this[_0x4a0f0f(0xa57)]();const _0x240f1c=_0xb7dcd6['OffsetX'],_0x10446b=_0xb7dcd6[_0x4a0f0f(0x567)];_0x1a0221['x']=_0x240f1c,_0x1a0221['x']+=this['_battler'][_0x4a0f0f(0xa27)](),_0x1a0221['y']=-this[_0x4a0f0f(0xdd7)]+_0x10446b,_0x1a0221['y']+=this['_battler'][_0x4a0f0f(0x673)](),_0x44e58d[_0x4a0f0f(0xb9d)]&&_0x55add3[_0x4a0f0f(0xc22)][_0x4a0f0f(0xaca)]&&(_0x1a0221['x']+=this['x'],_0x1a0221['y']+=this['y']);}}this[_0x4a0f0f(0xb7d)]['clearDamagePopup'](),this['_battler'][_0x4a0f0f(0x295)]();},Sprite_Battler['prototype'][_0x54b1a4(0x728)]=function(){const _0xdc6cef=_0x54b1a4;if(BattleManager[_0xdc6cef(0x570)]())return;const _0x578f5b=VisuMZ[_0xdc6cef(0x387)][_0xdc6cef(0x916)][_0xdc6cef(0x5f5)],_0x28f0bd=new Sprite_Damage();_0x28f0bd['_duration']=_0x578f5b[_0xdc6cef(0x3df)],this['sortDamageSprites'](_0x28f0bd),_0x28f0bd['setup'](this[_0xdc6cef(0xb7d)]),_0x28f0bd[_0xdc6cef(0xc16)](this[_0xdc6cef(0xb7d)]),this[_0xdc6cef(0xd7f)](_0x28f0bd);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xd7f)]=function(_0x1a1614){const _0x4ee6c0=_0x54b1a4;this[_0x4ee6c0(0x8cc)][_0x4ee6c0(0x519)](_0x1a1614);if(this['isShownOnBattlePortrait']()){const _0x5878db=SceneManager[_0x4ee6c0(0xc22)][_0x4ee6c0(0x89f)];if(_0x5878db)_0x5878db['addDamageSprite'](_0x1a1614,this[_0x4ee6c0(0xb7d)]);}else{this[_0x4ee6c0(0x91e)]()['addChild'](_0x1a1614);if(SceneManager[_0x4ee6c0(0xae0)]())_0x1a1614[_0x4ee6c0(0xbcd)]['x']=-0x1;}},Sprite_Battler[_0x54b1a4(0x375)]['isShownOnBattlePortrait']=function(){const _0x21ea72=_0x54b1a4;return!$gameSystem[_0x21ea72(0xc91)]()&&this[_0x21ea72(0xb7d)]&&this['_battler'][_0x21ea72(0xa2c)]();return!$gameSystem[_0x21ea72(0xc91)]()&&this['_battler']&&this[_0x21ea72(0xb7d)]['isActor']()&&Window_BattleStatus['prototype'][_0x21ea72(0xd92)]()===_0x21ea72(0x7f7);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x513)]=function(_0x4efc9e){const _0x3afe58=_0x54b1a4;this[_0x3afe58(0x242)](_0x4efc9e,!![]);const _0x48dabb=VisuMZ[_0x3afe58(0x387)][_0x3afe58(0x916)][_0x3afe58(0x5f5)],_0x43bea9=SceneManager['isBattleFlipped']()?-0x1:0x1;if(_0x48dabb['NewPopupBottom'])for(const _0x3b53d9 of this[_0x3afe58(0x8cc)]){if(_0x3afe58(0x5d9)!==_0x3afe58(0x5d9)){_0x2dedf6(_0x3afe58(0xb61)),_0x5e3fec[_0x3afe58(0x3ca)]();return;}else _0x3b53d9['x']+=_0x48dabb[_0x3afe58(0x39a)]*_0x43bea9,_0x3b53d9['y']+=_0x48dabb[_0x3afe58(0x9c1)];}else{const _0x210995=this['_damages'][this['_damages']['length']-0x1];_0x210995&&(_0x4efc9e['x']=_0x210995['x']+_0x48dabb[_0x3afe58(0x39a)]*_0x43bea9,_0x4efc9e['y']=_0x210995['y']+_0x48dabb[_0x3afe58(0x9c1)]);}},Sprite_Battler[_0x54b1a4(0x375)]['alignBattleCoreDamageSprite']=function(_0x9a52e2,_0xd62229){const _0x35c604=_0x54b1a4,_0x18c211=SceneManager[_0x35c604(0xae0)]()?-0x1:0x1;let _0x2e7bd8=this[_0x35c604(0xc43)];_0x2e7bd8+=this[_0x35c604(0xb24)]();let _0x168a99=this[_0x35c604(0xb10)];const _0x273e1b=this[_0x35c604(0x267)][_0x35c604(0xbcd)]['y'];_0x168a99+=this[_0x35c604(0x221)]();const _0x2ad353=SceneManager[_0x35c604(0xc22)][_0x35c604(0x89f)];if(_0x2ad353&&this[_0x35c604(0x7bd)]===_0x2ad353){if(_0x35c604(0x559)!=='LZGYS'){_0x2e7bd8+=_0x2ad353['x']-this['damageOffsetX']();const _0x358bd7=_0x2ad353[_0x35c604(0xd04)]()*0x3/0x4;_0x168a99=_0x2ad353['y']+_0x358bd7,_0x168a99=Math[_0x35c604(0x41c)](_0x168a99,_0x2ad353['y']+this['y']-this[_0x35c604(0xdd7)]+_0x358bd7);}else _0x444358[_0x35c604(0x495)]=_0x42ef66(_0x5ae75e['$1']),_0x1e4ce9[_0x35c604(0xdd7)]=_0x4783be(_0x399768['$2']);}_0x9a52e2['x']=Math[_0x35c604(0x68d)](_0x2e7bd8+this[_0x35c604(0x9a0)]()*_0x18c211),_0x9a52e2['y']=Math['round'](_0x168a99+this[_0x35c604(0x356)]());},VisuMZ['BattleCore'][_0x54b1a4(0x987)]=Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x9a0)],Sprite_Battler[_0x54b1a4(0x375)]['damageOffsetX']=function(){const _0x149336=_0x54b1a4;let _0x96d803=VisuMZ['BattleCore'][_0x149336(0x987)][_0x149336(0xd6c)](this),_0x3abf3f=VisuMZ['BattleCore'][_0x149336(0x916)][_0x149336(0x5f5)][_0x149336(0x1fc)]||0x0;return Math[_0x149336(0x68d)](_0x96d803+_0x3abf3f);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x776)]=Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x356)],Sprite_Battler['prototype']['damageOffsetY']=function(){const _0x435fdb=_0x54b1a4;let _0x486383=VisuMZ[_0x435fdb(0x387)]['Sprite_Battler_damageOffsetY'][_0x435fdb(0xd6c)](this);switch(VisuMZ['BattleCore']['Settings'][_0x435fdb(0x5f5)][_0x435fdb(0xb08)]){case _0x435fdb(0x5d6):_0x486383-=this[_0x435fdb(0xdd7)]*this[_0x435fdb(0xbcd)]['y'];break;case'center':_0x486383-=this[_0x435fdb(0xdd7)]*this[_0x435fdb(0xbcd)]['y']*0.5;break;}let _0x5c4f04=VisuMZ[_0x435fdb(0x387)][_0x435fdb(0x916)][_0x435fdb(0x5f5)][_0x435fdb(0xb48)]||0x0;return Math[_0x435fdb(0x68d)](_0x486383+_0x5c4f04);},Sprite_Actor['prototype'][_0x54b1a4(0x9a0)]=function(){return Sprite_Battler['prototype']['damageOffsetX']['call'](this);},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x356)]=function(){const _0x26c555=_0x54b1a4;return Sprite_Battler[_0x26c555(0x375)][_0x26c555(0x356)]['call'](this);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x320)]=function(_0x8c8b3a){const _0x5b3553=_0x54b1a4;this[_0x5b3553(0xb92)]()?'bLqYG'!==_0x5b3553(0xc8b)?SceneManager[_0x5b3553(0xc22)][_0x5b3553(0x89f)][_0x5b3553(0x437)](_0x8c8b3a):(this[_0x5b3553(0x9c8)]()[_0x5b3553(0x6a8)](_0x2e6653),_0x3c6a62[_0x5b3553(0x84c)]=!![]):(this['damageContainer']()['removeChild'](_0x8c8b3a),this[_0x5b3553(0x8cc)]['remove'](_0x8c8b3a),_0x8c8b3a[_0x5b3553(0x86c)]());},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x4ff)]=Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xc2a)],Sprite_Battler['prototype'][_0x54b1a4(0xc2a)]=function(_0x18b5bc,_0x2078e5){const _0x3b7fb7=_0x54b1a4,_0x356e7c=VisuMZ[_0x3b7fb7(0x387)]['Settings'];if(this[_0x3b7fb7(0x3ac)]===Sprite_Actor)_0x18b5bc+=_0x356e7c['Actor'][_0x3b7fb7(0x8bd)]||0x0,_0x2078e5+=_0x356e7c[_0x3b7fb7(0x2c1)][_0x3b7fb7(0x567)]||0x0;else{if(this[_0x3b7fb7(0x3ac)]===Sprite_Enemy){if(_0x3b7fb7(0x6db)!==_0x3b7fb7(0x505))_0x18b5bc+=_0x356e7c['Enemy'][_0x3b7fb7(0x8bd)]||0x0,_0x2078e5+=_0x356e7c[_0x3b7fb7(0x809)][_0x3b7fb7(0x567)]||0x0;else{const _0x35de8c=this[_0x3b7fb7(0x7b6)]()[_0x3b7fb7(0x508)];if(_0x35de8c[_0x3b7fb7(0x298)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}}}this[_0x3b7fb7(0xb7d)]&&(_0x18b5bc=this[_0x3b7fb7(0xb7d)][_0x3b7fb7(0xc4a)]??_0x18b5bc,_0x2078e5=this['_battler'][_0x3b7fb7(0x47e)]??_0x2078e5),VisuMZ[_0x3b7fb7(0x387)][_0x3b7fb7(0x4ff)]['call'](this,_0x18b5bc,_0x2078e5),this[_0x3b7fb7(0x6e5)]=this[_0x3b7fb7(0x6f7)],this['_targetHomeY']=this['_homeY'],this['_homeDuration']=0x0,this['_homeWholeDuration']=0x0,this[_0x3b7fb7(0x4f4)]=_0x3b7fb7(0xad4);},VisuMZ['BattleCore']['Sprite_Battler_update']=Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x879)],Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x879)]=function(){const _0x1be236=_0x54b1a4;VisuMZ[_0x1be236(0x387)][_0x1be236(0x51b)][_0x1be236(0xd6c)](this);if(!this['_battler']&&this['_hpGaugeSprite']){if(_0x1be236(0xb0e)===_0x1be236(0x335)){if(_0x140a17[_0x1be236(0x7d0)])return;_0x577cd7[_0x1be236(0x387)][_0x1be236(0x873)][_0x1be236(0xd6c)](this);}else this[_0x1be236(0x8a9)]['visible']=![];}},VisuMZ['BattleCore'][_0x54b1a4(0xb0c)]=Sprite_Battler['prototype']['updateMain'],Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xbcc)]=function(){const _0x54dcd7=_0x54b1a4;this[_0x54dcd7(0xb84)](),this[_0x54dcd7(0x29f)](),this[_0x54dcd7(0x2d0)](),this['updateFlip'](),VisuMZ[_0x54dcd7(0x387)][_0x54dcd7(0xb0c)]['call'](this),this[_0x54dcd7(0x7a2)](),this['updateShakeFlinch']();if(this[_0x54dcd7(0x3ac)]===Sprite_Enemy)this[_0x54dcd7(0x615)]();},VisuMZ['BattleCore']['Sprite_Battler_updatePosition']=Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x37e)],Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x37e)]=function(){const _0xb4a421=_0x54b1a4;this[_0xb4a421(0x8a0)](),VisuMZ[_0xb4a421(0x387)][_0xb4a421(0xa16)][_0xb4a421(0xd6c)](this),this[_0xb4a421(0xcfc)](),this[_0xb4a421(0x791)]();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x417)]=function(){const _0x193cb6=_0x54b1a4,_0x30a807=this[_0x193cb6(0x5ee)]();if(this['_battler']['isSelected']())this[_0x193cb6(0xaaa)]++,Graphics[_0x193cb6(0xccf)]%0x1e<0xf?_0x30a807[_0x193cb6(0x533)]([0xff,0xff,0xff,0x40]):_0x30a807['setBlendColor']([0x0,0x0,0x0,0x0]);else{if(this[_0x193cb6(0xaaa)]>0x0){if(_0x193cb6(0x3a6)!==_0x193cb6(0xd13))this[_0x193cb6(0xaaa)]=0x0,_0x30a807[_0x193cb6(0x533)]([0x0,0x0,0x0,0x0]);else{const _0x5f3120=this[_0x193cb6(0x267)][_0x193cb6(0xbcd)]['y'];_0x29bf69-=(_0x5f3120-0x1)*this[_0x193cb6(0xdd7)];}}}},Sprite_Battler[_0x54b1a4(0x375)]['silentHomeMove']=function(_0x1681f1,_0x5512a4){const _0x347df8=_0x54b1a4,_0x4e80eb=_0x1681f1-this['_homeX'],_0x3dbe5b=_0x5512a4-this['_homeY'];this[_0x347df8(0x6f7)]=_0x1681f1,this[_0x347df8(0x96f)]=_0x5512a4,this['_offsetX']-=_0x4e80eb,this[_0x347df8(0x4b1)]-=_0x3dbe5b,this[_0x347df8(0x32c)]-=_0x4e80eb,this[_0x347df8(0x924)]-=_0x3dbe5b,this[_0x347df8(0x37e)]();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x5fb)]=function(_0x5c8224,_0x889d95,_0x1c532a,_0x3e8040){const _0x2f8b81=_0x54b1a4;if(this[_0x2f8b81(0x6e5)]!==_0x5c8224||this[_0x2f8b81(0x989)]!==_0x889d95){if('MPMEg'!==_0x2f8b81(0x541))_0x21d163[_0x2f8b81(0x519)](this[_0x2f8b81(0xb1e)]()[_0x2f8b81(0xab2)]());else{this[_0x2f8b81(0x6e5)]=_0x5c8224,this[_0x2f8b81(0x989)]=_0x889d95,this[_0x2f8b81(0x40a)]=_0x1c532a,this[_0x2f8b81(0xd49)]=_0x1c532a,this[_0x2f8b81(0x4f4)]=_0x3e8040;if(_0x1c532a<=0x0){if('Hxfwv'!==_0x2f8b81(0x9b9))return this[_0x2f8b81(0x792)]()[_0x2f8b81(0xd19)](_0x1999d3=>_0x1999d3[_0x2f8b81(0x46a)]());else this['onHomeMoveEnd']();}}}},Sprite_Battler[_0x54b1a4(0x375)]['updateHomeMove']=function(){const _0x229911=_0x54b1a4;if(this[_0x229911(0x40a)]<=0x0)return;const _0xfa2ad8=this[_0x229911(0x40a)],_0x30cfda=this[_0x229911(0xd49)],_0x5e611e=this[_0x229911(0x4f4)];Imported[_0x229911(0x2e5)]?(this[_0x229911(0x6f7)]=this['applyEasing'](this[_0x229911(0x6f7)],this[_0x229911(0x6e5)],_0xfa2ad8,_0x30cfda,_0x5e611e),this[_0x229911(0x96f)]=this['applyEasing'](this[_0x229911(0x96f)],this[_0x229911(0x989)],_0xfa2ad8,_0x30cfda,_0x5e611e)):(this[_0x229911(0x6f7)]=(this[_0x229911(0x6f7)]*(_0xfa2ad8-0x1)+this[_0x229911(0x6e5)])/_0xfa2ad8,this[_0x229911(0x96f)]=(this[_0x229911(0x96f)]*(_0xfa2ad8-0x1)+this[_0x229911(0x989)])/_0xfa2ad8);this[_0x229911(0x40a)]--;if(this[_0x229911(0x40a)]<=0x0)this[_0x229911(0xc29)]();},Sprite_Battler[_0x54b1a4(0x375)]['onHomeMoveEnd']=function(){const _0x42c11d=_0x54b1a4;this[_0x42c11d(0x6f7)]=this[_0x42c11d(0x6e5)],this[_0x42c11d(0x96f)]=this['_targetHomeY'];},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xcfc)]=function(){const _0x121353=_0x54b1a4;this[_0x121353(0xc43)]=this['x'],this[_0x121353(0xb10)]=this['y'],this[_0x121353(0x8f9)](),this['updateJump'](),this['x']+=this['extraPositionX'](),this['y']+=this['extraPositionY'](),this['y']+=this['extraPositionScaledY'](),this['x']=Math[_0x121353(0x8a3)](this['x']),this['y']=Math[_0x121353(0x8a3)](this['y']);},Sprite_Battler[_0x54b1a4(0x375)]['extraPositionX']=function(){let _0x3f99d3=0x0;return _0x3f99d3;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x221)]=function(){const _0x5c156d=_0x54b1a4;let _0x39f5f4=0x0;return this[_0x5c156d(0xb7d)]&&!this[_0x5c156d(0xb7d)][_0x5c156d(0xd28)]()&&(_0x39f5f4-=this[_0x5c156d(0x501)],_0x39f5f4-=this['_jumpHeight']),_0x39f5f4;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xa34)]=function(){const _0x190802=_0x54b1a4;let _0x3cf09d=0x0;if(this[_0x190802(0x267)]&&this[_0x190802(0x3ac)]!==Sprite_SvEnemy){if('zOqQj'==='zOqQj'){const _0x4483d8=this[_0x190802(0x267)][_0x190802(0xbcd)]['y'];_0x3cf09d-=(_0x4483d8-0x1)*this['height'];}else{if(!this['isAutoBattleCommandAdded']())return;const _0x3c9cdd=this[_0x190802(0x56c)](),_0x4f2de7=_0x39eb11[_0x190802(0x387)][_0x190802(0x916)][_0x190802(0x458)][_0x190802(0xb9f)],_0x54890f=_0x3c9cdd===_0x190802(0xdd1)?_0x36411a['autoBattle']:_0x190802(0x9af)[_0x190802(0xd76)](_0x4f2de7,_0x4fad2d['autoBattle']),_0x29987f=this[_0x190802(0x201)]();this[_0x190802(0x59f)](_0x54890f,_0x190802(0xb28),_0x29987f);}}return _0x3cf09d;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xbba)]=function(){const _0x5246e0=_0x54b1a4,_0x56cbc2=this['_battler']&&this[_0x5246e0(0xb7d)][_0x5246e0(0x993)]();this[_0x5246e0(0xaa8)]=(_0x56cbc2?-0x1:0x1)*Math['abs'](this[_0x5246e0(0xbcd)]['x']);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xb90)]=function(_0x3d8fe6,_0x5c0367,_0x5e9db7){const _0x5d9afe=_0x54b1a4;if(!this['canMove']())return;if(this[_0x5d9afe(0xa3d)]===_0x3d8fe6)return;this[_0x5d9afe(0xa3d)]=_0x3d8fe6,this[_0x5d9afe(0x278)]=_0x5c0367,this[_0x5d9afe(0xa06)]=_0x5c0367,this[_0x5d9afe(0x832)]=_0x5e9db7||'Linear';if(_0x5c0367<=0x0)this[_0x5d9afe(0x501)]=_0x3d8fe6;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x8f9)]=function(){const _0x247cf1=_0x54b1a4;if(this[_0x247cf1(0x278)]<=0x0)return;const _0x17db72=this['_floatDuration'],_0x1dca91=this[_0x247cf1(0xa06)],_0x28639d=this[_0x247cf1(0x832)];if(Imported[_0x247cf1(0x2e5)]){if('lyNOc'===_0x247cf1(0xb33))this[_0x247cf1(0x501)]=this[_0x247cf1(0x8e0)](this[_0x247cf1(0x501)],this['_targetFloatHeight'],_0x17db72,_0x1dca91,_0x28639d);else{const _0x5d8251=_0x45f30d(_0x29da66['$1']);return[_0x2bd77d[_0x247cf1(0x328)]()[_0x5d8251]];}}else this[_0x247cf1(0x501)]=(this[_0x247cf1(0x501)]*(_0x17db72-0x1)+this['_targetFloatHeight'])/_0x17db72;this[_0x247cf1(0x278)]--;if(this[_0x247cf1(0x278)]<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x37d)]=function(){const _0x2d07b5=_0x54b1a4;this[_0x2d07b5(0x501)]=this[_0x2d07b5(0xa3d)];},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x46a)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x54b1a4(0x375)]['startJump']=function(_0x3336f1,_0x4e9a54){const _0x1f99a2=_0x54b1a4;if(!this[_0x1f99a2(0x247)]())return;if(_0x4e9a54<=0x0)return;this[_0x1f99a2(0x24d)]=_0x3336f1,this[_0x1f99a2(0x42a)]=_0x4e9a54,this[_0x1f99a2(0xc28)]=_0x4e9a54;},Sprite_Battler['prototype'][_0x54b1a4(0x816)]=function(){const _0x5935d8=_0x54b1a4;if(this[_0x5935d8(0x42a)]<=0x0)return;const _0x19593c=this[_0x5935d8(0xc28)]-this[_0x5935d8(0x42a)],_0x2825b8=this[_0x5935d8(0xc28)]/0x2,_0x54f84d=this[_0x5935d8(0x24d)],_0x3770ef=-_0x54f84d/Math[_0x5935d8(0xd1a)](_0x2825b8,0x2);this[_0x5935d8(0xd0c)]=_0x3770ef*Math[_0x5935d8(0xd1a)](_0x19593c-_0x2825b8,0x2)+_0x54f84d,this['_jumpDuration']--;if(this[_0x5935d8(0x42a)]<=0x0)return this[_0x5935d8(0xdcf)]();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xdcf)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xc25)]=function(){const _0x173235=_0x54b1a4;return this[_0x173235(0x42a)]>0x0;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x812)]=function(_0x1a2267,_0x12f58a,_0x3edc7e){const _0x1dd431=_0x54b1a4;if(this[_0x1dd431(0x5d8)]===_0x1a2267)return;this[_0x1dd431(0x5d8)]=_0x1a2267,this[_0x1dd431(0x284)]=_0x12f58a,this[_0x1dd431(0x846)]=_0x12f58a,this[_0x1dd431(0x4ce)]=_0x3edc7e||_0x1dd431(0xad4);if(_0x12f58a<=0x0)this[_0x1dd431(0x9e2)]=_0x1a2267;},Sprite_Battler[_0x54b1a4(0x375)]['updateOpacity']=function(){const _0x2cfdb8=_0x54b1a4;if(this['constructor'][_0x2cfdb8(0x56b)]===_0x2cfdb8(0xd05))return;if(this[_0x2cfdb8(0x284)]<=0x0)return;const _0x371def=this[_0x2cfdb8(0x284)],_0x5b4bbe=this[_0x2cfdb8(0x846)],_0x2b1f38=this[_0x2cfdb8(0x4ce)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x2cfdb8(0xa0b)===_0x2cfdb8(0x499))return _0x1e19c0['BattleCore'][_0x2cfdb8(0x916)]['Damage'][_0x2cfdb8(0x782)]['call'](this,_0x261ce7,_0x2213a2);else this[_0x2cfdb8(0x9e2)]=this[_0x2cfdb8(0x8e0)](this['opacity'],this[_0x2cfdb8(0x5d8)],_0x371def,_0x5b4bbe,_0x2b1f38);}else this['opacity']=(this[_0x2cfdb8(0x9e2)]*(_0x371def-0x1)+this['_targetOpacity'])/_0x371def;this[_0x2cfdb8(0x284)]--;if(this[_0x2cfdb8(0x284)]<=0x0)this['onOpacityEnd']();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xd6b)]=function(){const _0x534d12=_0x54b1a4;this[_0x534d12(0x9e2)]=this[_0x534d12(0x5d8)];},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xada)]=function(){const _0x978703=_0x54b1a4;return this[_0x978703(0x284)]>0x0;},Sprite_Battler['prototype']['updateShadow']=function(){const _0x53f3e6=_0x54b1a4;this[_0x53f3e6(0xb62)][_0x53f3e6(0x739)]=this[_0x53f3e6(0xb7d)][_0x53f3e6(0xb3b)](),this['updateShadowPosition']();},Sprite_Battler[_0x54b1a4(0x375)]['updateShadowPosition']=function(){const _0x445bea=_0x54b1a4;if(!this[_0x445bea(0xb62)])return;this[_0x445bea(0xb62)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x54b1a4(0x375)]['updateShadowScale']=function(){const _0x38f4f4=_0x54b1a4;if(!this['_battler'])return;this['_shadowScaleX']=this[_0x38f4f4(0xb7d)][_0x38f4f4(0x404)](),this[_0x38f4f4(0x7ec)]=this[_0x38f4f4(0xb7d)][_0x38f4f4(0xa58)]();},Game_BattlerBase[_0x54b1a4(0x375)][_0x54b1a4(0x404)]=function(){const _0x450b41=_0x54b1a4,_0x28aa0f=this[_0x450b41(0xa2c)]()?this[_0x450b41(0x6fe)]():this[_0x450b41(0x717)]();if(_0x28aa0f){const _0x8f998d=_0x28aa0f[_0x450b41(0xd77)];if(_0x8f998d[_0x450b41(0x298)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i)){if('RVTrq'!==_0x450b41(0x92b))_0x43d52b[_0x450b41(0x387)]['Sprite_Enemy_update'][_0x450b41(0xd6c)](this),this[_0x450b41(0x32b)]();else return Number(RegExp['$1'])*0.01;}else{if(_0x8f998d[_0x450b41(0x298)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if('hSWeq'!==_0x450b41(0x8b0)){if(!_0x4517f9['isSideView']())return;const _0x4496c8=this[_0x450b41(0x887)]();if(!_0x4496c8)return;_0x4496c8[_0x450b41(0x812)](_0x3f4b8b,_0x188d55,_0x373fae);}else return Number(RegExp['$1'])||0x0;}}}return 0x1;},Game_BattlerBase[_0x54b1a4(0x375)]['battlerShadowScaleY']=function(){const _0x47dfbf=_0x54b1a4,_0x1eb81f=this[_0x47dfbf(0xa2c)]()?this[_0x47dfbf(0x6fe)]():this[_0x47dfbf(0x717)]();if(_0x1eb81f){if(_0x47dfbf(0xb52)!==_0x47dfbf(0xb52)){_0x54e559['VisuMZ_0_CoreEngine']&&this[_0x47dfbf(0x796)]()&&this['repositionEnemiesByResolution']();const _0x4acef5=_0x38ac06['members'](),_0x245264=[];for(const _0x15d493 of _0x4acef5){_0x245264['push'](new _0xe5ffe8(_0x15d493));}_0x245264[_0x47dfbf(0x496)](this[_0x47dfbf(0x63d)]['bind'](this));for(const _0x327c54 of _0x245264){this[_0x47dfbf(0xa42)][_0x47dfbf(0x6a8)](_0x327c54);}this['_enemySprites']=_0x245264;}else{const _0x10b960=_0x1eb81f[_0x47dfbf(0xd77)];if(_0x10b960[_0x47dfbf(0x298)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x10b960['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}}return 0x1;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xb84)]=function(){const _0x52fb87=_0x54b1a4;if(this['constructor']===Sprite_SvEnemy)return;this[_0x52fb87(0xb89)](),this[_0x52fb87(0x1fe)]();},Sprite_Battler['prototype'][_0x54b1a4(0x1fe)]=function(){const _0x1bfd2d=_0x54b1a4,_0x4f431b=this['_distortionSprite'];_0x4f431b&&(_0x1bfd2d(0xc72)!==_0x1bfd2d(0xc72)?(this[_0x1bfd2d(0x86a)]=_0x2848c7,this[_0x1bfd2d(0x91d)]={}):(_0x4f431b[_0x1bfd2d(0xbcd)]['x']=this[_0x1bfd2d(0x8b6)](),_0x4f431b[_0x1bfd2d(0xbcd)]['y']=this[_0x1bfd2d(0x9c3)]()));},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x8b6)]=function(){const _0xc6d1a0=_0x54b1a4;let _0x4ccf18=0x1;return _0x4ccf18*=this[_0xc6d1a0(0xaa8)],_0x4ccf18*=this[_0xc6d1a0(0x981)],_0x4ccf18;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x9c3)]=function(){return 0x1*this['_growY'];},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xc30)]=function(){const _0x2f2cc9=_0x54b1a4;return this['width']*this[_0x2f2cc9(0x8b6)]();},Sprite_Battler[_0x54b1a4(0x375)]['mainSpriteHeight']=function(){const _0x14db4d=_0x54b1a4;return this[_0x14db4d(0xdd7)]*this['mainSpriteScaleY']();},Sprite_Battler['prototype'][_0x54b1a4(0x6b4)]=function(_0x271234,_0x3f14fd,_0x29b10d,_0x857665){const _0x1399e9=_0x54b1a4;if(!this[_0x1399e9(0x247)]())return;if(!this[_0x1399e9(0x267)])return;if(this[_0x1399e9(0x7c3)]===_0x271234&&this[_0x1399e9(0xcd1)]===_0x3f14fd)return;this['_targetGrowX']=_0x271234,this['_targetGrowY']=_0x3f14fd,this['_growDuration']=_0x29b10d,this[_0x1399e9(0x339)]=_0x29b10d,this[_0x1399e9(0xdb2)]=_0x857665||_0x1399e9(0xad4),_0x29b10d<=0x0&&(this[_0x1399e9(0x981)]=this[_0x1399e9(0x7c3)],this['_growY']=this[_0x1399e9(0xcd1)]);},Sprite_Battler['prototype'][_0x54b1a4(0xb89)]=function(){const _0x379d52=_0x54b1a4;if(this[_0x379d52(0x288)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x32f51b=this[_0x379d52(0x288)],_0x851895=this[_0x379d52(0x339)],_0x7cbe3=this[_0x379d52(0xdb2)];Imported[_0x379d52(0x2e5)]?(this['_growX']=this[_0x379d52(0x8e0)](this[_0x379d52(0x981)],this[_0x379d52(0x7c3)],_0x32f51b,_0x851895,_0x7cbe3),this[_0x379d52(0xac7)]=this[_0x379d52(0x8e0)](this[_0x379d52(0xac7)],this[_0x379d52(0xcd1)],_0x32f51b,_0x851895,_0x7cbe3)):(this[_0x379d52(0x981)]=(this[_0x379d52(0x981)]*(_0x32f51b-0x1)+this[_0x379d52(0x7c3)])/_0x32f51b,this[_0x379d52(0xac7)]=(this[_0x379d52(0xac7)]*(_0x32f51b-0x1)+this['_targetGrowY'])/_0x32f51b);this['_growDuration']--;if(this['_growDuration']<=0x0)this[_0x379d52(0xa5b)]();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xa5b)]=function(){const _0x44c8bd=_0x54b1a4;this['_growX']=this[_0x44c8bd(0x7c3)],this[_0x44c8bd(0xac7)]=this[_0x44c8bd(0xcd1)];},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x764)]=function(){return this['_growDuration']>0x0;},Sprite_Battler['prototype']['startSkew']=function(_0x7cdade,_0x2896ce,_0x58969c,_0x40328c){const _0x59df91=_0x54b1a4;if(!this[_0x59df91(0x247)]())return;if(!this[_0x59df91(0x267)])return;if(this[_0x59df91(0xdbb)]===_0x7cdade&&this[_0x59df91(0x81a)]===_0x2896ce)return;this[_0x59df91(0xdbb)]=_0x7cdade,this[_0x59df91(0x81a)]=_0x2896ce,this[_0x59df91(0x556)]=_0x58969c,this['_skewWholeDuration']=_0x58969c,this[_0x59df91(0x8ad)]=_0x40328c||_0x59df91(0xad4),_0x58969c<=0x0&&(this['_distortionSprite'][_0x59df91(0xb56)]['x']=this[_0x59df91(0xdbb)],this['_distortionSprite']['skew']['y']=this['_targetSkewY']);},Sprite_Battler['prototype'][_0x54b1a4(0x29f)]=function(){const _0x19bd5c=_0x54b1a4;if(this[_0x19bd5c(0x556)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x50f6b9=this[_0x19bd5c(0x556)],_0x6fcbee=this['_skewWholeDuration'],_0x493a55=this[_0x19bd5c(0x8ad)],_0xf780a0=this[_0x19bd5c(0x267)];if(Imported['VisuMZ_0_CoreEngine'])_0xf780a0[_0x19bd5c(0xb56)]['x']=this[_0x19bd5c(0x8e0)](_0xf780a0[_0x19bd5c(0xb56)]['x'],this['_targetSkewX'],_0x50f6b9,_0x6fcbee,_0x493a55),_0xf780a0[_0x19bd5c(0xb56)]['y']=this[_0x19bd5c(0x8e0)](_0xf780a0[_0x19bd5c(0xb56)]['y'],this[_0x19bd5c(0x81a)],_0x50f6b9,_0x6fcbee,_0x493a55);else{if('UHTNb'!==_0x19bd5c(0xcc9))_0xf780a0[_0x19bd5c(0xb56)]['x']=(_0xf780a0[_0x19bd5c(0xb56)]['x']*(_0x50f6b9-0x1)+this['_targetSkewX'])/_0x50f6b9,_0xf780a0['skew']['y']=(_0xf780a0[_0x19bd5c(0xb56)]['y']*(_0x50f6b9-0x1)+this['_targetSkewY'])/_0x50f6b9;else{const _0x24b380=_0x171bc8(_0x219732['$1']);this['addSingleSkillCommand'](_0x345ad8[_0x24b380]);}}this[_0x19bd5c(0x556)]--;if(this[_0x19bd5c(0x556)]<=0x0)this[_0x19bd5c(0xda5)]();},Sprite_Battler['prototype'][_0x54b1a4(0xda5)]=function(){const _0x59b84d=_0x54b1a4;this[_0x59b84d(0x267)][_0x59b84d(0xb56)]['x']=this['_targetSkewX'],this[_0x59b84d(0x267)][_0x59b84d(0xb56)]['y']=this[_0x59b84d(0x81a)];},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x29d)]=function(){const _0x3b7b4b=_0x54b1a4;return this[_0x3b7b4b(0x556)]>0x0;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x851)]=function(_0x499054,_0x2bb498,_0x1ec2d1,_0x4a861a){const _0x235754=_0x54b1a4;if(!this['canMove']())return;if(!this[_0x235754(0x267)])return;if(this['_targetAngle']===_0x499054)return;this[_0x235754(0xdcc)]=_0x499054,this[_0x235754(0x631)]=_0x2bb498,this['_angleWholeDuration']=_0x2bb498,this['_angleEasing']=_0x1ec2d1||_0x235754(0xad4),this[_0x235754(0x4d4)]=_0x4a861a,this[_0x235754(0x4d4)]===undefined&&(this[_0x235754(0x4d4)]=!![]),_0x2bb498<=0x0&&(this[_0x235754(0x78d)]=_0x499054,this[_0x235754(0x4d4)]&&(this[_0x235754(0xdcc)]=0x0,this[_0x235754(0x78d)]=0x0));},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x2d0)]=function(){const _0x4b7db9=_0x54b1a4;this[_0x4b7db9(0x7a3)](),this['applyAngleChange']();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x7a3)]=function(){const _0x525bac=_0x54b1a4;if(this[_0x525bac(0x631)]<=0x0)return;const _0x172626=this['_angleDuration'],_0x553ca2=this[_0x525bac(0xdb3)],_0x4d6b40=this[_0x525bac(0xdab)];if(Imported[_0x525bac(0x2e5)]){if(_0x525bac(0xa9a)!==_0x525bac(0xa9a)){const _0x3d5ecc=this[_0x525bac(0x525)];this[_0x525bac(0xcbd)][_0x525bac(0xab8)](_0x3d5ecc,_0x3d5ecc),this[_0x525bac(0xcbd)]['x']=_0x3d5ecc-this[_0x525bac(0x978)]['x'],this[_0x525bac(0xcbd)]['y']=_0x3d5ecc-this[_0x525bac(0x978)]['y'],this[_0x525bac(0xc0c)]>0x0&&this[_0x525bac(0xc37)]>0x0?this[_0x525bac(0xcbd)][_0x525bac(0x739)]=this[_0x525bac(0x5ca)]():this[_0x525bac(0xcbd)]['visible']=![];}else this['_currentAngle']=this[_0x525bac(0x8e0)](this['_currentAngle'],this[_0x525bac(0xdcc)],_0x172626,_0x553ca2,_0x4d6b40);}else{if('Smyru'!==_0x525bac(0x1ec))return _0xe28d78['BattleCore']['Game_Interpreter_command301']['call'](this,_0xabf8b7);else this[_0x525bac(0x78d)]=(this[_0x525bac(0x78d)]*(_0x172626-0x1)+this['_targetAngle'])/_0x172626;}this[_0x525bac(0x631)]--;if(this['_angleDuration']<=0x0)this[_0x525bac(0x91b)]();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x91b)]=function(){const _0x4d544c=_0x54b1a4;this[_0x4d544c(0x78d)]=this[_0x4d544c(0xdcc)],this[_0x4d544c(0x4d4)]&&(this[_0x4d544c(0xdcc)]=0x0,this[_0x4d544c(0x78d)]=0x0);},Sprite_Battler[_0x54b1a4(0x375)]['isSpinning']=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x876)]=function(){const _0x49085b=_0x54b1a4;if(!this['_distortionSprite'])return;const _0x3762c9=this['_currentAngle'],_0x3e1c73=this['scale']['x'],_0x286cac=this[_0x49085b(0xb7d)][_0x49085b(0xa2c)]()?-0x1:0x1;this['_distortionSprite'][_0x49085b(0x7b3)]=_0x3762c9*_0x3e1c73*_0x286cac;const _0x49094a=this[_0x49085b(0x267)][_0x49085b(0xbcd)]['y'];this[_0x49085b(0x267)]['y']=this['height']*-0.5*(0x2-_0x49094a),this[_0x49085b(0x267)]['y']=Math['ceil'](this[_0x49085b(0x267)]['y']);const _0x55df8e=[this[_0x49085b(0x4cb)],this[_0x49085b(0xbb1)],this['_dragonbonesSpriteContainer']];for(const _0x2e7220 of _0x55df8e){if(!_0x2e7220)continue;_0x2e7220['y']=this['height']*0.5;}this['_shadowSprite']&&('CudpR'==='CudpR'?(this[_0x49085b(0x869)]=this[_0x49085b(0x869)]??0x1,this[_0x49085b(0x7ec)]=this[_0x49085b(0x7ec)]??0x1,this[_0x49085b(0xb62)][_0x49085b(0xbcd)]['x']=this[_0x49085b(0x267)]['scale']['x']*this[_0x49085b(0x869)],this[_0x49085b(0xb62)]['scale']['y']=this[_0x49085b(0x267)][_0x49085b(0xbcd)]['y']*this[_0x49085b(0x7ec)]):this[_0x49085b(0xc15)]=null);},VisuMZ[_0x54b1a4(0x387)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x481)],Sprite_Actor[_0x54b1a4(0x375)]['createStateSprite']=function(){const _0x36d459=_0x54b1a4;VisuMZ['BattleCore'][_0x36d459(0xd18)][_0x36d459(0xd6c)](this),VisuMZ[_0x36d459(0x387)][_0x36d459(0x916)][_0x36d459(0x60e)][_0x36d459(0x870)]&&('aPHcl'===_0x36d459(0x543)?_0x23c4e4[_0x36d459(0xa84)]():this[_0x36d459(0x696)]());},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x663)]=Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x855)],Sprite_Enemy[_0x54b1a4(0x375)]['createStateIconSprite']=function(){const _0x7f6cdf=_0x54b1a4;VisuMZ['BattleCore'][_0x7f6cdf(0x916)]['HpGauge'][_0x7f6cdf(0xbbe)]&&this[_0x7f6cdf(0x696)](),VisuMZ[_0x7f6cdf(0x387)]['Sprite_Enemy_createStateIconSprite'][_0x7f6cdf(0xd6c)](this);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x696)]=function(){const _0x182723=_0x54b1a4;if(!ConfigManager[_0x182723(0xce0)])return;if(this[_0x182723(0x3ac)]===Sprite_SvEnemy)return;const _0x422096=VisuMZ[_0x182723(0x387)][_0x182723(0x916)]['HpGauge'],_0x54c2d9=new Sprite_HpGauge();_0x54c2d9[_0x182723(0x749)]['x']=_0x422096[_0x182723(0x54d)],_0x54c2d9[_0x182723(0x749)]['y']=_0x422096['AnchorY'],_0x54c2d9[_0x182723(0xbcd)]['x']=_0x54c2d9[_0x182723(0xbcd)]['y']=_0x422096[_0x182723(0x385)],this['_hpGaugeSprite']=_0x54c2d9,this[_0x182723(0x6a8)](this[_0x182723(0x8a9)]),Spriteset_Battle[_0x182723(0xb9d)]&&BattleManager[_0x182723(0xd90)](this[_0x182723(0x8a9)]);},VisuMZ[_0x54b1a4(0x387)]['Sprite_Battler_setBattler']=Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xc0f)],Sprite_Battler[_0x54b1a4(0x375)]['setBattler']=function(_0x47afbc){const _0x36b06a=_0x54b1a4,_0x3a85ad=this[_0x36b06a(0xb7d)];VisuMZ[_0x36b06a(0x387)]['Sprite_Battler_setBattler'][_0x36b06a(0xd6c)](this,_0x47afbc),this[_0x36b06a(0x25d)](_0x47afbc);if(_0x3a85ad!==_0x47afbc)this['updateShadowScale']();},Sprite_Battler['prototype']['setupHpGaugeSprite']=function(_0x4c4dfa){const _0x42b4c6=_0x54b1a4;if(!_0x4c4dfa)return;if(!this[_0x42b4c6(0x8a9)])return;if(_0x4c4dfa[_0x42b4c6(0xa2c)]()){}else{if(_0x4c4dfa['isEnemy']()){if(this[_0x42b4c6(0x3ac)]===Sprite_SvEnemy&&!_0x4c4dfa[_0x42b4c6(0xb3b)]())return;}}this[_0x42b4c6(0x8a9)][_0x42b4c6(0x915)](_0x4c4dfa,'hp');},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x702)]=function(){const _0x58f906=_0x54b1a4;return this['_battler']&&this[_0x58f906(0xb7d)][_0x58f906(0x702)]();},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x71f)]=function(){const _0x54956d=_0x54b1a4,_0x1ff651=this[_0x54956d(0x4cb)][_0x54956d(0x65b)];if(!_0x1ff651)return;const _0x52cd60=_0x1ff651[_0x54956d(0x495)];let _0xbd4e2e=_0x1ff651[_0x54956d(0xdd7)];if(this[_0x54956d(0xb7d)]['isDead']()){if(_0x54956d(0x62f)!==_0x54956d(0x5a1)){if(this[_0x54956d(0x3dd)])_0xbd4e2e=Math['max'](0x0,this[_0x54956d(0x3dd)][_0x54956d(0xdd7)]-0x4);}else _0x283da1=this[_0x54956d(0xb7d)][_0x54956d(0xc4a)]??_0x52cae4,_0x4a21a5=this[_0x54956d(0xb7d)][_0x54956d(0x47e)]??_0x485e58;}this[_0x54956d(0x4cb)][_0x54956d(0x96a)](0x0,0x0,_0x52cd60,_0xbd4e2e),this[_0x54956d(0x96a)](0x0,0x0,_0x52cd60,_0xbd4e2e);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x7a2)]=function(){const _0x21d808=_0x54b1a4;if(!this[_0x21d808(0xb7d)])return;if(!this[_0x21d808(0x8a9)])return;const _0x1ac11a=VisuMZ[_0x21d808(0x387)]['Settings'][_0x21d808(0x60e)],_0x509f8b=this[_0x21d808(0x8a9)];_0x509f8b[_0x21d808(0x739)]=this['isVisualHpGaugeDisplayed']();const _0x2f2d24=_0x1ac11a[_0x21d808(0x8bd)],_0x5035bd=_0x1ac11a[_0x21d808(0x567)];_0x509f8b['x']=_0x2f2d24,_0x509f8b['x']+=this['_battler'][_0x21d808(0xa27)](),_0x509f8b['y']=-this[_0x21d808(0xdd7)]+_0x5035bd,_0x509f8b['y']+=this['_battler'][_0x21d808(0x673)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager['_scene']['_spriteset']&&(_0x509f8b['x']+=this['x'],_0x509f8b['y']+=this['y']);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xa57)]=function(){const _0x24282c=_0x54b1a4;if(!this[_0x24282c(0xb7d)])return![];if(this[_0x24282c(0xb7d)]['isActor']())return!![];if(this[_0x24282c(0xb7d)][_0x24282c(0x1fa)]())return![];if(this['opacity']<=0x0)return![];const _0xce9c50=this[_0x24282c(0xb7d)]['enemy']()[_0x24282c(0xd77)];if(_0xce9c50[_0x24282c(0x298)](/<SHOW HP GAUGE>/i))return!![];if(_0xce9c50[_0x24282c(0x298)](/<HIDE HP GAUGE>/i))return![];const _0x166b0d=VisuMZ[_0x24282c(0x387)][_0x24282c(0x916)][_0x24282c(0x60e)];if(_0x166b0d['RequiresDefeat']){if(_0x166b0d[_0x24282c(0xacd)]&&BattleManager[_0x24282c(0x877)]())return!![];if(this[_0x24282c(0xb7d)][_0x24282c(0xd78)])return![];return this[_0x24282c(0xb7d)][_0x24282c(0x3bf)]();}return!![];},VisuMZ[_0x54b1a4(0x387)]['Sprite_Battler_isMoving']=Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x40e)],Sprite_Battler['prototype']['isMoving']=function(){const _0x4344d1=_0x54b1a4;if(!this[_0x4344d1(0xb7d)])return![];if(this[_0x4344d1(0x40a)]>0x0)return!![];return VisuMZ['BattleCore'][_0x4344d1(0x49a)][_0x4344d1(0xd6c)](this);},VisuMZ['BattleCore'][_0x54b1a4(0x1f0)]=Sprite_Battler[_0x54b1a4(0x375)]['startMove'],Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x835)]=function(_0x5012ea,_0x4f21a7,_0x221a04){const _0x50b497=_0x54b1a4;this[_0x50b497(0x247)]()&&VisuMZ[_0x50b497(0x387)]['Sprite_Battler_startMove'][_0x50b497(0xd6c)](this,_0x5012ea,_0x4f21a7,_0x221a04);},Sprite_Battler[_0x54b1a4(0x375)]['canMove']=function(){const _0x38b745=_0x54b1a4;if(this[_0x38b745(0xb7d)]&&this['_battler'][_0x38b745(0x5b2)]())return![];if(this['_battler']&&!this[_0x38b745(0xb7d)]['canBattlerMove']())return![];return $gameSystem[_0x38b745(0xc91)]();},Sprite_Battler['prototype'][_0x54b1a4(0xadb)]=function(){},Sprite_Battler['prototype'][_0x54b1a4(0x76d)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0x6c6)]=function(){},Sprite_Battler[_0x54b1a4(0x375)]['stepFlinch']=function(){const _0x2c16d6=_0x54b1a4,_0x48ed54=VisuMZ['BattleCore'][_0x2c16d6(0x916)][_0x2c16d6(0x2c1)],_0xe961b3=this['_battler']&&this[_0x2c16d6(0xb7d)][_0x2c16d6(0xa2c)]()?0x1:-0x1,_0x5c0e40=this[_0x2c16d6(0xc43)]-this[_0x2c16d6(0x6f7)]+_0xe961b3*_0x48ed54[_0x2c16d6(0xc10)],_0x2de45e=this['_baseY']-this[_0x2c16d6(0x96f)]+_0xe961b3*_0x48ed54['FlinchDistanceY'],_0x1fd1ac=_0x48ed54[_0x2c16d6(0x8c5)];this[_0x2c16d6(0x835)](_0x5c0e40,_0x2de45e,_0x1fd1ac);},Sprite_Battler[_0x54b1a4(0x375)]['startShakeFlinch']=function(_0x1ad16b,_0x3762bc){const _0x51b4f0=_0x54b1a4,_0x3850b5=VisuMZ[_0x51b4f0(0x387)]['Settings'][_0x51b4f0(0x2c1)];this[_0x51b4f0(0xb8b)]=Math['ceil']((_0x3850b5[_0x51b4f0(0x287)]??0x18)*_0x3762bc),this[_0x51b4f0(0x54c)]=Math[_0x51b4f0(0x9db)](this[_0x51b4f0(0x54c)],_0x1ad16b);},Sprite_Battler[_0x54b1a4(0x375)][_0x54b1a4(0xcc6)]=function(){const _0x74c32=_0x54b1a4,_0x1d900c=VisuMZ[_0x74c32(0x387)][_0x74c32(0x916)]['Actor'];if(!(_0x1d900c[_0x74c32(0xdad)]??![]))return;if(this[_0x74c32(0xb8b)]>0x0){const _0x138e58=this[_0x74c32(0xb8b)];this['_shakeFlinchPower']=this['_shakeFlinchPower']*(_0x138e58-0x1)/_0x138e58,this[_0x74c32(0xb8b)]--,this[_0x74c32(0xb8b)]<=0x0&&(_0x74c32(0x6b1)!==_0x74c32(0x7b2)?this[_0x74c32(0x54c)]=0x0:this[_0x74c32(0x6ce)]());}if(this[_0x74c32(0x54c)]>0x0){if(_0x74c32(0x769)===_0x74c32(0x769)){this[_0x74c32(0x4cb)]['x']=Math['randomInt'](this[_0x74c32(0x54c)])*(Math[_0x74c32(0xc4b)]()<0.5?-0x1:0x1);if(this[_0x74c32(0xb10)]!==this['y']){if(_0x74c32(0xc2b)!=='wdjfE'){const _0x3e0a66=_0xbb1da6['members']()[_0x2bc1d5],_0x2cd936=_0x1b3c77['_enemies'][_0x74c32(0x940)](_0x3e0a66);_0x2cd936>=0x0&&(_0x420f07['select'](_0x2cd936),_0x349dd4[_0x74c32(0x983)]());}else this[_0x74c32(0x4cb)]['y']=this[_0x74c32(0xdd7)]*0.5,this['_mainSprite']['y']+=Math[_0x74c32(0xcf9)](this[_0x74c32(0x54c)])*(Math[_0x74c32(0xc4b)]()<0.5?-0x1:0x1);}}else return _0x5a6c05[_0x74c32(0x375)][_0x74c32(0x40e)][_0x74c32(0xd6c)](this);}else{if(_0x74c32(0xb21)!==_0x74c32(0x7fb))this[_0x74c32(0x4cb)]['x']=0x0,this[_0x74c32(0x4cb)]['y']=this[_0x74c32(0xdd7)]*0.5;else{const _0x129ef1=_0x50ba7e[_0x74c32(0x940)](_0x2e8b81['toUpperCase']()[_0x74c32(0x2f4)]());_0x129ef1>=0x0&&_0x129ef1<=0x7&&_0x403398['isDebuffAffected'](_0x129ef1)&&_0x5c0ab6['removeBuff'](_0x129ef1);}}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x771)]=Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x900)],Sprite_Actor['prototype']['initMembers']=function(){const _0x3711c2=_0x54b1a4;VisuMZ[_0x3711c2(0x387)][_0x3711c2(0x771)][_0x3711c2(0xd6c)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x5ee)]=function(){const _0x1c78e3=_0x54b1a4;return this[_0x1c78e3(0x267)]||this['_mainSprite']||this;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x56a)]=Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xb50)],Sprite_Actor['prototype']['moveToStartPosition']=function(){},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x4e9)]=function(_0x4e50ca){const _0x2ef556=_0x54b1a4;if(SceneManager[_0x2ef556(0x5b4)]())return;if(!_0x4e50ca)return;if(!_0x4e50ca[_0x2ef556(0x247)]())return;VisuMZ[_0x2ef556(0x387)][_0x2ef556(0x56a)]['call'](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x5dd)]=Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x9b5)],Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x9b5)]=function(_0x51b3a4){const _0x13af95=_0x54b1a4;VisuMZ['BattleCore']['Settings']['Actor'][_0x13af95(0x24a)]?VisuMZ[_0x13af95(0x387)][_0x13af95(0x916)][_0x13af95(0x2c1)]['HomePosJS'][_0x13af95(0xd6c)](this,_0x51b3a4):VisuMZ[_0x13af95(0x387)][_0x13af95(0x5dd)][_0x13af95(0xd6c)](this,_0x51b3a4);},VisuMZ[_0x54b1a4(0x387)]['Sprite_Actor_setBattler']=Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xc0f)],Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xc0f)]=function(_0x231f1c){const _0x2c6fb7=_0x54b1a4;VisuMZ[_0x2c6fb7(0x387)][_0x2c6fb7(0x53f)][_0x2c6fb7(0xd6c)](this,_0x231f1c),this[_0x2c6fb7(0x4c7)](_0x231f1c);},Sprite_Actor['prototype'][_0x54b1a4(0x4c7)]=function(_0x36b1b2){const _0x4b30f3=_0x54b1a4;if(!_0x36b1b2)return;if(!this[_0x4b30f3(0x4cb)])return;this['_mainSprite'][_0x4b30f3(0x749)]['x']=this[_0x4b30f3(0x2f3)]['svBattlerAnchorX'](),this['_mainSprite'][_0x4b30f3(0x749)]['y']=this[_0x4b30f3(0x2f3)][_0x4b30f3(0x976)](),this['updateShadowVisibility']();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x910)]=Sprite_Actor['prototype'][_0x54b1a4(0x879)],Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x879)]=function(){const _0x490b7e=_0x54b1a4;VisuMZ['BattleCore'][_0x490b7e(0x910)][_0x490b7e(0xd6c)](this),this['_actor']&&(this['updateStateSprite'](),this['updateStyleOpacity']());},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x7a7)]=Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xd2e)],Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xd2e)]=function(){const _0x259d3d=_0x54b1a4;VisuMZ[_0x259d3d(0x387)][_0x259d3d(0x7a7)]['call'](this),this[_0x259d3d(0x4cb)]&&this[_0x259d3d(0x4cb)][_0x259d3d(0x65b)]&&this[_0x259d3d(0xb7d)]&&(this[_0x259d3d(0x4cb)][_0x259d3d(0x65b)][_0x259d3d(0xd41)]!==this[_0x259d3d(0xb7d)]['battlerSmoothImage']()&&(this[_0x259d3d(0x4cb)][_0x259d3d(0x65b)][_0x259d3d(0xd41)]=this[_0x259d3d(0xb7d)][_0x259d3d(0x8d5)]()));},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x5e1)]=Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x615)],Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x615)]=function(){const _0x5c7e83=_0x54b1a4;VisuMZ['BattleCore'][_0x5c7e83(0x5e1)][_0x5c7e83(0xd6c)](this),this[_0x5c7e83(0x2ea)]();},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x2ea)]=function(){const _0x3e42eb=_0x54b1a4;if(!this[_0x3e42eb(0x4cb)])return;if(!this[_0x3e42eb(0xb62)])return;this[_0x3e42eb(0x32b)](),this[_0x3e42eb(0xdb7)]();},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x516)]=function(){const _0x1b1111=_0x54b1a4;this['_stateSprite'][_0x1b1111(0xbcd)]['x']=0x1/(this[_0x1b1111(0xbcd)]['x']||0.001),this['_stateSprite']['scale']['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x793)]=function(){const _0x3fabdd=_0x54b1a4;if(!$gameSystem['isSideView']()&&this[_0x3fabdd(0x3ac)]===Sprite_Actor){const _0x3f2e92=Scene_Battle[_0x3fabdd(0x375)][_0x3fabdd(0xd92)]();[_0x3fabdd(0x761),_0x3fabdd(0xd3a),_0x3fabdd(0x7f7),_0x3fabdd(0x218)]['includes'](_0x3f2e92)&&(this[_0x3fabdd(0x9e2)]=0x0);}},Sprite_Actor[_0x54b1a4(0x375)]['refreshMotion']=function(){const _0x422fdd=_0x54b1a4,_0x293b96=this[_0x422fdd(0x2f3)];if(_0x293b96){if(_0x422fdd(0xa97)===_0x422fdd(0x600)){if(!_0x4eb634[_0x422fdd(0x387)][_0x422fdd(0x916)][_0x422fdd(0x3a2)][_0x422fdd(0x777)])return;_0x2f95a9[_0x422fdd(0x387)][_0x422fdd(0x5f4)]['call'](this,_0x4a114f);}else{const _0x248215=_0x293b96[_0x422fdd(0xb35)]();if(_0x293b96[_0x422fdd(0x539)]()||_0x293b96[_0x422fdd(0x2d3)]())this[_0x422fdd(0x79b)](_0x422fdd(0x572));else{if(_0x248215===0x3)this['startMotion'](_0x422fdd(0x904));else{if(_0x248215===0x2)this[_0x422fdd(0x79b)]('sleep');else{if(this[_0x422fdd(0xcc8)])this['startMotion'](_0x422fdd(0x81e));else{if(_0x293b96[_0x422fdd(0x880)]())this['startMotion'](_0x422fdd(0x755));else{if(_0x293b96[_0x422fdd(0x4ac)]())this[_0x422fdd(0x79b)](_0x422fdd(0xc9e));else{if(_0x293b96[_0x422fdd(0xc83)]()||_0x293b96[_0x422fdd(0xd51)]())this['startMotion']('guard');else{if(_0x248215===0x1)this[_0x422fdd(0x79b)]('abnormal');else{if(_0x293b96['isDying']())this[_0x422fdd(0x79b)](_0x422fdd(0xa11));else{if(_0x293b96[_0x422fdd(0x710)]()){if(_0x422fdd(0x90a)===_0x422fdd(0x25b)){if(!_0x3a2723['isSceneBattle']())return;if(!_0x3e5237[_0x422fdd(0x956)])return;if(!_0x416d6d[_0x422fdd(0x361)]())return;_0x15a869['ConvertParams'](_0x33c66d,_0x347be2);const _0x2b1122=_0x5d765b[_0x422fdd(0x22c)];_0x484e0a[_0x422fdd(0x644)]&&_0x340e46[_0x422fdd(0x644)][_0x422fdd(0x581)]()['gainCurrentActionsETB'](_0x2b1122);}else this['startMotion'](_0x422fdd(0x572));}else _0x293b96[_0x422fdd(0xb7a)]()?this[_0x422fdd(0x79b)](_0x422fdd(0x755)):_0x422fdd(0x244)===_0x422fdd(0x3c0)?_0x4e1889['push'](_0x4e1496(_0x2784c9['$1'])):this['startMotion'](_0x422fdd(0x572));}}}}}}}}}}}},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x6c6)]=function(){const _0x2d8374=_0x54b1a4,_0x2f2f68=0xa,_0x7cd32c=0x12c*_0x2f2f68,_0x222347=0x1e*_0x2f2f68;this[_0x2d8374(0x835)](_0x7cd32c,0x0,_0x222347);},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x364)]=function(){const _0xaffd2c=_0x54b1a4;Sprite_Battler[_0xaffd2c(0x375)][_0xaffd2c(0x364)][_0xaffd2c(0xd6c)](this);},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xb37)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x54b1a4(0x375)]['animationWait']=function(){const _0x2baa09=_0x54b1a4;return Sprite_Battler[_0x2baa09(0xd53)];},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xb8f)]=function(){},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xc44)]=function(){},Sprite_Actor['prototype'][_0x54b1a4(0xa08)]=function(){const _0x3a5d69=_0x54b1a4;if(this[_0x3a5d69(0x23b)]&&++this['_motionCount']>=this['motionSpeed']()){if(this[_0x3a5d69(0x23b)]['loop'])'dDAru'===_0x3a5d69(0x654)?this[_0x3a5d69(0x9e2)]=this[_0x3a5d69(0x5d8)]:this['_pattern']=(this[_0x3a5d69(0xd7e)]+0x1)%0x4;else{if(this[_0x3a5d69(0xd7e)]<0x2){if('zpzDq'!==_0x3a5d69(0xa9f)){const _0x1690f0=this[_0x3a5d69(0x765)](),_0x1c7b6b=_0x1690f0[0x0]?_0x1690f0[0x0][_0x3a5d69(0xc87)]:0x0;return _0x134acb[_0x3a5d69(0x4ab)][_0x1c7b6b];}else this[_0x3a5d69(0xd7e)]++;}else this[_0x3a5d69(0x671)]();}this[_0x3a5d69(0xd46)]=0x0;}},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x565)]=function(_0xd0cf3){const _0x3cac1f=_0x54b1a4;if(_0xd0cf3===_0x3cac1f(0x61f))this[_0x3cac1f(0x27f)]=!![];if(this[_0x3cac1f(0xb7d)]&&this['_battler']['isDead']()){this[_0x3cac1f(0x23b)]=Sprite_Actor[_0x3cac1f(0x99b)][_0x3cac1f(0x904)];return;}const _0x3ea55b=Sprite_Actor[_0x3cac1f(0x99b)][_0xd0cf3];this['_motion']=_0x3ea55b,this[_0x3cac1f(0xd46)]=0x0,this[_0x3cac1f(0xd7e)]=0x0;},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x90e)]=function(_0x5a936e){const _0x5d4880=_0x54b1a4;if(this['hasStaticSvBattler']())return;this['adjustWeaponSpriteOffset'](),this[_0x5d4880(0xa20)]['setup'](_0x5a936e),this[_0x5d4880(0x2f3)][_0x5d4880(0x21f)]();},Sprite_Actor['prototype']['adjustWeaponSpriteOffset']=function(){const _0x563dee=_0x54b1a4;let _0xc01902=-0x10,_0x323a12=this['height']*0.5;const _0x298d73=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x111dc7=this[_0x563dee(0xb7d)]['traitObjects']()[_0x563dee(0x8bb)](_0x263650=>_0x263650&&_0x263650['note'][_0x563dee(0x298)](_0x298d73)?Number(RegExp['$1']):0x0),_0x33905a=this['_battler'][_0x563dee(0xba6)]()[_0x563dee(0x8bb)](_0x2f6400=>_0x2f6400&&_0x2f6400[_0x563dee(0xd77)][_0x563dee(0x298)](_0x298d73)?Number(RegExp['$2']):0x0);_0xc01902=_0x111dc7[_0x563dee(0x5b1)]((_0x368c43,_0x1df828)=>_0x368c43+_0x1df828,_0xc01902),_0x323a12=_0x33905a[_0x563dee(0x5b1)]((_0x46b742,_0x5b2e89)=>_0x46b742+_0x5b2e89,_0x323a12),this['_weaponSprite']['x']=_0xc01902,this[_0x563dee(0xa20)]['y']=_0x323a12,this['_weaponSprite']['update']();},Sprite_Weapon['prototype'][_0x54b1a4(0x915)]=function(_0x2623bb){const _0x46f35b=_0x54b1a4;this['_weaponImageId']=_0x2623bb,this[_0x46f35b(0xd08)]=-0x1,this['_pattern']=0x0,this[_0x46f35b(0xa95)](),this[_0x46f35b(0xb34)]();},Sprite_Actor['prototype'][_0x54b1a4(0x88e)]=function(){},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xadb)]=function(){const _0x2ff31b=_0x54b1a4,_0x583c16=VisuMZ[_0x2ff31b(0x387)][_0x2ff31b(0x916)][_0x2ff31b(0x493)],_0x4fface=_0x583c16['StepDistanceX'],_0x5b4e16=_0x583c16[_0x2ff31b(0xad6)],_0x329fce=_0x583c16['StepDuration'];this['startMove'](-_0x4fface,-_0x5b4e16,_0x329fce);},VisuMZ['BattleCore'][_0x54b1a4(0x8af)]=Sprite_Actor['prototype'][_0x54b1a4(0xb34)],Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0xb34)]=function(){const _0x5bfbf4=_0x54b1a4;if(this['hasStaticSvBattler']())this['updateStaticSvBattlerFrames']();else{if(_0x5bfbf4(0x959)===_0x5bfbf4(0x79f)){if(!_0xf1d2b8['isSideView']())return;const _0x3b31f0=this[_0x5bfbf4(0x887)]();if(!_0x3b31f0)return;if(_0x2a916f===_0x133107||_0x2fb96a===_0x204c26)return;if(_0x50b824(_0x7357f7)||_0x44f5e0(_0x1b6ad3))return;_0x56aea6=_0x42f414||0x0;if(_0x1cf80f>0x0){if(_0x3b31f0['_baseX']>_0x51680a)_0x2ea5a2+=_0x3b31f0[_0x5bfbf4(0x495)]/0x2+_0x5c326f;if(_0x3b31f0['_baseX']<_0x14ebbd)_0x380dcb-=_0x3b31f0[_0x5bfbf4(0x495)]/0x2+_0x13bb27;}if(_0x5bcdbe)this['setBattlerFacePoint'](_0x2439a0,_0x31143b,![]);_0x177691-=_0x3b31f0[_0x5bfbf4(0x6f7)],_0x5eb972-=_0x3b31f0[_0x5bfbf4(0x96f)],_0x3b31f0[_0x5bfbf4(0x835)](_0x142f8f,_0x1428bf,_0x278fca);if(_0x3d5548[_0x5bfbf4(0x2e5)])_0x3b31f0[_0x5bfbf4(0xc6f)](_0x4a2217||_0x5bfbf4(0xad4));}else this[_0x5bfbf4(0x70a)](),VisuMZ[_0x5bfbf4(0x387)]['Sprite_Actor_updateFrame']['call'](this);}},Sprite_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x70a)]=function(){const _0x5cefdd=_0x54b1a4;if(this[_0x5cefdd(0xb7d)]&&this[_0x5cefdd(0xb7d)][_0x5cefdd(0x344)]){if(_0x5cefdd(0x403)!=='RHlHW')this[_0x5cefdd(0xd63)]();else{const _0x1a5d3a=this[_0x5cefdd(0xb7d)]['_freezeMotionData'];this[_0x5cefdd(0x23b)]=Sprite_Actor[_0x5cefdd(0x99b)][_0x1a5d3a[_0x5cefdd(0x2af)]],this['_pattern']=_0x1a5d3a[_0x5cefdd(0x5ba)];const _0x9b3920=this[_0x5cefdd(0xa20)];_0x9b3920[_0x5cefdd(0x46c)](_0x1a5d3a[_0x5cefdd(0xb16)],_0x1a5d3a[_0x5cefdd(0x5ba)]),this['adjustWeaponSpriteOffset']();}}},Sprite_Weapon['prototype'][_0x54b1a4(0x46c)]=function(_0x408825,_0x29b2ca){const _0x297c98=_0x54b1a4;this[_0x297c98(0xcc0)]=_0x408825,this['_animationCount']=-Infinity,this[_0x297c98(0xd7e)]=_0x29b2ca,this[_0x297c98(0xa95)](),this['updateFrame']();},Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x900)]=function(){const _0x3fd926=_0x54b1a4;Sprite_Battler['prototype'][_0x3fd926(0x900)]['call'](this),this[_0x3fd926(0xb69)]=null,this[_0x3fd926(0x7f3)]=![],this[_0x3fd926(0x995)]='',this[_0x3fd926(0x73a)]=0x0,this[_0x3fd926(0x4c0)]=null,this[_0x3fd926(0x64d)]=0x0,this['_shake']=0x0,this['createMainSprite'](),this[_0x3fd926(0x855)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x57b)]=Sprite_Enemy[_0x54b1a4(0x375)]['update'],Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x879)]=function(){const _0x183f76=_0x54b1a4;VisuMZ[_0x183f76(0x387)][_0x183f76(0x57b)][_0x183f76(0xd6c)](this),this[_0x183f76(0x32b)]();},Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xa98)]=function(){const _0x1a14b5=_0x54b1a4;this[_0x1a14b5(0x4cb)]=new Sprite(),this[_0x1a14b5(0x4cb)][_0x1a14b5(0x749)]['x']=0.5,this[_0x1a14b5(0x4cb)][_0x1a14b5(0x749)]['y']=0x1,this['addChild'](this[_0x1a14b5(0x4cb)]),this[_0x1a14b5(0x3fa)]();},Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x5ee)]=function(){return this['_distortionSprite']||this['_mainSprite']||this;},Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xa95)]=function(_0xba2656){const _0x3099fa=_0x54b1a4;this[_0x3099fa(0x65b)]=new Bitmap(0x1,0x1);if(this[_0x3099fa(0xb3b)]()){const _0x5b51f8=this[_0x3099fa(0xb69)]['svBattlerData']();this['bitmap']=new Bitmap(_0x5b51f8[_0x3099fa(0x495)],_0x5b51f8[_0x3099fa(0xdd7)]),this[_0x3099fa(0x4cb)][_0x3099fa(0x65b)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x3099fa(0xc91)]()){if(_0x3099fa(0x28d)==='pteAn'){const _0x3e7d2a=ImageManager['loadSvEnemy'](_0xba2656);_0x3e7d2a['addLoadListener'](this['onStaticEnemyBitmapLoad']['bind'](this,_0x3e7d2a));}else return this['evalDamageFormulaBattleCore'](_0x292f0b);}else{const _0x401da1=ImageManager[_0x3099fa(0xd52)](_0xba2656);_0x401da1[_0x3099fa(0xa2a)](this[_0x3099fa(0xc66)][_0x3099fa(0xc8f)](this,_0x401da1));}}},Sprite_Enemy[_0x54b1a4(0x375)]['onStaticEnemyBitmapLoad']=function(_0x347d39){const _0x5ea279=_0x54b1a4;this['_mainSprite'][_0x5ea279(0x65b)]=_0x347d39,this[_0x5ea279(0x65b)]=new Bitmap(_0x347d39[_0x5ea279(0x495)],_0x347d39[_0x5ea279(0xdd7)]);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x2e3)]=Sprite_Enemy['prototype'][_0x54b1a4(0x3ef)],Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x3ef)]=function(_0x2bc742){const _0x59943e=_0x54b1a4;this[_0x59943e(0x4cb)]&&this[_0x59943e(0x4cb)][_0x59943e(0x3ef)](_0x2bc742);},VisuMZ[_0x54b1a4(0x387)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x54b1a4(0x375)]['initVisibility'],Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x576)]=function(){const _0xaea42b=_0x54b1a4;if(this[_0xaea42b(0x2e4)]())_0xaea42b(0x24e)===_0xaea42b(0x24e)?VisuMZ[_0xaea42b(0x387)][_0xaea42b(0x58a)][_0xaea42b(0xd6c)](this):_0x2d2ac6[_0xaea42b(0x84a)]=[];else{if(_0xaea42b(0xca0)===_0xaea42b(0x45f))_0x8fbfde[_0xaea42b(0x387)][_0xaea42b(0xdc0)][_0xaea42b(0xd6c)](this,_0x4cf1f4);else{this[_0xaea42b(0x7f3)]=!this[_0xaea42b(0xb69)][_0xaea42b(0x1fa)]();if(!this[_0xaea42b(0x7f3)]){if(_0xaea42b(0x215)!==_0xaea42b(0x215)){this[_0xaea42b(0xd1e)][_0xaea42b(0x9e2)]=0x0;return;}else this[_0xaea42b(0x9e2)]=0x0;}}}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x5b0)]=Sprite_Enemy[_0x54b1a4(0x375)]['updateCollapse'],Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x66f)]=function(){const _0x9d5bb9=_0x54b1a4;if(this[_0x9d5bb9(0x2e4)]())VisuMZ[_0x9d5bb9(0x387)][_0x9d5bb9(0x5b0)][_0x9d5bb9(0xd6c)](this);},Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xb34)]=function(){const _0x56fbf5=_0x54b1a4;Sprite_Battler[_0x56fbf5(0x375)][_0x56fbf5(0xb34)][_0x56fbf5(0xd6c)](this);const _0x51142d=this[_0x56fbf5(0x5ee)]()||this;if(!_0x51142d)return;!_0x51142d[_0x56fbf5(0x65b)]&&(_0x56fbf5(0xb27)!=='eRKrS'?this[_0x56fbf5(0x676)](_0x56fbf5(0x3c3)):_0x51142d['bitmap']=new Bitmap(this['width'],this[_0x56fbf5(0xdd7)]));if(this[_0x56fbf5(0x4c0)]===_0x56fbf5(0x43f)){if(_0x56fbf5(0xb1f)===_0x56fbf5(0xb1f))this['_mainSprite'][_0x56fbf5(0x96a)](0x0,0x0,this[_0x56fbf5(0x4cb)][_0x56fbf5(0x495)],this['_effectDuration']);else return _0x511eeb[_0x56fbf5(0xd53)];}else{if(_0x56fbf5(0x591)!==_0x56fbf5(0x591)){_0x51008f[_0x56fbf5(0x375)][_0x56fbf5(0x643)][_0x56fbf5(0xd6c)](this,_0x46a1c7),_0x2fe142[_0x56fbf5(0x643)](this['enemy']()),_0x263b61[_0x56fbf5(0x643)](this['enemy']());if(!this[_0x56fbf5(0x717)]())return;if(this[_0x56fbf5(0x7fe)]()){const _0x521787=_0x449a35[_0x56fbf5(0xc22)][_0x56fbf5(0x2d5)];this[_0x56fbf5(0x717)]()[_0x56fbf5(0xa2c)]()?_0x521787[_0x56fbf5(0x643)](this[_0x56fbf5(0x717)]()[_0x56fbf5(0x58f)]()):_0x521787[_0x56fbf5(0x23a)]();}}else _0x51142d[_0x56fbf5(0x96a)](0x0,0x0,_0x51142d['bitmap'][_0x56fbf5(0x495)],this[_0x56fbf5(0x65b)][_0x56fbf5(0xdd7)]);}},VisuMZ[_0x54b1a4(0x387)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x7f6)],Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x7f6)]=function(){const _0x1c16fe=_0x54b1a4;if(this['allowCollapse']())VisuMZ['BattleCore'][_0x1c16fe(0x95d)][_0x1c16fe(0xd6c)](this);},Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x40e)]=function(){const _0x1d1704=_0x54b1a4;return Sprite_Battler[_0x1d1704(0x375)][_0x1d1704(0x40e)][_0x1d1704(0xd6c)](this);},VisuMZ['BattleCore'][_0x54b1a4(0xa76)]=Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x516)],Sprite_Enemy[_0x54b1a4(0x375)]['updateStateSprite']=function(){const _0x1fee0d=_0x54b1a4;VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite'][_0x1fee0d(0xd6c)](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy[_0x54b1a4(0x375)]['updateStateSpriteBattleCore']=function(){const _0x57e4d1=_0x54b1a4,_0x7df668=VisuMZ[_0x57e4d1(0x387)]['Settings'][_0x57e4d1(0x809)];if(_0x7df668[_0x57e4d1(0x54e)]&&!_0x7df668['NameLegacy']){this[_0x57e4d1(0xd1e)][_0x57e4d1(0x9e2)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x57e4d1(0xd1e)]['x']+=this[_0x57e4d1(0xb7d)]['battleUIOffsetX'](),this[_0x57e4d1(0xd1e)]['y']=-this[_0x57e4d1(0x65b)][_0x57e4d1(0xdd7)]-this['_stateIconSprite']['height']-0x4,this[_0x57e4d1(0xd1e)]['y']+=this[_0x57e4d1(0xb7d)][_0x57e4d1(0x673)](),this[_0x57e4d1(0xd1e)][_0x57e4d1(0xbcd)]['x']=0x1/(this[_0x57e4d1(0xbcd)]['x']||0.001),this[_0x57e4d1(0xd1e)]['scale']['y']=0x1/(this[_0x57e4d1(0xbcd)]['y']||0.001),this[_0x57e4d1(0xb3b)]()&&(this[_0x57e4d1(0xbb1)][_0x57e4d1(0x7cd)][_0x57e4d1(0xbcd)]['x']=-0x1/(this[_0x57e4d1(0xbcd)]['x']||0.001),this[_0x57e4d1(0xbb1)][_0x57e4d1(0x7cd)][_0x57e4d1(0xbcd)]['y']=0x1/(this['scale']['y']||0.001));},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x8e5)]=Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xc0f)],Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xc0f)]=function(_0x244e27){const _0x5de67a=_0x54b1a4;VisuMZ['BattleCore'][_0x5de67a(0x8e5)][_0x5de67a(0xd6c)](this,_0x244e27),this[_0x5de67a(0x9b6)](_0x244e27);},Sprite_Enemy['prototype'][_0x54b1a4(0x9b6)]=function(_0x21ed04){const _0x4f2b17=_0x54b1a4;!this[_0x4f2b17(0xbb1)]&&(this[_0x4f2b17(0xbb1)]=new Sprite_SvEnemy(_0x21ed04),this[_0x4f2b17(0x3fa)]()),this[_0x4f2b17(0xbb1)][_0x4f2b17(0xc0f)](_0x21ed04);},Sprite_Enemy['prototype']['hasSvBattler']=function(){const _0x1e0664=_0x54b1a4;return this[_0x1e0664(0xb69)]&&this[_0x1e0664(0xb69)][_0x1e0664(0xb3b)]();},Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x2e4)]=function(){const _0x1447fc=_0x54b1a4;return this[_0x1447fc(0xb3b)]()?this[_0x1447fc(0xb69)][_0x1447fc(0x2e4)]():!![];},Sprite_Enemy['prototype'][_0x54b1a4(0x671)]=function(){const _0x95b329=_0x54b1a4;this[_0x95b329(0xb3b)]()&&this['_svBattlerSprite'][_0x95b329(0x671)]();},Sprite_Enemy[_0x54b1a4(0x375)]['forceMotion']=function(_0x5bc1dc){const _0x2c53bb=_0x54b1a4;if(this['hasSvBattler']())this['_svBattlerSprite'][_0x2c53bb(0x565)](_0x5bc1dc);},Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0x90e)]=function(_0x464187){const _0x38aadd=_0x54b1a4;if(this[_0x38aadd(0xb3b)]())this[_0x38aadd(0xbb1)][_0x38aadd(0x90e)](_0x464187);},Sprite_Enemy[_0x54b1a4(0x375)][_0x54b1a4(0xadb)]=function(){const _0x10a416=_0x54b1a4,_0x42c993=VisuMZ[_0x10a416(0x387)][_0x10a416(0x916)][_0x10a416(0x493)],_0x541372=_0x42c993[_0x10a416(0x810)],_0x44cd01=_0x42c993[_0x10a416(0xad6)],_0x5e30b3=_0x42c993[_0x10a416(0x2d6)];this[_0x10a416(0x835)](_0x541372,_0x44cd01,_0x5e30b3);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x54b1a4(0x7d5)](Sprite_Actor[_0x54b1a4(0x375)]),Sprite_SvEnemy[_0x54b1a4(0x375)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)]=function(_0x1cb048){const _0x5776ee=_0x54b1a4;Sprite_Actor[_0x5776ee(0x375)][_0x5776ee(0xbc1)][_0x5776ee(0xd6c)](this,_0x1cb048),this[_0x5776ee(0xbcd)]['x']=-0x1,this['_stateSprite'][_0x5776ee(0xbcd)]['x']=-0x1;},Sprite_SvEnemy[_0x54b1a4(0x375)]['createShadowSprite']=function(){},Sprite_SvEnemy[_0x54b1a4(0x375)][_0x54b1a4(0xb50)]=function(){},Sprite_SvEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x9b5)]=function(_0x1cae64){},Sprite_SvEnemy['prototype']['updateShadow']=function(){},Sprite_SvEnemy[_0x54b1a4(0x375)]['updateShadowPosition']=function(){},Sprite_SvEnemy['prototype']['updateStateSprite']=function(){const _0x224f38=_0x54b1a4;this[_0x224f38(0x7cd)][_0x224f38(0x739)]=![];},Sprite_SvEnemy[_0x54b1a4(0x375)][_0x54b1a4(0xd2e)]=function(){const _0x15c29a=_0x54b1a4;Sprite_Battler[_0x15c29a(0x375)][_0x15c29a(0xd2e)][_0x15c29a(0xd6c)](this);const _0x45c490=this[_0x15c29a(0x2f3)][_0x15c29a(0x925)]();this['_battlerName']!==_0x45c490&&(this[_0x15c29a(0x995)]=_0x45c490,this[_0x15c29a(0x4cb)][_0x15c29a(0x65b)]=ImageManager[_0x15c29a(0x270)](_0x45c490));if(this['_mainSprite']&&this[_0x15c29a(0x4cb)][_0x15c29a(0x65b)]&&this[_0x15c29a(0xb7d)]){if(_0x15c29a(0xd4e)!==_0x15c29a(0xd4e)){const _0x479b5f=this[_0x15c29a(0x836)]();if(!_0x479b5f)return null;if(_0x479b5f[_0x15c29a(0x396)]()&&_0x479b5f[_0x15c29a(0x6a2)]())return _0x479b5f;}else this[_0x15c29a(0x4cb)]['bitmap'][_0x15c29a(0xd41)]!==this[_0x15c29a(0xb7d)][_0x15c29a(0x8d5)]()&&(this['_mainSprite'][_0x15c29a(0x65b)][_0x15c29a(0xd41)]=this[_0x15c29a(0xb7d)]['battlerSmoothImage']());}},Sprite_SvEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x6c6)]=function(){},Sprite_SvEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x835)]=function(_0x479cc4,_0x2de9ac,_0x32dd40){const _0x52bb09=_0x54b1a4;if(this['parent'])this[_0x52bb09(0x7bd)][_0x52bb09(0x835)](_0x479cc4,_0x2de9ac,_0x32dd40);},Sprite_SvEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x671)]=function(){const _0x131885=_0x54b1a4,_0x54861b=this[_0x131885(0x2f3)];if(_0x54861b){const _0xa0b889=_0x54861b[_0x131885(0xb35)]();if(_0x54861b['isInputting']()||_0x54861b['isActing']())_0x131885(0x21a)===_0x131885(0x21a)?this[_0x131885(0x79b)](_0x131885(0x572)):(_0x54b20c=_0x50eb0e+_0x46d610[_0x131885(0xa59)]/0x2-0x4,_0x305d44=_0x2fe57e-_0x3b5856[_0x131885(0x485)]/0x2);else{if(_0xa0b889===0x3)this[_0x131885(0x79b)](_0x131885(0x904));else{if(_0xa0b889===0x2)this[_0x131885(0x79b)](_0x131885(0x5d3));else{if(_0x54861b[_0x131885(0x4ac)]())this[_0x131885(0x79b)](_0x131885(0xc9e));else{if(_0x54861b[_0x131885(0xc83)]()||_0x54861b[_0x131885(0xd51)]()){if(_0x131885(0x7dc)===_0x131885(0x871))return _0x1f6157[_0x4b7a5b];else this['startMotion'](_0x131885(0x890));}else{if(_0xa0b889===0x1)this[_0x131885(0x79b)](_0x131885(0xab1));else{if(_0x54861b['isDying']()){if(_0x131885(0x819)!==_0x131885(0xc1d))this[_0x131885(0x79b)]('dying');else return _0x2109d5(_0x55e6f1['$1'])*0.01;}else{if(_0x54861b[_0x131885(0x710)]()){if(_0x131885(0xcf7)!=='GYTBA')this[_0x131885(0x79b)](_0x131885(0x572));else{const _0x4025fc=_0x56497b[_0x131885(0xc22)][_0x131885(0x2d5)];_0x4025fc[_0x131885(0x5e6)](),_0x4025fc['setEnemyWindowMode'](![]),_0x4025fc['deselect']();const _0x3902d0=_0x3f0ade[_0x131885(0xc22)][_0x131885(0x89f)];_0x3902d0[_0x131885(0xbcd)]['y']=0x1;}}else{if(_0x131885(0x8f6)!==_0x131885(0x8f6))return _0x4e79b7[_0x131885(0xa3e)](_0x131885(0xa70));else this[_0x131885(0x79b)](_0x54861b[_0x131885(0xc0a)]()[_0x131885(0xad2)]||_0x131885(0x572));}}}}}}}}}},Sprite_SvEnemy['prototype'][_0x54b1a4(0x82f)]=function(){const _0x4a638f=_0x54b1a4;if(this[_0x4a638f(0x7bd)]){if(_0x4a638f(0x2f5)===_0x4a638f(0x2f5))return this[_0x4a638f(0x7bd)][_0x4a638f(0x93b)]===0x0&&this[_0x4a638f(0x7bd)]['_offsetY']===0x0;else this[_0x4a638f(0xa04)]();}else return!![];},Sprite_SvEnemy[_0x54b1a4(0x375)][_0x54b1a4(0xbba)]=function(){},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xd87)]=Sprite_Animation[_0x54b1a4(0x375)][_0x54b1a4(0xc4c)],Sprite_Animation[_0x54b1a4(0x375)][_0x54b1a4(0xc4c)]=function(_0x3aab67){const _0x37b9d4=_0x54b1a4;if(_0x3aab67[_0x37b9d4(0x267)]){if(_0x37b9d4(0x598)!==_0x37b9d4(0x692))return this[_0x37b9d4(0x827)](_0x3aab67);else this[_0x37b9d4(0x9e2)]=(this[_0x37b9d4(0x9e2)]*(_0x325478-0x1)+this[_0x37b9d4(0x5d8)])/_0x1808c9;}else return VisuMZ['BattleCore']['Sprite_Animation_targetSpritePosition'][_0x37b9d4(0xd6c)](this,_0x3aab67);},Sprite_Animation['prototype'][_0x54b1a4(0x827)]=function(_0x14b4fe){const _0x53493d=_0x54b1a4;let _0x3da8c8=_0x14b4fe['x'],_0x428793=_0x14b4fe['y'],_0x5cfa5a=_0x14b4fe[_0x53493d(0xdd7)],_0x27c793=_0x14b4fe[_0x53493d(0x267)][_0x53493d(0xbcd)]['y'];_0x14b4fe['x']=_0x14b4fe[_0x53493d(0xc43)]+_0x14b4fe[_0x53493d(0xb24)](),_0x14b4fe['y']=_0x14b4fe[_0x53493d(0xb10)]+_0x14b4fe[_0x53493d(0x221)](),_0x14b4fe['height']*=_0x27c793;let _0x177dc8=VisuMZ[_0x53493d(0x387)][_0x53493d(0xd87)]['call'](this,_0x14b4fe);return _0x14b4fe['x']=_0x3da8c8,_0x14b4fe['y']=_0x428793,_0x14b4fe[_0x53493d(0xdd7)]=_0x5cfa5a,_0x177dc8;},VisuMZ[_0x54b1a4(0x387)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0x54b1a4(0x375)][_0x54b1a4(0x37e)],Sprite_AnimationMV[_0x54b1a4(0x375)][_0x54b1a4(0x37e)]=function(){const _0x26f836=_0x54b1a4;VisuMZ[_0x26f836(0x387)][_0x26f836(0x36d)][_0x26f836(0xd6c)](this);if(!SceneManager[_0x26f836(0xbbd)]())return;if(this[_0x26f836(0x7af)][_0x26f836(0x494)]===0x3){if('KHyiI'===_0x26f836(0xa1c))this['x']=Math['round'](Graphics[_0x26f836(0xb36)]/0x2),this['y']=Math[_0x26f836(0x68d)](Graphics[_0x26f836(0x67b)]/0x2);else return;}else{if(_0x26f836(0x311)!==_0x26f836(0x311)){const _0x100b9d=this[_0x26f836(0x6a2)](),_0x163d70=this['stateMotionIndex']();_0xd25081[_0x26f836(0x387)][_0x26f836(0xa8f)]['call'](this,_0x5da35c),this['isEnemy']()&&_0x100b9d&&this[_0x26f836(0x5b2)]()&&(this[_0x26f836(0xd78)]=!this[_0x26f836(0x3bf)](),_0x12a073[_0x26f836(0x705)](this['enemyId']())),_0x14a430[_0x26f836(0xbbd)]()&&_0x163d70!==this['stateMotionIndex']()&&(this[_0x26f836(0x887)]()&&this[_0x26f836(0x887)]()['refreshMotion']());}else{if(this[_0x26f836(0x84c)])return;}}},Sprite_Damage[_0x54b1a4(0x375)][_0x54b1a4(0xc16)]=function(_0x1b40eb){const _0x5b0242=_0x54b1a4,_0x31c711=_0x1b40eb[_0x5b0242(0xb63)]()||_0x1b40eb[_0x5b0242(0xb45)]();if(_0x31c711[_0x5b0242(0x4ad)]||_0x31c711[_0x5b0242(0x6cd)]){if(_0x5b0242(0x3e6)!==_0x5b0242(0x831))this[_0x5b0242(0x4aa)]=0x0,this['createMiss']();else{const _0x2d2896=_0x51a0a0(_0x2ba1fa['$1']);return _0x3c08cd[_0x5b0242(0x6a6)]()['filter'](_0x17af32=>_0x17af32[_0x5b0242(0x313)]()===_0x2d2896);}}else{if(_0x31c711[_0x5b0242(0x77a)])_0x5b0242(0x97d)!=='XTVIy'?(_0x2ec7ad[_0x5b0242(0x387)][_0x5b0242(0x31f)][_0x5b0242(0xd6c)](this),this[_0x5b0242(0x65b)]&&(this[_0x5b0242(0x65b)][_0x5b0242(0xd41)]=_0x4b11f5[_0x5b0242(0x387)][_0x5b0242(0x916)]['Actor']['SmoothImage'])):(this[_0x5b0242(0x4aa)]=_0x31c711['hpDamage']>=0x0?0x0:0x1,this['createDigits'](_0x31c711[_0x5b0242(0x5be)]));else _0x1b40eb[_0x5b0242(0x6a2)]()&&_0x31c711[_0x5b0242(0x6e2)]!==0x0&&(this['_colorType']=_0x31c711[_0x5b0242(0x6e2)]>=0x0?0x2:0x3,this['createDigits'](_0x31c711[_0x5b0242(0x6e2)]));}_0x31c711['critical']&&this['setupCriticalEffect']();},Sprite_Damage[_0x54b1a4(0x375)][_0x54b1a4(0x915)]=function(_0x46633c){},Sprite_Damage[_0x54b1a4(0x375)][_0x54b1a4(0x766)]=function(_0x30f0e9){const _0x578b42=_0x54b1a4;let _0xc9b069=this[_0x578b42(0x2b3)](_0x30f0e9);const _0xf5b417=this[_0x578b42(0xa48)](),_0x53d15a=Math[_0x578b42(0x8a3)](_0xf5b417*0.75);for(let _0x66d235=0x0;_0x66d235<_0xc9b069[_0x578b42(0x69d)];_0x66d235++){if(_0x578b42(0x231)==='NYLFZ')return this['_distortionSprite']||this[_0x578b42(0x4cb)]||this;else{const _0x34b8e5=this[_0x578b42(0x5c3)](_0x53d15a,_0xf5b417);_0x34b8e5['bitmap'][_0x578b42(0x733)](_0xc9b069[_0x66d235],0x0,0x0,_0x53d15a,_0xf5b417,_0x578b42(0x8b9)),_0x34b8e5['x']=(_0x66d235-(_0xc9b069[_0x578b42(0x69d)]-0x1)/0x2)*_0x53d15a,_0x34b8e5['dy']=-_0x66d235;}}},Sprite_Damage['prototype'][_0x54b1a4(0x2b3)]=function(_0x48465a){const _0x6ad65f=_0x54b1a4;let _0xa2e72f=Math['abs'](_0x48465a)[_0x6ad65f(0x21c)]();this['useDigitGrouping']()&&(_0x6ad65f(0x2a3)!==_0x6ad65f(0x2a3)?(this['x']=_0x3afced[_0x6ad65f(0x68d)](_0x466741[_0x6ad65f(0xb36)]/0x2),this['y']=_0x2c8bbc['round'](_0x1f36d1[_0x6ad65f(0x67b)]/0x2)):_0xa2e72f=VisuMZ[_0x6ad65f(0xd5e)](_0xa2e72f));const _0x1de1e1=VisuMZ[_0x6ad65f(0x387)][_0x6ad65f(0x916)]['Damage'];let _0x5c287f='',_0x24c6b2='';switch(this[_0x6ad65f(0x4aa)]){case 0x0:_0x5c287f=_0x1de1e1[_0x6ad65f(0x3e8)]||_0x6ad65f(0x45c),_0x24c6b2=TextManager['hp'];if(_0x48465a===0x0)_0x5c287f='%1';break;case 0x1:_0x5c287f=_0x1de1e1[_0x6ad65f(0x5a9)]||_0x6ad65f(0x235),_0x24c6b2=TextManager['hp'];break;case 0x2:_0x5c287f=_0x1de1e1[_0x6ad65f(0xa46)]||_0x6ad65f(0x2dd),_0x24c6b2=TextManager['mp'];break;case 0x3:_0x5c287f=_0x1de1e1[_0x6ad65f(0x8ae)]||'+%1\x20MP',_0x24c6b2=TextManager['mp'];break;}return _0x5c287f[_0x6ad65f(0xd76)](_0xa2e72f,_0x24c6b2)[_0x6ad65f(0x2f4)]();},Sprite_Damage[_0x54b1a4(0x375)][_0x54b1a4(0x7e5)]=function(){const _0x3c09f8=_0x54b1a4;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x3c09f8(0x82d)][_0x3c09f8(0x916)][_0x3c09f8(0x788)][_0x3c09f8(0x38a)]:![];},Sprite_Damage[_0x54b1a4(0x375)][_0x54b1a4(0xbf6)]=function(){const _0x147fb6=_0x54b1a4,_0xbffe98=VisuMZ['BattleCore'][_0x147fb6(0x916)]['Damage'];this[_0x147fb6(0xd8a)]=_0xbffe98[_0x147fb6(0x307)][_0x147fb6(0xc27)](0x0),this[_0x147fb6(0x55f)]=_0xbffe98[_0x147fb6(0xc68)];},Sprite_Damage[_0x54b1a4(0x375)][_0x54b1a4(0x703)]=function(_0x2f8f70,_0xba1d3){const _0x41d4d1=_0x54b1a4;this[_0x41d4d1(0xd8a)]=_0xba1d3['flashColor']||[0x0,0x0,0x0,0x0],this[_0x41d4d1(0xd8a)]=JsonEx['makeDeepCopy'](this[_0x41d4d1(0xd8a)]),this['_flashDuration']=_0xba1d3[_0x41d4d1(0x27b)]||0x0;const _0x2b158a=this[_0x41d4d1(0xa48)](),_0x5cf1fc=Math[_0x41d4d1(0x8a3)](_0x2b158a*0x1e),_0x3324f5=this['createChildSprite'](_0x5cf1fc,_0x2b158a);_0x3324f5[_0x41d4d1(0x65b)][_0x41d4d1(0xa28)]=ColorManager[_0x41d4d1(0xcc3)](_0xba1d3[_0x41d4d1(0xa28)]),_0x3324f5[_0x41d4d1(0x65b)][_0x41d4d1(0x733)](_0x2f8f70,0x0,0x0,_0x5cf1fc,_0x2b158a,_0x41d4d1(0x8b9)),_0x3324f5['dy']=0x0;},Sprite_Damage[_0x54b1a4(0x375)][_0x54b1a4(0x4c2)]=function(_0x4bfdc9,_0x3466d2,_0x110b59){const _0x3a4ed0=_0x54b1a4,_0x21d892=Math[_0x3a4ed0(0x9db)](this[_0x3a4ed0(0xa48)](),ImageManager[_0x3a4ed0(0x485)]),_0x21f283=Math['floor'](_0x21d892*0x1e),_0x31be82=this['createChildSprite'](_0x21f283,_0x21d892),_0x2199d6=ImageManager[_0x3a4ed0(0xa59)]/0x2,_0x41ee8c=_0x31be82['bitmap'][_0x3a4ed0(0x4d8)](_0x3466d2+'\x20');_0x31be82[_0x3a4ed0(0x65b)][_0x3a4ed0(0xa28)]=ColorManager[_0x3a4ed0(0xcc3)](_0x110b59['textColor']),_0x31be82[_0x3a4ed0(0x65b)][_0x3a4ed0(0x733)](_0x3466d2,_0x2199d6,0x0,_0x21f283-_0x2199d6,_0x21d892,'center');const _0x3eb1fe=Math[_0x3a4ed0(0x68d)]((_0x21d892-ImageManager[_0x3a4ed0(0x485)])/0x2),_0x46eda6=_0x21f283/0x2-ImageManager[_0x3a4ed0(0xa59)]-_0x41ee8c/0x2+_0x2199d6/0x2,_0x5a7738=ImageManager[_0x3a4ed0(0x715)](_0x3a4ed0(0xd65)),_0x18379e=ImageManager['iconWidth'],_0x2b8ae1=ImageManager[_0x3a4ed0(0x485)],_0x5923c6=_0x4bfdc9%0x10*_0x18379e,_0x4b2838=Math['floor'](_0x4bfdc9/0x10)*_0x2b8ae1;_0x31be82['bitmap'][_0x3a4ed0(0x3fd)](_0x5a7738,_0x5923c6,_0x4b2838,_0x18379e,_0x2b8ae1,_0x46eda6,_0x3eb1fe),this[_0x3a4ed0(0xd8a)]=_0x110b59[_0x3a4ed0(0x8d3)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x3a4ed0(0x9c2)](this[_0x3a4ed0(0xd8a)]),this[_0x3a4ed0(0x55f)]=_0x110b59[_0x3a4ed0(0x27b)]||0x0,_0x31be82['dy']=0x0;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x578)]=Sprite_Damage[_0x54b1a4(0x375)]['createChildSprite'],Sprite_Damage[_0x54b1a4(0x375)]['createChildSprite']=function(_0xc7b4f4,_0x54d52a){const _0x6bf98c=_0x54b1a4;return _0x54d52a=Math[_0x6bf98c(0x68d)](_0x54d52a*1.2),VisuMZ['BattleCore'][_0x6bf98c(0x578)]['call'](this,_0xc7b4f4,_0x54d52a);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xa14)]=Sprite_StateIcon[_0x54b1a4(0x375)][_0x54b1a4(0xb34)],Sprite_StateIcon[_0x54b1a4(0x375)][_0x54b1a4(0xb34)]=function(){const _0xda025c=_0x54b1a4;VisuMZ[_0xda025c(0x387)][_0xda025c(0xa14)][_0xda025c(0xd6c)](this),this[_0xda025c(0x9e2)]=this[_0xda025c(0xd3e)]>0x0?0xff:0x0;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x31f)]=Sprite_Weapon[_0x54b1a4(0x375)][_0x54b1a4(0xa95)],Sprite_Weapon['prototype'][_0x54b1a4(0xa95)]=function(){const _0x3d0347=_0x54b1a4;VisuMZ[_0x3d0347(0x387)]['Sprite_Weapon_loadBitmap'][_0x3d0347(0xd6c)](this),this[_0x3d0347(0x65b)]&&(this[_0x3d0347(0x65b)]['smooth']=VisuMZ['BattleCore'][_0x3d0347(0x916)][_0x3d0347(0x2c1)][_0x3d0347(0x393)]);},VisuMZ['BattleCore']['Sprite_Gauge_smoothness']=Sprite_Gauge[_0x54b1a4(0x375)][_0x54b1a4(0x2b4)],Sprite_Gauge[_0x54b1a4(0x375)][_0x54b1a4(0x2b4)]=function(){const _0x445a59=_0x54b1a4;return this[_0x445a59(0x867)]!==_0x445a59(0x7c7)?VisuMZ[_0x445a59(0x387)][_0x445a59(0x916)][_0x445a59(0x60e)][_0x445a59(0xb23)]??0x14:VisuMZ['BattleCore']['Sprite_Gauge_smoothness'][_0x445a59(0xd6c)](this);};function Sprite_HpGauge(){const _0x11ed52=_0x54b1a4;this[_0x11ed52(0xbc1)](...arguments);}Sprite_HpGauge[_0x54b1a4(0x375)]=Object[_0x54b1a4(0x7d5)](Sprite_Gauge[_0x54b1a4(0x375)]),Sprite_HpGauge[_0x54b1a4(0x375)][_0x54b1a4(0x3ac)]=Sprite_HpGauge,Sprite_HpGauge[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)]=function(){const _0x361dc3=_0x54b1a4;Sprite_Gauge[_0x361dc3(0x375)][_0x361dc3(0xbc1)][_0x361dc3(0xd6c)](this);},Sprite_HpGauge[_0x54b1a4(0x375)][_0x54b1a4(0xa0c)]=function(){return 0x0;},Sprite_HpGauge[_0x54b1a4(0x375)][_0x54b1a4(0x3be)]=function(){const _0x3e0d24=_0x54b1a4;this['bitmap'][_0x3e0d24(0x207)]();const _0x522680=this[_0x3e0d24(0x60a)]();!isNaN(_0x522680)&&this[_0x3e0d24(0x830)]();};function Sprite_EnemyName(){const _0x13768d=_0x54b1a4;this[_0x13768d(0xbc1)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x54b1a4(0x7d5)](Sprite_Name[_0x54b1a4(0x375)]),Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x3ac)]=Sprite_EnemyName,Sprite_EnemyName[_0x54b1a4(0x375)]['initialize']=function(){const _0x271f60=_0x54b1a4;Sprite_Name[_0x271f60(0x375)][_0x271f60(0xbc1)][_0x271f60(0xd6c)](this),this[_0x271f60(0x447)]();},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x900)]=function(){const _0x56302a=_0x54b1a4;Sprite_Name['prototype']['initMembers'][_0x56302a(0xd6c)](this),this[_0x56302a(0x9e2)]=0x0,this['_linkedSprite']=null,this[_0x56302a(0x749)]['x']=0.5,this[_0x56302a(0x749)]['y']=0x0;},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x447)]=function(){const _0x25d3b7=_0x54b1a4;VisuMZ[_0x25d3b7(0x387)]['Settings'][_0x25d3b7(0x809)][_0x25d3b7(0x54e)]&&('rltWk'!==_0x25d3b7(0x723)?_0x49e300+=_0x37b843:(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x25d3b7(0x6a8)](this[_0x25d3b7(0xd1e)])));},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x515)]=function(){const _0x12c956=_0x54b1a4;return Graphics[_0x12c956(0xb36)];},Sprite_EnemyName['prototype'][_0x54b1a4(0xa96)]=function(){const _0x4e7462=_0x54b1a4;return this[_0x4e7462(0x5e3)]=this[_0x4e7462(0x5e3)]||Window_Base['prototype']['lineHeight']()||0x24,this[_0x4e7462(0x5e3)]*0x4;},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0xa48)]=function(){const _0x222ae0=_0x54b1a4;return VisuMZ[_0x222ae0(0x387)][_0x222ae0(0x916)][_0x222ae0(0x809)][_0x222ae0(0xba8)]||$gameSystem[_0x222ae0(0x2bb)]();},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0xc5d)]=function(_0x13c6fd){const _0x3b0f23=_0x54b1a4;this[_0x3b0f23(0x41b)]=_0x13c6fd;},Sprite_EnemyName['prototype'][_0x54b1a4(0x879)]=function(){const _0x2a6f35=_0x54b1a4;Sprite_Name[_0x2a6f35(0x375)][_0x2a6f35(0x879)][_0x2a6f35(0xd6c)](this),this['updateLink'](),this[_0x2a6f35(0x37e)](),this['updateAttachedSprites'](),this['updateOpacity']();},Sprite_EnemyName[_0x54b1a4(0x375)]['redraw']=function(){const _0x44d054=_0x54b1a4;this['_cacheTextWidth']=undefined;const _0x587f9f=this['name'](),_0xf0a2f7=this[_0x44d054(0x515)](),_0x150b66=Window_Base[_0x44d054(0x375)][_0x44d054(0xd04)]();this[_0x44d054(0x6f9)](),this['bitmap'][_0x44d054(0x207)](),this[_0x44d054(0x65b)][_0x44d054(0x733)](_0x587f9f,0x0,0x0,_0xf0a2f7,_0x150b66,_0x44d054(0x8b9));},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x763)]=function(){const _0xc0bb26=_0x54b1a4;if(!this[_0xc0bb26(0x41b)])return;this[_0xc0bb26(0xb7d)]!==this[_0xc0bb26(0x41b)][_0xc0bb26(0xb7d)]&&(_0xc0bb26(0x87e)===_0xc0bb26(0x87e)?this['setup'](this[_0xc0bb26(0x41b)][_0xc0bb26(0xb7d)]):_0xb22cfa--);},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x37e)]=function(){const _0x16906f=_0x54b1a4;if(!this[_0x16906f(0x41b)])return;this[_0x16906f(0x5e3)]=this[_0x16906f(0x5e3)]||Window_Base[_0x16906f(0x375)][_0x16906f(0xd04)](),this['x']=Math[_0x16906f(0x68d)](this[_0x16906f(0x41b)][_0x16906f(0xc43)]),this['y']=Math[_0x16906f(0x68d)](this[_0x16906f(0x41b)][_0x16906f(0xb10)]-this[_0x16906f(0x5e3)]*0.5);const _0x5c83d5=VisuMZ[_0x16906f(0x387)][_0x16906f(0x916)]['Enemy'];this['x']+=Math[_0x16906f(0x68d)](_0x5c83d5['NameOffsetX']||0x0),this['y']+=Math[_0x16906f(0x68d)](_0x5c83d5[_0x16906f(0x5a5)]||0x0);},Sprite_EnemyName['prototype'][_0x54b1a4(0x903)]=function(){const _0x59839a=_0x54b1a4;this[_0x59839a(0xd63)]();},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0xd63)]=function(){const _0x287bae=_0x54b1a4;if(!this[_0x287bae(0xd1e)])return;this[_0x287bae(0xb7d)]!==this[_0x287bae(0xd1e)][_0x287bae(0xb7d)]&&this[_0x287bae(0xd1e)][_0x287bae(0x915)](this[_0x287bae(0xb7d)]);const _0x254e47=this[_0x287bae(0x694)]();this['_lineHeight']=this[_0x287bae(0x5e3)]||Window_Base[_0x287bae(0x375)][_0x287bae(0xd04)](),this[_0x287bae(0xd1e)]['x']=Math[_0x287bae(0x68d)]((_0x254e47+ImageManager[_0x287bae(0xa59)])/0x2)+0x8,this[_0x287bae(0xd1e)]['y']=this[_0x287bae(0x5e3)]/0x2;const _0x32a11b=VisuMZ[_0x287bae(0x387)][_0x287bae(0x916)]['Enemy'];this[_0x287bae(0xd1e)]['x']+=_0x32a11b[_0x287bae(0xc6c)]||0x0,this['_stateIconSprite']['y']+=_0x32a11b[_0x287bae(0x629)]||0x0;},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x791)]=function(){const _0xe3851e=_0x54b1a4,_0xe9cf67=this['visibilityState']();if(_0xe9cf67&&this[_0xe3851e(0x9e2)]<0xff){if(_0xe3851e(0x84d)===_0xe3851e(0x4fa)){if(!_0x3fef86[_0xe3851e(0xbbd)]())return;if(!_0x1c8980[_0xe3851e(0x81b)])return;const _0x1874ed=_0x55616e[_0xe3851e(0x859)]();if(!_0x1874ed)return;_0x1874ed[_0xe3851e(0xc6a)](_0xe3851e(0x2c0));}else this['opacity']+=0x10;}else!_0xe9cf67&&this[_0xe3851e(0x9e2)]>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName[_0x54b1a4(0x375)]['visibilityState']=function(){const _0x12d481=_0x54b1a4;if(this['isAlwaysHidden']()){if(_0x12d481(0xa6a)!==_0x12d481(0xa6a)){const _0xabade=this[_0x12d481(0x8a1)];_0xabade[_0x12d481(0xc4e)][_0x12d481(0x207)]();const _0x7609c6=this[_0x12d481(0x92f)](this[_0x12d481(0x58f)]());if(_0x7609c6===_0x12d481(0x256)&&this[_0x12d481(0xa6e)]()>0x0){const _0x4a79e6=this['itemLineRect'](this['index']());let _0x6bf99c=this[_0x12d481(0xa51)](this[_0x12d481(0x58f)]());_0x6bf99c=_0x6bf99c[_0x12d481(0x68b)](/\\I\[(\d+)\]/gi,''),_0xabade[_0x12d481(0x213)](),this['commandNameWindowDrawBackground'](_0x6bf99c,_0x4a79e6),this[_0x12d481(0xc26)](_0x6bf99c,_0x4a79e6),this['commandNameWindowCenter'](_0x6bf99c,_0x4a79e6);}}else return![];}else{if(!this[_0x12d481(0xb7d)])return'XDisa'===_0x12d481(0x448)?_0x22526b[_0x12d481(0x387)][_0x12d481(0x916)][_0x12d481(0x60e)]['AniDuration']??0x14:![];else{if(this[_0x12d481(0xb7d)][_0x12d481(0x5b2)]())return![];else{if(!this[_0x12d481(0xb7d)][_0x12d481(0x9f2)]())return![];else{if(this[_0x12d481(0xa4a)]()){if(_0x12d481(0xc7d)!=='LGZfx')return!![];else _0x2af05b['portraitFlipHorz']=!_0x7655e6[_0x12d481(0x3f3)];}else{if(this[_0x12d481(0xacc)]())return!![];else{if(this[_0x12d481(0x2ac)]())return!![];else{if(this['opacity']>0x0){if('RRAFv'!==_0x12d481(0x280))_0x4e9947['BattleCore'][_0x12d481(0x3f0)]['call'](this),_0x282b78['clearForcedGameTroopSettingsBattleCore']();else return![];}}}}}}}}},Sprite_EnemyName[_0x54b1a4(0x375)]['isAlwaysHidden']=function(){const _0x4711ec=_0x54b1a4;return VisuMZ[_0x4711ec(0x387)][_0x4711ec(0x916)]['Enemy'][_0x4711ec(0xd00)];},Sprite_EnemyName['prototype'][_0x54b1a4(0xa4a)]=function(){return![];},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0xacc)]=function(){const _0x509148=_0x54b1a4;return VisuMZ[_0x509148(0x387)][_0x509148(0x916)][_0x509148(0x809)]['NameAlwaysVisible'];},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x2ac)]=function(){const _0x3e6b76=_0x54b1a4;return VisuMZ[_0x3e6b76(0x387)][_0x3e6b76(0x916)][_0x3e6b76(0x809)][_0x3e6b76(0x70b)]?_0x3e6b76(0x370)!==_0x3e6b76(0x370)?_0x1ed686(_0x92580a['$1']):this[_0x3e6b76(0xb7d)][_0x3e6b76(0x450)]():SceneManager['_scene'][_0x3e6b76(0x8c2)]&&SceneManager[_0x3e6b76(0xc22)][_0x3e6b76(0x8c2)][_0x3e6b76(0xaae)]&&SceneManager[_0x3e6b76(0xc22)][_0x3e6b76(0x8c2)][_0x3e6b76(0xa4d)][_0x3e6b76(0xd4a)](this['_battler']);},Sprite_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x694)]=function(){const _0x3aaefb=_0x54b1a4;if(!this['_battler'])return 0x0;if(this['_cacheTextWidth'])return this[_0x3aaefb(0x4a3)];const _0x2e8c39=this[_0x3aaefb(0x56b)]();return this[_0x3aaefb(0x6f9)](),this[_0x3aaefb(0x4a3)]=this[_0x3aaefb(0x65b)][_0x3aaefb(0x4d8)](_0x2e8c39)||0x1,this[_0x3aaefb(0x4a3)];},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x9e4)]=Sprite_Battleback['prototype'][_0x54b1a4(0xdbc)],Sprite_Battleback[_0x54b1a4(0x375)][_0x54b1a4(0xdbc)]=function(){const _0x286368=_0x54b1a4,_0x1f33b7=VisuMZ[_0x286368(0x387)][_0x286368(0x916)][_0x286368(0x3af)];if(!_0x1f33b7)return VisuMZ[_0x286368(0x387)][_0x286368(0x9e4)][_0x286368(0xd6c)](this);const _0x2a5153=String(_0x1f33b7['DefaultStyle'])||'MZ';switch(_0x2a5153){case'MZ':VisuMZ[_0x286368(0x387)]['Sprite_Battleback_adjustPosition'][_0x286368(0xd6c)](this);break;case _0x286368(0x6ea):this[_0x286368(0x233)]();break;case _0x286368(0x468):this[_0x286368(0x290)]();break;case _0x286368(0x84f):this[_0x286368(0xd8c)]();break;case _0x286368(0x3e5):this[_0x286368(0x292)]();break;}},Sprite_Battleback[_0x54b1a4(0x375)][_0x54b1a4(0x233)]=function(){const _0x199f08=_0x54b1a4,_0x1a98ae=VisuMZ[_0x199f08(0x387)][_0x199f08(0x916)][_0x199f08(0x3af)];if(_0x1a98ae&&_0x1a98ae[_0x199f08(0x899)]){if(_0x199f08(0x3bb)===_0x199f08(0xb8d))this[_0x199f08(0x4cb)][_0x199f08(0x65b)][_0x199f08(0xd41)]=this['_battler'][_0x199f08(0x8d5)]();else return _0x1a98ae[_0x199f08(0x899)]['call'](this);}this[_0x199f08(0x495)]=Graphics[_0x199f08(0x495)],this[_0x199f08(0xdd7)]=Graphics[_0x199f08(0xdd7)];const _0x1e5a71=0x1;this[_0x199f08(0xbcd)]['x']=_0x1e5a71,this[_0x199f08(0xbcd)]['y']=_0x1e5a71,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype']['adjustPosition_ScaleToFit']=function(){const _0x46e52a=_0x54b1a4,_0xd47a47=VisuMZ[_0x46e52a(0x387)][_0x46e52a(0x916)][_0x46e52a(0x3af)];if(_0xd47a47&&_0xd47a47[_0x46e52a(0x926)]){if(_0x46e52a(0xc32)===_0x46e52a(0x670)){if(_0x5dc89e[_0x46e52a(0xcb7)]&&!_0x2776ca['autoBattleUseSkills'])return this[_0x46e52a(0xd4d)]();else{return _0x3a1472[_0x46e52a(0x387)][_0x46e52a(0x72b)][_0x46e52a(0xd6c)](this);;}}else return _0xd47a47[_0x46e52a(0x926)][_0x46e52a(0xd6c)](this);}this['width']=Graphics[_0x46e52a(0x495)],this['height']=Graphics[_0x46e52a(0xdd7)];const _0x213f81=this[_0x46e52a(0x495)]/this[_0x46e52a(0x65b)]['width'],_0x2b5e4e=this['height']/this[_0x46e52a(0x65b)]['height'],_0x1849e7=Math['max'](_0x213f81,_0x2b5e4e);this[_0x46e52a(0xbcd)]['x']=_0x1849e7,this['scale']['y']=_0x1849e7,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics['height']-this[_0x46e52a(0xdd7)];},Sprite_Battleback[_0x54b1a4(0x375)][_0x54b1a4(0xd8c)]=function(){const _0x410a90=_0x54b1a4,_0x49c00d=VisuMZ[_0x410a90(0x387)][_0x410a90(0x916)][_0x410a90(0x3af)];if(_0x49c00d&&_0x49c00d['jsScaleDown'])return _0x49c00d[_0x410a90(0x63f)][_0x410a90(0xd6c)](this);this['width']=Graphics[_0x410a90(0x495)],this[_0x410a90(0xdd7)]=Graphics[_0x410a90(0xdd7)];const _0x14380e=Math['min'](0x1,this[_0x410a90(0x495)]/this[_0x410a90(0x65b)][_0x410a90(0x495)]),_0x29f159=Math['min'](0x1,this[_0x410a90(0xdd7)]/this['bitmap'][_0x410a90(0xdd7)]),_0x3f0a1f=Math[_0x410a90(0x9db)](_0x14380e,_0x29f159);this[_0x410a90(0xbcd)]['x']=_0x3f0a1f,this[_0x410a90(0xbcd)]['y']=_0x3f0a1f,this['x']=(Graphics['width']-this[_0x410a90(0x495)])/0x2,this['y']=Graphics[_0x410a90(0xdd7)]-this[_0x410a90(0xdd7)];},Sprite_Battleback[_0x54b1a4(0x375)]['adjustPosition_ScaleUp']=function(){const _0x20323e=_0x54b1a4,_0x2db13a=VisuMZ[_0x20323e(0x387)][_0x20323e(0x916)][_0x20323e(0x3af)];if(_0x2db13a&&_0x2db13a[_0x20323e(0x23e)])return _0x2db13a[_0x20323e(0x23e)][_0x20323e(0xd6c)](this);this['width']=Graphics[_0x20323e(0x495)],this[_0x20323e(0xdd7)]=Graphics[_0x20323e(0xdd7)];const _0x52d88c=Math[_0x20323e(0x9db)](0x1,this['width']/this[_0x20323e(0x65b)][_0x20323e(0x495)]),_0x4c231e=Math[_0x20323e(0x9db)](0x1,this[_0x20323e(0xdd7)]/this[_0x20323e(0x65b)][_0x20323e(0xdd7)]),_0x3d1b24=Math[_0x20323e(0x9db)](_0x52d88c,_0x4c231e);this[_0x20323e(0xbcd)]['x']=_0x3d1b24,this['scale']['y']=_0x3d1b24,this['x']=(Graphics[_0x20323e(0x495)]-this[_0x20323e(0x495)])/0x2,this['y']=Graphics[_0x20323e(0xdd7)]-this[_0x20323e(0xdd7)];},Spriteset_Battle[_0x54b1a4(0xb9d)]=![],Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xbdd)]=function(){const _0x2b4ef9=_0x54b1a4;if(!$gameSystem[_0x2b4ef9(0xc91)]())return![];return![];},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x40c)]=function(){return 0x0;},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x4b3)]=function(){return 0x0;},VisuMZ[_0x54b1a4(0x387)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle['prototype']['createLowerLayer'],Spriteset_Battle[_0x54b1a4(0x375)]['createLowerLayer']=function(){const _0x4c54e2=_0x54b1a4;VisuMZ[_0x4c54e2(0x387)]['Spriteset_Battle_createLowerLayer'][_0x4c54e2(0xd6c)](this),this[_0x4c54e2(0x3d7)](),this[_0x4c54e2(0x4f2)]();},VisuMZ['BattleCore'][_0x54b1a4(0x26b)]=Spriteset_Battle['prototype'][_0x54b1a4(0x879)],Spriteset_Battle[_0x54b1a4(0x375)]['update']=function(){const _0x19d495=_0x54b1a4;VisuMZ[_0x19d495(0x387)][_0x19d495(0x26b)][_0x19d495(0xd6c)](this),this[_0x19d495(0xb1a)](),this[_0x19d495(0xbf2)](),this[_0x19d495(0x5ac)]();},Spriteset_Battle['prototype'][_0x54b1a4(0x3d7)]=function(){const _0x189ca8=_0x54b1a4;this[_0x189ca8(0x308)]=new Weather(),this['_battleField'][_0x189ca8(0x6a8)](this['_weather']);},Spriteset_Battle['prototype'][_0x54b1a4(0x5ac)]=function(){const _0x354122=_0x54b1a4;this[_0x354122(0x308)]['type']=$gameScreen[_0x354122(0xb29)](),this[_0x354122(0x308)]['power']=$gameScreen[_0x354122(0xbe0)]();},Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x3c7)]=function(_0xca5e79){const _0x5aa181=_0x54b1a4;$gameScreen[_0x5aa181(0x6e8)](_0xca5e79[0x0],_0xca5e79[0x1],_0xca5e79[0x2]);if(_0xca5e79[0x3])this[_0x5aa181(0x755)](_0xca5e79[0x2]);return!![];},VisuMZ['BattleCore'][_0x54b1a4(0x884)]=Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x693)],Game_Interpreter[_0x54b1a4(0x375)][_0x54b1a4(0x693)]=function(_0x2539be){const _0x5b89b0=_0x54b1a4;return SceneManager[_0x5b89b0(0xbbd)]()?(SceneManager['_scene'][_0x5b89b0(0xaca)][_0x5b89b0(0x7cc)](_0x2539be[0x0],_0x2539be[0x1]),!![]):VisuMZ['BattleCore']['Game_Interpreter_command283'][_0x5b89b0(0xd6c)](this,_0x2539be);},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xb0a)]=function(_0x5e5787,_0x481bcb){const _0x28fa42=_0x54b1a4;_0x5e5787[_0x28fa42(0x65b)]=_0x481bcb;},Spriteset_Battle['prototype'][_0x54b1a4(0x7cc)]=function(_0x3c370a,_0x30ef85){const _0x2f9ce3=_0x54b1a4;_0x3c370a=_0x3c370a||'',_0x30ef85=_0x30ef85||'';_0x3c370a===''&&_0x30ef85===''&&(_0x2f9ce3(0x98c)==='ckFND'?(_0x24954f[_0x3924c8]=0x1,_0x35c09a++):(_0x3c370a=this[_0x2f9ce3(0x8ff)][_0x2f9ce3(0x75a)](),_0x30ef85=this[_0x2f9ce3(0x5f6)][_0x2f9ce3(0xa5d)]()));const _0x5ae017=ImageManager[_0x2f9ce3(0xb1d)](_0x3c370a),_0xa17431=ImageManager[_0x2f9ce3(0xa3c)](_0x30ef85);_0x5ae017[_0x2f9ce3(0xa2a)](this[_0x2f9ce3(0xd81)]['bind'](this,this['_back1Sprite'],this['_back2Sprite'],_0x5ae017,_0xa17431));},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xd81)]=function(_0x5de6ac,_0x1dbb85,_0x48066d,_0x195510){const _0x11356b=_0x54b1a4;_0x195510[_0x11356b(0xa2a)](this['updateBattlebackBitmap2'][_0x11356b(0xc8f)](this,_0x5de6ac,_0x1dbb85,_0x48066d,_0x195510));},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xcc4)]=function(_0x478acd,_0xd50b5d,_0x1b63dd,_0x4499f6){const _0x254bcd=_0x54b1a4;_0x478acd['bitmap']=_0x1b63dd,_0xd50b5d[_0x254bcd(0x65b)]=_0x4499f6,_0x478acd['adjustPosition'](),_0xd50b5d[_0x254bcd(0xdbc)]();},VisuMZ[_0x54b1a4(0x387)]['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0x54b1a4(0x375)]['createBattleField'],Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x321)]=function(){const _0x540650=_0x54b1a4;VisuMZ['BattleCore'][_0x540650(0x6fb)]['call'](this),this[_0x540650(0xdb4)]();},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xdb4)]=function(){const _0x39e456=_0x54b1a4;this[_0x39e456(0x2fd)](),this['createUIContainer'](),this[_0x39e456(0xbae)](),this[_0x39e456(0xa0d)](),this[_0x39e456(0xb77)]();},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x2fd)]=function(){const _0x132fc0=_0x54b1a4;this['_battlerContainer']=new Sprite(),this[_0x132fc0(0x86f)][_0x132fc0(0x6a8)](this[_0x132fc0(0xa42)]);},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xbae)]=function(){const _0x1f22c1=_0x54b1a4;this[_0x1f22c1(0xaa4)]=new Sprite();if(Spriteset_Battle[_0x1f22c1(0xb9d)]){if('COeYd'!==_0x1f22c1(0x4df)){const _0x145662=this[_0x1f22c1(0x8a1)],_0x3b76e8=_0xfb3949[_0x1f22c1(0x74d)](),_0x1990b9=_0x47db16['x']+_0x4469b1[_0x1f22c1(0x8a3)](_0x23ea22[_0x1f22c1(0x495)]/0x2)+_0x3b76e8;_0x145662['x']=_0x145662[_0x1f22c1(0x495)]/-0x2+_0x1990b9,_0x145662['y']=_0x46f277[_0x1f22c1(0x8a3)](_0x50920e[_0x1f22c1(0xdd7)]/0x2);}else this['addChild'](this[_0x1f22c1(0xaa4)]);}else{if(_0x1f22c1(0xb87)!==_0x1f22c1(0x57a))this[_0x1f22c1(0x86f)]['addChild'](this[_0x1f22c1(0xaa4)]);else{const _0x2cb861=_0x353ad6[_0x1f22c1(0x387)][_0x1f22c1(0x916)][_0x1f22c1(0x2c1)],_0x3ceda8=this['_battler']&&this[_0x1f22c1(0xb7d)][_0x1f22c1(0xa2c)]()?0x1:-0x1,_0x59c5cc=this[_0x1f22c1(0xc43)]-this['_homeX']+_0x3ceda8*_0x2cb861[_0x1f22c1(0xc10)],_0x4ac6c7=this[_0x1f22c1(0xb10)]-this[_0x1f22c1(0x96f)]+_0x3ceda8*_0x2cb861['FlinchDistanceY'],_0x400b6=_0x2cb861['FlinchDuration'];this[_0x1f22c1(0x835)](_0x59c5cc,_0x4ac6c7,_0x400b6);}}},Spriteset_Battle['prototype'][_0x54b1a4(0xa0d)]=function(){const _0x258bfc=_0x54b1a4;this[_0x258bfc(0x9dc)]=new Sprite(),this[_0x258bfc(0x9dc)]['x']=this[_0x258bfc(0x86f)]['x'],this[_0x258bfc(0x9dc)]['y']=this[_0x258bfc(0x86f)]['y'],this['addChild'](this['_damageContainer']);},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xb77)]=function(){const _0x19d5cf=_0x54b1a4;if(!this[_0x19d5cf(0xbdd)]())return;this[_0x19d5cf(0xa42)][_0x19d5cf(0xbcd)]['x']=-0x1,this[_0x19d5cf(0xa42)]['x']=this[_0x19d5cf(0x86f)][_0x19d5cf(0x495)],this[_0x19d5cf(0x3e0)][_0x19d5cf(0xbcd)]['x']=-0x1,this[_0x19d5cf(0x3e0)]['x']=this[_0x19d5cf(0x86f)][_0x19d5cf(0x495)],this[_0x19d5cf(0xaa4)][_0x19d5cf(0xbcd)]['x']=-0x1,this[_0x19d5cf(0xaa4)]['x']=this[_0x19d5cf(0x86f)][_0x19d5cf(0x495)],this[_0x19d5cf(0x9dc)]['scale']['x']=-0x1,this[_0x19d5cf(0x9dc)]['x']=this[_0x19d5cf(0x86f)]['x']+this[_0x19d5cf(0x86f)][_0x19d5cf(0x495)];},Spriteset_Battle['prototype']['createEnemies']=function(){const _0x221d48=_0x54b1a4;if(Imported[_0x221d48(0x2e5)]&&this['coreEngineRepositionEnemies']()){if('hsOLq'===_0x221d48(0xa75)){const _0x1133d5=new _0x18b28e();_0x1133d5['bitmap']=_0x11a52b[_0x221d48(0x715)](_0x23a71a[_0x221d48(0xb59)]),_0x1133d5['x']=_0x199d08[_0x221d48(0x444)]||0x0,_0x1133d5['y']=_0x31b314[_0x221d48(0x2d1)]||0x0,this['addChild'](_0x1133d5),this[_0x221d48(0x3b1)]=_0x1133d5;}else this['repositionEnemiesByResolution']();}const _0x461c00=$gameTroop['members'](),_0x242731=[];for(const _0x518f15 of _0x461c00){_0x242731[_0x221d48(0x519)](new Sprite_Enemy(_0x518f15));}_0x242731['sort'](this[_0x221d48(0x63d)][_0x221d48(0xc8f)](this));for(const _0x1550b8 of _0x242731){if('nVsFo'!==_0x221d48(0x611)){const _0x87959d={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x48f23f=_0x5e587e[_0x221d48(0xd3a)][_0x221d48(0x67f)]();_0xde288c['list'][_0x221d48(0x5a7)](_0x87959d),_0x5de7c3['list'][_0x221d48(0x5a7)](_0x48f23f);}else this['_battlerContainer'][_0x221d48(0x6a8)](_0x1550b8);}this[_0x221d48(0x4f6)]=_0x242731;},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x24c)]=function(){const _0x2ee034=_0x54b1a4;this[_0x2ee034(0xcd3)]=[];for(let _0x1324df=0x0;_0x1324df<$gameParty['maxBattleMembers']();_0x1324df++){const _0xe25dcf=$gameParty['battleMembers']()[_0x1324df],_0x3f9a9f=new Sprite_Actor();_0x3f9a9f[_0x2ee034(0x4e9)](_0xe25dcf),_0x3f9a9f[_0x2ee034(0xc0f)](_0xe25dcf),_0x3f9a9f[_0x2ee034(0x879)](),this[_0x2ee034(0xcd3)][_0x2ee034(0x519)](_0x3f9a9f),this[_0x2ee034(0xa42)][_0x2ee034(0x6a8)](_0x3f9a9f);}},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x8dc)]=function(_0x493352,_0x5eb05c,_0x40cbed,_0x599e9f){const _0x7b16ee=_0x54b1a4,_0x2cb1f3=this[_0x7b16ee(0x4d9)](_0x5eb05c),_0x27308c=new(_0x2cb1f3?Sprite_AnimationMV:Sprite_Animation)(),_0x1dcbcb=this[_0x7b16ee(0xa1b)](_0x493352);this[_0x7b16ee(0x64a)](_0x493352[0x0])&&(_0x7b16ee(0x557)!==_0x7b16ee(0x2b8)?_0x40cbed=!_0x40cbed:_0x1a3038[_0x7b16ee(0x1f1)](_0x302cb9)),_0x27308c[_0x7b16ee(0x3d1)]=_0x493352,_0x27308c['setup'](_0x1dcbcb,_0x5eb05c,_0x40cbed,_0x599e9f),this[_0x7b16ee(0x561)](_0x27308c);},Spriteset_Battle['prototype'][_0x54b1a4(0x561)]=function(_0x2722e9){const _0x3d2cac=_0x54b1a4;this[_0x3d2cac(0x47c)](_0x2722e9)?(this[_0x3d2cac(0x9c8)]()['addChild'](_0x2722e9),_0x2722e9[_0x3d2cac(0x84c)]=!![]):(this[_0x3d2cac(0xaa4)]['addChild'](_0x2722e9),Spriteset_Battle[_0x3d2cac(0xb9d)]&&(this['_animationContainer']['x']=this['_effectsContainer']['x'],this['_animationContainer']['y']=this[_0x3d2cac(0x92c)]['y'])),this[_0x3d2cac(0x67c)][_0x3d2cac(0x519)](_0x2722e9);},Spriteset_Battle[_0x54b1a4(0x375)]['isAnimationShownOnBattlePortrait']=function(_0x2e2d36){const _0x5d8a44=_0x54b1a4;if(!_0x2e2d36)return![];if(!_0x2e2d36[_0x5d8a44(0x7af)])return![];if(!_0x2e2d36['targetObjects'][0x0])return![];if(_0x2e2d36[_0x5d8a44(0x3d1)][0x0]['isActor']&&!_0x2e2d36[_0x5d8a44(0x3d1)][0x0]['isActor']())return![];if($gameSystem[_0x5d8a44(0xc91)]())return![];if(!this[_0x5d8a44(0x9c8)]())return![];if(_0x2e2d36[_0x5d8a44(0x3ac)]===Sprite_Animation){if(_0x2e2d36['_animation'][_0x5d8a44(0x21e)]!==0x0)return![];}else{if(_0x2e2d36['constructor']===Sprite_AnimationMV){if(_0x2e2d36[_0x5d8a44(0x7af)][_0x5d8a44(0x494)]===0x3)return![];}}return!![];const _0x1c5ed4=Window_BattleStatus[_0x5d8a44(0x375)][_0x5d8a44(0xd92)]();return['xp','portrait'][_0x5d8a44(0x6ca)](_0x1c5ed4);},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x9c8)]=function(){const _0xb70548=_0x54b1a4;if(!SceneManager[_0xb70548(0xc22)])return null;if(!SceneManager[_0xb70548(0xc22)][_0xb70548(0x89f)])return null;if(!SceneManager[_0xb70548(0xc22)]['_statusWindow'][_0xb70548(0x92c)])return null;return SceneManager[_0xb70548(0xc22)][_0xb70548(0x89f)][_0xb70548(0x92c)];},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x9f6)]=function(_0xaa056a){const _0x446a3d=_0x54b1a4;this[_0x446a3d(0x97e)](_0xaa056a);for(const _0x3e342c of _0xaa056a[_0x446a3d(0x3d1)]){_0x3e342c['endAnimation']&&(_0x446a3d(0xdd4)!==_0x446a3d(0x911)?_0x3e342c[_0x446a3d(0x317)]():this[_0x446a3d(0x4cb)][_0x446a3d(0x3ef)](_0x8e3943));}_0xaa056a['destroy']();},Spriteset_Battle[_0x54b1a4(0x375)]['removeAnimationFromContainer']=function(_0x6f9be7){const _0x498f1f=_0x54b1a4;if(this[_0x498f1f(0x47c)](_0x6f9be7)){if(_0x498f1f(0xb09)==='cxzyD')this[_0x498f1f(0x9c8)]()[_0x498f1f(0x4e3)](_0x6f9be7);else{const _0x1b11ef=_0x53eefb(_0x3fb992['$1']);_0x1b11ef<_0x39dfcb?(_0x4094b5(_0x498f1f(0x608)['format'](_0x5cf704,_0x1b11ef,_0x1a74da)),_0x9259dc[_0x498f1f(0x3ca)]()):_0x188f32=_0x548939['max'](_0x1b11ef,_0x129e51);}}else'njzXn'===_0x498f1f(0x929)?this[_0x498f1f(0xaa4)][_0x498f1f(0x4e3)](_0x6f9be7):this[_0x498f1f(0x56d)]()?this[_0x498f1f(0xa41)]():_0x3fa7af[_0x498f1f(0x387)]['BattleManager_selectNextCommand'][_0x498f1f(0xd6c)](this);this[_0x498f1f(0x92c)][_0x498f1f(0x4e3)](_0x6f9be7),this['_animationContainer']['removeChild'](_0x6f9be7),this[_0x498f1f(0x67c)][_0x498f1f(0xd79)](_0x6f9be7);if(this[_0x498f1f(0x973)])this[_0x498f1f(0x973)][_0x498f1f(0xd79)](_0x6f9be7);},VisuMZ[_0x54b1a4(0x387)]['Spriteset_Battle_updateActors']=Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x94a)],Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x94a)]=function(){const _0xa88b18=_0x54b1a4;VisuMZ['BattleCore'][_0xa88b18(0x2c5)][_0xa88b18(0xd6c)](this),this[_0xa88b18(0xb1a)]();},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xb1a)]=function(){const _0x4cef08=_0x54b1a4;this['_battlerContainer']['children']['sort'](this[_0x4cef08(0x57d)][_0x4cef08(0xc8f)](this)),this[_0x4cef08(0x96e)]();if(!this[_0x4cef08(0xa42)])return;this[_0x4cef08(0xa42)]['opacity']=this[_0x4cef08(0x89a)]();},Spriteset_Battle['prototype'][_0x54b1a4(0x57d)]=function(_0x463a54,_0xedde98){const _0x30d8f4=_0x54b1a4;if(VisuMZ[_0x30d8f4(0x387)]['Settings'][_0x30d8f4(0x2c1)]['PrioritySortActors']){if(_0x463a54['_battler']&&_0xedde98[_0x30d8f4(0xb7d)]){if('tjgqA'!==_0x30d8f4(0x96c)){if(_0x463a54[_0x30d8f4(0xb7d)]['isActor']()&&_0xedde98[_0x30d8f4(0xb7d)][_0x30d8f4(0xc3c)]())return 0x1;else{if(_0xedde98['_battler'][_0x30d8f4(0xa2c)]()&&_0x463a54['_battler'][_0x30d8f4(0xc3c)]()){if('RSHDv'!=='KUzzh')return-0x1;else this['autoBattleAtStart']=![];}}}else this[_0x30d8f4(0x327)](_0x2b9651);}}return _0x463a54['_baseY']!==_0xedde98['_baseY']?_0x463a54['_baseY']-_0xedde98[_0x30d8f4(0xb10)]:_0xedde98['spriteId']-_0x463a54['spriteId'];},Spriteset_Battle['prototype'][_0x54b1a4(0x96e)]=function(){const _0x5c304c=_0x54b1a4;if(!VisuMZ['BattleCore'][_0x5c304c(0x916)][_0x5c304c(0x2c1)][_0x5c304c(0xa4b)])return;const _0x1b0150=BattleManager[_0x5c304c(0x644)];if(_0x1b0150){if(_0x5c304c(0x363)!==_0x5c304c(0x363))this['_distortionSprite']=new _0x927e08(),this['_distortionSprite']['anchor']['x']=0.5,this['_distortionSprite'][_0x5c304c(0x749)]['y']=0.5,this[_0x5c304c(0x6a8)](this[_0x5c304c(0x267)]);else{if(_0x1b0150[_0x5c304c(0xa2c)]()&&!$gameSystem[_0x5c304c(0xc91)]())return;const _0x4a273b=_0x1b0150[_0x5c304c(0x887)]();if(_0x4a273b&&_0x1b0150[_0x5c304c(0xa2c)]())this[_0x5c304c(0xa42)][_0x5c304c(0x6a8)](_0x4a273b);}}},Spriteset_Battle['prototype'][_0x54b1a4(0xd89)]=function(){const _0x571842=_0x54b1a4;for(const _0x4d9b7b of $gameParty[_0x571842(0x6a6)]()){if(!_0x4d9b7b)continue;if(!_0x4d9b7b[_0x571842(0x887)]())continue;_0x4d9b7b[_0x571842(0x887)]()[_0x571842(0xcc8)]=!![],_0x4d9b7b[_0x571842(0x887)]()[_0x571842(0x6c6)]();}},Spriteset_Battle[_0x54b1a4(0x375)]['createUIContainer']=function(){const _0x3563ac=_0x54b1a4;this[_0x3563ac(0x3e0)]=new Sprite();if(Spriteset_Battle['ANTI_TINT_UI']){if('neVpa'===_0x3563ac(0x41f))this[_0x3563ac(0x6a8)](this[_0x3563ac(0x3e0)]);else return _0x30888d[_0x3563ac(0x6a6)]()['filter'](_0x303c8=>_0x303c8!==_0x297088);}else this['_battleField'][_0x3563ac(0x6a8)](this['_uiContainer']);SceneManager[_0x3563ac(0xc22)][_0x3563ac(0x3e0)]=this['_uiContainer'];},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x4f2)]=function(){const _0x10818b=_0x54b1a4;if(VisuMZ[_0x10818b(0x387)][_0x10818b(0x916)][_0x10818b(0x809)][_0x10818b(0x60f)])return;this[_0x10818b(0xc09)]=new Sprite(),BattleManager[_0x10818b(0xd90)](this[_0x10818b(0xc09)]);for(const _0x13dbb1 of this['_enemySprites']){const _0xb1de7b=new Sprite_EnemyName();this[_0x10818b(0xc09)][_0x10818b(0x6a8)](_0xb1de7b),_0xb1de7b[_0x10818b(0xc5d)](_0x13dbb1);}},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0xbf2)]=function(){const _0x4e0a03=_0x54b1a4;if(!this[_0x4e0a03(0x9dc)])return;if(!this[_0x4e0a03(0x3e0)])return;const _0x1380bd=Spriteset_Battle[_0x4e0a03(0xb9d)]?this[_0x4e0a03(0x9dc)]['x']:0x0,_0x460e09=Spriteset_Battle[_0x4e0a03(0xb9d)]?this[_0x4e0a03(0x9dc)]['y']:0x0,_0x21ebfa=Imported[_0x4e0a03(0x81b)]?this['_battleField']['x']:0x0,_0x1b87b8=Imported[_0x4e0a03(0x81b)]?this[_0x4e0a03(0x86f)]['y']:0x0;this[_0x4e0a03(0x3e0)]['x']=_0x1380bd+_0x21ebfa,this[_0x4e0a03(0x3e0)]['y']=_0x460e09+_0x1b87b8;},BattleManager[_0x54b1a4(0xd90)]=function(_0xb437ba){const _0x1c0257=_0x54b1a4;if(!SceneManager[_0x1c0257(0xc22)]['_uiContainer'])return;SceneManager[_0x1c0257(0xc22)][_0x1c0257(0x3e0)]['addChild'](_0xb437ba);},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x89a)]=function(){return 0xff;},Spriteset_Battle[_0x54b1a4(0x375)]['isBusy']=function(){return![];},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x6f4)]=function(){const _0x2be063=_0x54b1a4;return this[_0x2be063(0x792)]()['some'](_0x52d149=>_0x52d149[_0x2be063(0x46a)]());},Spriteset_Battle['prototype'][_0x54b1a4(0x395)]=function(){return this['battlerSprites']()['some'](_0xe99281=>_0xe99281['isJumping']());},Spriteset_Battle[_0x54b1a4(0x375)]['isAnyoneGrowing']=function(){const _0x54ccc1=_0x54b1a4;return this[_0x54ccc1(0x792)]()[_0x54ccc1(0xd19)](_0x4c3f03=>_0x4c3f03[_0x54ccc1(0x764)]());},Spriteset_Battle[_0x54b1a4(0x375)]['isAnyoneSkewing']=function(){const _0x527a46=_0x54b1a4;return this[_0x527a46(0x792)]()['some'](_0x327fa2=>_0x327fa2[_0x527a46(0x29d)]());},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x5eb)]=function(){const _0x3329c8=_0x54b1a4;return this[_0x3329c8(0x792)]()[_0x3329c8(0xd19)](_0x439a10=>_0x439a10[_0x3329c8(0x675)]());},Spriteset_Battle[_0x54b1a4(0x375)][_0x54b1a4(0x7e6)]=function(){const _0x180a06=_0x54b1a4;return this[_0x180a06(0x792)]()['some'](_0x1c2bb9=>_0x1c2bb9[_0x180a06(0xada)]());},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x8fe)]=Window_ItemList['prototype'][_0x54b1a4(0x3c6)],Window_ItemList[_0x54b1a4(0x375)][_0x54b1a4(0x3c6)]=function(){const _0x5c2b77=_0x54b1a4;return SceneManager['isSceneBattle']()?SceneManager[_0x5c2b77(0xc22)][_0x5c2b77(0xd92)]()===_0x5c2b77(0x218)?VisuMZ[_0x5c2b77(0x387)]['Settings'][_0x5c2b77(0x6f0)][_0x5c2b77(0x820)]:_0x5c2b77(0x34f)==='UxAJX'?0x1:VisuMZ[_0x5c2b77(0x387)][_0x5c2b77(0x916)][_0x5c2b77(0x6f0)]['SkillItemStandardCols']:VisuMZ['BattleCore']['Window_ItemList_maxCols'][_0x5c2b77(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)]['Window_SkillList_maxCols']=Window_SkillList['prototype'][_0x54b1a4(0x3c6)],Window_SkillList[_0x54b1a4(0x375)][_0x54b1a4(0x3c6)]=function(){const _0x120dc2=_0x54b1a4;if(SceneManager[_0x120dc2(0xbbd)]()){if(SceneManager['_scene'][_0x120dc2(0xd92)]()===_0x120dc2(0x218)){if(_0x120dc2(0x3a3)!==_0x120dc2(0x3a3))_0x5f4c46+=_0x566055['isActor']()?-_0x77f9a4:_0x19b329,_0x3412e2+=_0x45c71b;else return VisuMZ[_0x120dc2(0x387)][_0x120dc2(0x916)][_0x120dc2(0x6f0)][_0x120dc2(0x820)];}else return VisuMZ[_0x120dc2(0x387)][_0x120dc2(0x916)][_0x120dc2(0x6f0)]['SkillItemStandardCols'];}else{if(_0x120dc2(0x9e8)===_0x120dc2(0x9e8))return VisuMZ[_0x120dc2(0x387)][_0x120dc2(0x727)][_0x120dc2(0xd6c)](this);else{const _0x3e19c3=_0x322e26['BattleCore']['Settings']['BattleLayout'];if(_0x3e19c3[_0x120dc2(0x967)])return;_0x55208a['prototype'][_0x120dc2(0x7c5)]['call'](this,_0xa9091d);}}},VisuMZ['BattleCore'][_0x54b1a4(0x336)]=Window_Options['prototype']['addGeneralOptions'],Window_Options[_0x54b1a4(0x375)][_0x54b1a4(0x6ad)]=function(){const _0xd09f54=_0x54b1a4;VisuMZ['BattleCore'][_0xd09f54(0x336)][_0xd09f54(0xd6c)](this),this[_0xd09f54(0x47b)](),this[_0xd09f54(0xad3)]();},Window_Options[_0x54b1a4(0x375)][_0x54b1a4(0x47b)]=function(){const _0x589061=_0x54b1a4;if(VisuMZ[_0x589061(0x387)][_0x589061(0x916)][_0x589061(0xc85)][_0x589061(0x368)]){if(_0x589061(0x3e2)!=='lOwDO'){if(this['allowCollapse']())_0x5dc2ed[_0x589061(0x387)][_0x589061(0x5b0)][_0x589061(0xd6c)](this);}else this[_0x589061(0xc39)](),this[_0x589061(0xabd)]();}},Window_Options['prototype'][_0x54b1a4(0xad3)]=function(){const _0x388e89=_0x54b1a4;if(!VisuMZ['BattleCore'][_0x388e89(0x916)][_0x388e89(0x60e)][_0x388e89(0xbf9)])return;const _0x30a49b=TextManager[_0x388e89(0xce0)],_0x1aef36=_0x388e89(0xce0);this[_0x388e89(0x59f)](_0x30a49b,_0x1aef36);},Window_Options[_0x54b1a4(0x375)][_0x54b1a4(0xc39)]=function(){const _0x56e9a8=_0x54b1a4,_0x4edfae=TextManager[_0x56e9a8(0x695)],_0x18262f=_0x56e9a8(0xddb);this[_0x56e9a8(0x59f)](_0x4edfae,_0x18262f);},Window_Options[_0x54b1a4(0x375)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x3305e4=_0x54b1a4,_0x2636a2=TextManager[_0x3305e4(0x3f7)],_0xb9abfc=_0x3305e4(0x3c1);this['addCommand'](_0x2636a2,_0xb9abfc);},VisuMZ['BattleCore'][_0x54b1a4(0xb9e)]=Window_Options[_0x54b1a4(0x375)][_0x54b1a4(0x678)],Window_Options[_0x54b1a4(0x375)][_0x54b1a4(0x678)]=function(_0x5389bd){const _0x100df2=_0x54b1a4,_0x37546d=this[_0x100df2(0xba5)](_0x5389bd);return _0x37546d===_0x100df2(0x3c1)?this['statusTextAutoBattleStyle']():VisuMZ['BattleCore'][_0x100df2(0xb9e)]['call'](this,_0x5389bd);},Window_Options['prototype'][_0x54b1a4(0x2d9)]=function(){const _0x4fc045=_0x54b1a4,_0x1ce454=VisuMZ[_0x4fc045(0x387)][_0x4fc045(0x916)][_0x4fc045(0xc85)],_0x457aad=this[_0x4fc045(0x37c)]('autoBattleUseSkills');return _0x457aad?_0x1ce454[_0x4fc045(0x46b)]:_0x1ce454['StyleOFF'];},Window_ShopStatus['prototype']['getItemDamageAmountLabelBattleCore']=function(){const _0x596117=_0x54b1a4,_0x1cb1a0=DataManager['getDamageStyle'](this[_0x596117(0x6d0)]),_0x51d366=VisuMZ[_0x596117(0x2eb)][_0x1cb1a0];if(!_0x51d366)return this['getItemDamageAmountLabelOriginal']();const _0x2e13f4=_0x596117(0x9ee)[_0x596117(0xd76)](this[_0x596117(0x6d0)][_0x596117(0x220)][_0x596117(0x5cc)]),_0x494be2=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x596117(0x6d0)]['damage'][_0x596117(0x5cc)]];return _0x51d366[_0x2e13f4][_0x596117(0xd76)](_0x494be2);},Window_ShopStatus[_0x54b1a4(0x375)][_0x54b1a4(0xafd)]=function(){const _0xfe728b=_0x54b1a4,_0x5a7df5=DataManager[_0xfe728b(0x89b)](this[_0xfe728b(0x6d0)]),_0x91aa53=VisuMZ[_0xfe728b(0x2eb)][_0x5a7df5];if(!_0x91aa53)return this[_0xfe728b(0xad0)]();return _0x91aa53[_0xfe728b(0xd6e)][_0xfe728b(0xd6c)](this);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x878)]=Window_PartyCommand[_0x54b1a4(0x375)]['initialize'],Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)]=function(_0x5cde8c){const _0x1dccea=_0x54b1a4;VisuMZ['BattleCore'][_0x1dccea(0x878)][_0x1dccea(0xd6c)](this,_0x5cde8c),this['createCommandNameWindow'](_0x5cde8c);},Window_PartyCommand['prototype']['createCommandNameWindow']=function(_0x247659){const _0x19d921=_0x54b1a4,_0xd03bfc=new Rectangle(0x0,0x0,_0x247659[_0x19d921(0x495)],_0x247659[_0x19d921(0xdd7)]);this['_commandNameWindow']=new Window_Base(_0xd03bfc),this[_0x19d921(0x8a1)][_0x19d921(0x9e2)]=0x0,this['addChild'](this[_0x19d921(0x8a1)]),this['updateCommandNameWindow']();},Window_PartyCommand[_0x54b1a4(0x375)]['callUpdateHelp']=function(){const _0x18acd9=_0x54b1a4;Window_Command[_0x18acd9(0x375)]['callUpdateHelp']['call'](this);if(this[_0x18acd9(0x8a1)])this[_0x18acd9(0x25e)]();},Window_PartyCommand[_0x54b1a4(0x375)]['updateCommandNameWindow']=function(){const _0x45b090=_0x54b1a4,_0x2ff435=this['_commandNameWindow'];_0x2ff435[_0x45b090(0xc4e)]['clear']();const _0x420400=this[_0x45b090(0x92f)](this[_0x45b090(0x58f)]());if(_0x420400===_0x45b090(0x256)&&this[_0x45b090(0xa6e)]()>0x0){if(_0x45b090(0x8ce)==='yZAuW'){const _0x5d7990=this[_0x45b090(0x347)](this[_0x45b090(0x58f)]());let _0x56db5d=this[_0x45b090(0xa51)](this[_0x45b090(0x58f)]());_0x56db5d=_0x56db5d[_0x45b090(0x68b)](/\\I\[(\d+)\]/gi,''),_0x2ff435[_0x45b090(0x213)](),this['commandNameWindowDrawBackground'](_0x56db5d,_0x5d7990),this['commandNameWindowDrawText'](_0x56db5d,_0x5d7990),this[_0x45b090(0x4b5)](_0x56db5d,_0x5d7990);}else _0x14999e+='\x0a',_0x379398+=_0x2219c3[_0x45b090(0x6a4)][0x0];}},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x53a)]=function(_0x761942,_0xdd1558){},Window_PartyCommand[_0x54b1a4(0x375)]['commandNameWindowDrawText']=function(_0xec54d0,_0x4b1d06){const _0x3de6bc=_0x54b1a4,_0x58fa6b=this[_0x3de6bc(0x8a1)];_0x58fa6b[_0x3de6bc(0x733)](_0xec54d0,0x0,_0x4b1d06['y'],_0x58fa6b['innerWidth'],_0x3de6bc(0x8b9));},Window_PartyCommand['prototype'][_0x54b1a4(0x4b5)]=function(_0x23b619,_0x403f1){const _0x432d60=_0x54b1a4,_0x449f8a=this['_commandNameWindow'],_0x4ebb94=$gameSystem['windowPadding'](),_0x3604f7=_0x403f1['x']+Math[_0x432d60(0x8a3)](_0x403f1[_0x432d60(0x495)]/0x2)+_0x4ebb94;_0x449f8a['x']=_0x449f8a[_0x432d60(0x495)]/-0x2+_0x3604f7,_0x449f8a['y']=Math[_0x432d60(0x8a3)](_0x403f1[_0x432d60(0xdd7)]/0x2);},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x58b)]=function(){const _0x67ea45=_0x54b1a4;this[_0x67ea45(0x633)](),this[_0x67ea45(0xb05)](),this['addCustomCommands'](),this[_0x67ea45(0x7f8)](),this[_0x67ea45(0x9fd)]();},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x633)]=function(){const _0x4febed=_0x54b1a4,_0x49cfd6=this[_0x4febed(0x56c)](),_0x2f29ff=VisuMZ[_0x4febed(0x387)][_0x4febed(0x916)][_0x4febed(0x458)]['CmdIconFight'],_0x21298b=_0x49cfd6===_0x4febed(0xdd1)?TextManager[_0x4febed(0x399)]:_0x4febed(0x9af)[_0x4febed(0xd76)](_0x2f29ff,TextManager[_0x4febed(0x399)]),_0x5c7ba9=this[_0x4febed(0x471)]();this['addCommand'](_0x21298b,_0x4febed(0x399),_0x5c7ba9);},Window_PartyCommand[_0x54b1a4(0x375)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0xb05)]=function(){const _0x27f2ad=_0x54b1a4;if(!this[_0x27f2ad(0x281)]())return;const _0x5b5924=this[_0x27f2ad(0x56c)](),_0x3654c5=VisuMZ[_0x27f2ad(0x387)][_0x27f2ad(0x916)][_0x27f2ad(0x458)][_0x27f2ad(0xb9f)],_0x5a2b6b=_0x5b5924==='text'?TextManager['autoBattle']:_0x27f2ad(0x9af)[_0x27f2ad(0xd76)](_0x3654c5,TextManager[_0x27f2ad(0xb28)]),_0x5810c8=this[_0x27f2ad(0x201)]();this[_0x27f2ad(0x59f)](_0x5a2b6b,_0x27f2ad(0xb28),_0x5810c8);},Window_PartyCommand['prototype'][_0x54b1a4(0x281)]=function(){const _0x3881f1=_0x54b1a4;return VisuMZ[_0x3881f1(0x387)]['Settings'][_0x3881f1(0x458)][_0x3881f1(0xda7)];},Window_PartyCommand[_0x54b1a4(0x375)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype'][_0x54b1a4(0x725)]=function(){},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x7f8)]=function(){const _0x10c0ab=_0x54b1a4;if(!this['isOptionsCommandAdded']())return;const _0x4d80ea=this[_0x10c0ab(0x56c)](),_0x24329d=VisuMZ['BattleCore'][_0x10c0ab(0x916)]['PartyCmd']['CmdIconOptions'],_0x3c9630=_0x4d80ea===_0x10c0ab(0xdd1)?TextManager[_0x10c0ab(0x891)]:_0x10c0ab(0x9af)['format'](_0x24329d,TextManager[_0x10c0ab(0x891)]),_0x18b2c9=this[_0x10c0ab(0x68f)]();this[_0x10c0ab(0x59f)](_0x3c9630,_0x10c0ab(0x891),_0x18b2c9);},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0xc76)]=function(){const _0x3795ca=_0x54b1a4;return VisuMZ[_0x3795ca(0x387)][_0x3795ca(0x916)][_0x3795ca(0x458)]['CommandAddOptions'];},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x68f)]=function(){return!![];},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x9fd)]=function(){const _0x58107f=_0x54b1a4,_0x4f400e=this[_0x58107f(0x56c)](),_0x1abf0f=VisuMZ[_0x58107f(0x387)][_0x58107f(0x916)]['PartyCmd']['CmdIconEscape'],_0xea27fd=_0x4f400e===_0x58107f(0xdd1)?TextManager['escape']:_0x58107f(0x9af)[_0x58107f(0xd76)](_0x1abf0f,TextManager['escape']),_0x44b57d=this['isEscapeCommandEnabled']();this[_0x58107f(0x59f)](_0xea27fd,_0x58107f(0x81e),_0x44b57d);},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x205)]=function(){const _0x5a5d7a=_0x54b1a4;return BattleManager[_0x5a5d7a(0x9a3)]();},Window_PartyCommand['prototype'][_0x54b1a4(0x5c9)]=function(){const _0x25948f=_0x54b1a4;return VisuMZ[_0x25948f(0x387)]['Settings']['PartyCmd'][_0x25948f(0x571)];},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x34c)]=function(_0x45ecf8){const _0x82f87a=_0x54b1a4,_0x208845=this[_0x82f87a(0x92f)](_0x45ecf8);if(_0x208845==='iconText')this['drawItemStyleIconText'](_0x45ecf8);else _0x208845===_0x82f87a(0x256)?this[_0x82f87a(0x2bf)](_0x45ecf8):Window_Command[_0x82f87a(0x375)][_0x82f87a(0x34c)]['call'](this,_0x45ecf8);},Window_PartyCommand[_0x54b1a4(0x375)]['commandStyle']=function(){const _0x5ee06e=_0x54b1a4;return VisuMZ[_0x5ee06e(0x387)][_0x5ee06e(0x916)][_0x5ee06e(0x458)][_0x5ee06e(0x538)];},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x92f)]=function(_0x408015){const _0x34ee25=_0x54b1a4;if(_0x408015<0x0)return'text';const _0x5b2cf6=this[_0x34ee25(0x56c)]();if(_0x5b2cf6!=='auto'){if(_0x34ee25(0xb3e)===_0x34ee25(0xb3e))return _0x5b2cf6;else{const _0x377780=_0x1a9d51[_0x1abc80];if(_0x377780){if(_0x377780[_0x34ee25(0xd77)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x41d64e=_0x163c86(_0x2002c7['$1'])['split'](/[\r\n]+/)[_0x34ee25(0xd79)](''),_0x3a49bc=this[_0x34ee25(0x9eb)](_0x41d64e);_0x140865=this[_0x34ee25(0x726)](_0x3a49bc)||_0x338d1f,_0x40a555=_0x2b565e[_0x34ee25(0xae4)](_0x4f12b7);}}return _0x27aa06;}}else{if(this[_0x34ee25(0xa6e)]()>0x0){const _0x3ad7da=this[_0x34ee25(0xa51)](_0x408015);if(_0x3ad7da[_0x34ee25(0x298)](/\\I\[(\d+)\]/i)){if(_0x34ee25(0x7da)!==_0x34ee25(0x425)){const _0x30e64e=this[_0x34ee25(0x347)](_0x408015),_0x1a000e=this[_0x34ee25(0x9d8)](_0x3ad7da)[_0x34ee25(0x495)];if(_0x1a000e<=_0x30e64e[_0x34ee25(0x495)]){if(_0x34ee25(0x3f4)===_0x34ee25(0x3f4))return _0x34ee25(0x604);else _0x2b0ed9[_0x34ee25(0x809)][_0x34ee25(0x393)]=!![];}else{if(_0x34ee25(0x6f8)!==_0x34ee25(0x6f8))_0x12069e['prototype'][_0x34ee25(0xad7)][_0x34ee25(0xd6c)](this);else return _0x34ee25(0x256);}}else{if(_0x53b20e){const _0x257635=_0x1dc260[_0x34ee25(0x887)]();this[_0x34ee25(0x519)](_0x34ee25(0xae8),[_0x259ac6],_0x58a6e2,_0x15dc45),this[_0x34ee25(0x519)](_0x34ee25(0xd98),_0x52e490,_0x257635['_homeX'],_0x257635[_0x34ee25(0x96f)],_0x1dee9d,![],_0x34ee25(0xad4)),this[_0x34ee25(0x519)](_0x34ee25(0x676),[_0x34c2d9],_0x34ee25(0x482)),this[_0x34ee25(0x519)]('waitForMovement'),this[_0x34ee25(0x519)](_0x34ee25(0x676),[_0x19cfc1],_0x34ee25(0x572));}}}}}return _0x34ee25(0xdd1);},Window_PartyCommand['prototype']['drawItemStyleIconText']=function(_0x453256){const _0x214909=_0x54b1a4,_0x552252=this[_0x214909(0x347)](_0x453256),_0x12d305=this[_0x214909(0xa51)](_0x453256),_0x53d479=this[_0x214909(0x9d8)](_0x12d305)[_0x214909(0x495)];this[_0x214909(0x63a)](this[_0x214909(0x786)](_0x453256));const _0x29dcdc=this[_0x214909(0x5c9)]();if(_0x29dcdc==='right'){if(_0x214909(0x282)===_0x214909(0x282))this[_0x214909(0xb2c)](_0x12d305,_0x552252['x']+_0x552252[_0x214909(0x495)]-_0x53d479,_0x552252['y'],_0x53d479);else{_0x3e5f5e[_0x214909(0x387)]['Scene_ItemBase_applyItem'][_0x214909(0xd6c)](this);if(this[_0x214909(0x7b6)]()[_0x214909(0xd77)][_0x214909(0x298)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x214909(0x7b6)]()[_0x214909(0xd77)][_0x214909(0x298)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x147651[_0x214909(0x84a)]=[]),_0x22039a['checkAutoCustomActionSequenceNotetagEffect'](this['item']())&&(_0x4211b8[_0x214909(0x84a)]=[]);}}else{if(_0x29dcdc===_0x214909(0x8b9)){const _0xa5bef6=_0x552252['x']+Math[_0x214909(0x8a3)]((_0x552252[_0x214909(0x495)]-_0x53d479)/0x2);this['drawTextEx'](_0x12d305,_0xa5bef6,_0x552252['y'],_0x53d479);}else _0x214909(0x25c)==='nQWfv'?this[_0x214909(0x5c0)]=_0x2481c0[_0x214909(0x715)](_0x4f2084[_0x214909(0x7c8)]):this[_0x214909(0xb2c)](_0x12d305,_0x552252['x'],_0x552252['y'],_0x53d479);}},Window_PartyCommand['prototype'][_0x54b1a4(0x2bf)]=function(_0x52d7d9){const _0x2eeed0=_0x54b1a4;this[_0x2eeed0(0xa51)](_0x52d7d9)[_0x2eeed0(0x298)](/\\I\[(\d+)\]/i);const _0xa9a8e6=Number(RegExp['$1'])||0x0,_0x21edf6=this[_0x2eeed0(0x347)](_0x52d7d9),_0x519723=_0x21edf6['x']+Math[_0x2eeed0(0x8a3)]((_0x21edf6[_0x2eeed0(0x495)]-ImageManager[_0x2eeed0(0xa59)])/0x2),_0x28d4ca=_0x21edf6['y']+(_0x21edf6[_0x2eeed0(0xdd7)]-ImageManager[_0x2eeed0(0x485)])/0x2;this[_0x2eeed0(0x7f1)](_0xa9a8e6,_0x519723,_0x28d4ca);},Window_PartyCommand['prototype'][_0x54b1a4(0x5e6)]=function(){},Window_PartyCommand[_0x54b1a4(0x375)][_0x54b1a4(0x741)]=function(){const _0x226a41=_0x54b1a4;Window_Command['prototype']['activate'][_0x226a41(0xd6c)](this);const _0x557889=this[_0x226a41(0xd92)]();_0x557889===_0x226a41(0x218)&&this[_0x226a41(0x6ce)]();},Window_PartyCommand['prototype'][_0x54b1a4(0xd92)]=function(){const _0x410702=_0x54b1a4;if(this[_0x410702(0x83b)])return this[_0x410702(0x83b)];return this[_0x410702(0x83b)]=SceneManager['_scene'][_0x410702(0xd92)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x54b1a4(0x375)]['updateHelp']=function(){const _0x149dc7=_0x54b1a4,_0x594f44=VisuMZ['BattleCore']['Settings'][_0x149dc7(0x458)],_0x4aeedf=this['currentSymbol']();switch(_0x4aeedf){case _0x149dc7(0x399):this[_0x149dc7(0x59a)][_0x149dc7(0x8e3)](_0x594f44[_0x149dc7(0x970)]);break;case _0x149dc7(0xb28):this['_helpWindow'][_0x149dc7(0x8e3)](_0x594f44[_0x149dc7(0xafe)]);break;case _0x149dc7(0x891):this[_0x149dc7(0x59a)][_0x149dc7(0x8e3)](_0x594f44[_0x149dc7(0xca6)]);break;case _0x149dc7(0x81e):this[_0x149dc7(0x59a)][_0x149dc7(0x8e3)](_0x594f44[_0x149dc7(0x927)]);break;default:this[_0x149dc7(0x59a)][_0x149dc7(0x8e3)]('');break;}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x82c)]=Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)],Window_ActorCommand[_0x54b1a4(0x375)]['initialize']=function(_0xc6bb99){const _0x52d43e=_0x54b1a4;VisuMZ[_0x52d43e(0x387)][_0x52d43e(0x82c)]['call'](this,_0xc6bb99),this[_0x52d43e(0x72d)](_0xc6bb99);},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x72d)]=function(_0x694c72){const _0x3bb2c3=_0x54b1a4,_0x1e7316=new Rectangle(0x0,0x0,_0x694c72[_0x3bb2c3(0x495)],_0x694c72[_0x3bb2c3(0xdd7)]);this[_0x3bb2c3(0x8a1)]=new Window_Base(_0x1e7316),this['_commandNameWindow'][_0x3bb2c3(0x9e2)]=0x0,this[_0x3bb2c3(0x6a8)](this[_0x3bb2c3(0x8a1)]),this[_0x3bb2c3(0x25e)]();},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x815)]=function(){const _0x5942eb=_0x54b1a4;Window_Command[_0x5942eb(0x375)][_0x5942eb(0x815)]['call'](this);if(this['_commandNameWindow'])this[_0x5942eb(0x25e)]();},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x25e)]=function(){const _0x42cbd8=_0x54b1a4,_0x7719e0=this[_0x42cbd8(0x8a1)];_0x7719e0[_0x42cbd8(0xc4e)][_0x42cbd8(0x207)]();const _0x1ffd00=this[_0x42cbd8(0x92f)](this['index']());if(_0x1ffd00===_0x42cbd8(0x256)&&this['maxItems']()>0x0){const _0x249fa0=this[_0x42cbd8(0x347)](this[_0x42cbd8(0x58f)]());let _0xf56d2=this['commandName'](this[_0x42cbd8(0x58f)]());_0xf56d2=_0xf56d2['replace'](/\\I\[(\d+)\]/gi,''),_0x7719e0[_0x42cbd8(0x213)](),this[_0x42cbd8(0x53a)](_0xf56d2,_0x249fa0),this[_0x42cbd8(0xc26)](_0xf56d2,_0x249fa0),this['commandNameWindowCenter'](_0xf56d2,_0x249fa0);}},Window_ActorCommand['prototype'][_0x54b1a4(0x53a)]=function(_0x448321,_0x17fb53){},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0xc26)]=function(_0x4a87f4,_0xb0c9ab){const _0x175380=this['_commandNameWindow'];_0x175380['drawText'](_0x4a87f4,0x0,_0xb0c9ab['y'],_0x175380['innerWidth'],'center');},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x4b5)]=function(_0x2ea301,_0x27a90a){const _0xdc7ed8=_0x54b1a4,_0x24ca53=this[_0xdc7ed8(0x8a1)],_0x5f0f80=$gameSystem[_0xdc7ed8(0x74d)](),_0x15ec5f=_0x27a90a['x']+Math[_0xdc7ed8(0x8a3)](_0x27a90a[_0xdc7ed8(0x495)]/0x2)+_0x5f0f80;_0x24ca53['x']=_0x24ca53[_0xdc7ed8(0x495)]/-0x2+_0x15ec5f,_0x24ca53['y']=Math[_0xdc7ed8(0x8a3)](_0x27a90a[_0xdc7ed8(0xdd7)]/0x2);},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x58b)]=function(){const _0x523c74=_0x54b1a4;if(!this[_0x523c74(0x2f3)])return;const _0x42eca1=this[_0x523c74(0x2f3)][_0x523c74(0x875)]();for(const _0x13a068 of _0x42eca1){this[_0x523c74(0x2db)](_0x13a068[_0x523c74(0x8fd)]()[_0x523c74(0x2f4)]());}},Window_ActorCommand['prototype'][_0x54b1a4(0x2db)]=function(_0x96824){const _0x5530d0=_0x54b1a4;_0x96824===_0x5530d0(0xb75)&&(_0x5530d0(0xd2f)===_0x5530d0(0x795)?this[_0x5530d0(0xc6a)](_0x5530d0(0x49c)):this['addAttackCommand']());['STYPES',_0x5530d0(0xa61)][_0x5530d0(0xd4a)](_0x96824)&&('aYuFE'===_0x5530d0(0x478)?_0x531fdb['BattleCore']['createJS'](_0x174adb,_0x544a15):this[_0x5530d0(0x3b9)]());_0x96824===_0x5530d0(0x974)&&(_0x5530d0(0xb54)===_0x5530d0(0xb54)?this[_0x5530d0(0x9a6)]():(_0x558e47[_0x5530d0(0x563)](),_0x4abcc0[_0x5530d0(0xcb7)]=![],_0x49630b[_0x5530d0(0x207)](),_0x2f1cb6['clear']()));if(_0x96824===_0x5530d0(0x704)){if(_0x5530d0(0xafa)!=='Devnf')this[_0x5530d0(0xa04)]();else{const _0xc7cda5=_0x327794[_0x5530d0(0x7b6)]();this[_0x5530d0(0x5d7)](_0x163851,_0x2a063e,_0x44c585),this[_0x5530d0(0xa0f)](_0x3db549,_0x4c2fb8,_0x5f5a3a),this['finishActionSet'](_0x4cb82c,_0x5d63bf,_0x807b6);}}if(_0x96824==='ESCAPE'){if(_0x5530d0(0x8b2)!==_0x5530d0(0x8b2))return this[_0x5530d0(0xbe4)][_0x5530d0(0x382)]();else this[_0x5530d0(0x9fd)]();}_0x96824===_0x5530d0(0x38b)&&this[_0x5530d0(0xb05)]();if(_0x96824[_0x5530d0(0x298)](/STYPE: (\d+)/i)){if(_0x5530d0(0xb73)===_0x5530d0(0x823)){if(this['_battleLayoutStyle'])return this[_0x5530d0(0x83b)];return this['_battleLayoutStyle']=_0x40333a[_0x5530d0(0xc22)]['battleLayoutStyle'](),this[_0x5530d0(0x83b)];}else{const _0xfc876d=Number(RegExp['$1']);this[_0x5530d0(0x327)](_0xfc876d);}}else{if(_0x96824[_0x5530d0(0x298)](/STYPE: (.*)/i)){const _0x11f670=DataManager[_0x5530d0(0x5bf)](RegExp['$1']);this[_0x5530d0(0x327)](_0x11f670);}}if(_0x96824===_0x5530d0(0x721)){if(_0x5530d0(0x630)!=='VDrox')for(const _0x2c0179 of _0x58736f){for(const _0x58d5da of _0x3309df){const _0x140c52=_0x1a89a8[0x0][_0x5530d0(0xd76)](_0x58d5da[0x0],_0x2c0179[0x0]),_0x50c261=_0x80aa6a[0x1][_0x5530d0(0xd76)](_0x58d5da[0x1],_0x2c0179[0x1])[_0x5530d0(0x2f4)](),_0x43d68a=new _0x89364c(_0x34cc18[_0x5530d0(0xd76)](_0x50c261),'i');_0xd3a539[_0x140c52]=_0x43d68a;}}else this[_0x5530d0(0x5cb)]();}if(_0x96824[_0x5530d0(0x298)](/SKILL: (\d+)/i)){const _0x24df93=Number(RegExp['$1']);this[_0x5530d0(0xbad)]($dataSkills[_0x24df93]);}else{if(_0x96824[_0x5530d0(0x298)](/SKILL: (.*)/i)){if('uFhOp'!=='uFhOp')_0x564421=!_0x19aefc;else{const _0x302ac4=DataManager[_0x5530d0(0x6c4)](RegExp['$1']);this[_0x5530d0(0xbad)]($dataSkills[_0x302ac4]);}}}_0x96824===_0x5530d0(0xd32)&&Imported[_0x5530d0(0xb72)]&&this[_0x5530d0(0xc42)](),[_0x5530d0(0x573),'COMBAT\x20LOG'][_0x5530d0(0xd4a)](_0x96824)&&Imported[_0x5530d0(0x698)]&&this[_0x5530d0(0xdd2)](),_0x96824===_0x5530d0(0x2a1)&&Imported[_0x5530d0(0x9f7)]&&this[_0x5530d0(0x9a4)](!![]),_0x96824==='GRID\x20MOVE'&&Imported[_0x5530d0(0xdb1)]&&this['addBattleGridMoveCommand']();},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0xa78)]=function(){const _0x592d4a=_0x54b1a4,_0x99791d=$dataSkills[this[_0x592d4a(0x2f3)][_0x592d4a(0xa47)]()];if(!_0x99791d)return;if(!this[_0x592d4a(0xbf1)](_0x99791d))return;const _0xfb30c9=this[_0x592d4a(0x56c)](),_0x1d24fe=DataManager[_0x592d4a(0x32e)](_0x99791d),_0x5b4754=DataManager['battleCommandIcon'](_0x99791d),_0xc254d6=_0xfb30c9===_0x592d4a(0xdd1)?_0x1d24fe:_0x592d4a(0x9af)['format'](_0x5b4754,_0x1d24fe);this['addCommand'](_0xc254d6,_0x592d4a(0x371),this['_actor'][_0x592d4a(0x534)]());},Window_ActorCommand[_0x54b1a4(0x375)]['addGuardCommand']=function(){const _0x481a80=_0x54b1a4,_0x349f07=$dataSkills[this['_actor'][_0x481a80(0x61b)]()];if(!_0x349f07)return;if(!this['canAddSkillCommand'](_0x349f07))return;const _0x366474=this[_0x481a80(0x56c)](),_0x587472=DataManager[_0x481a80(0x32e)](_0x349f07),_0x1b8b4a=DataManager[_0x481a80(0x78b)](_0x349f07),_0x3da6cf=_0x366474===_0x481a80(0xdd1)?_0x587472:_0x481a80(0x9af)[_0x481a80(0xd76)](_0x1b8b4a,_0x587472);this['addCommand'](_0x3da6cf,_0x481a80(0x890),this[_0x481a80(0x2f3)][_0x481a80(0x546)]());},Window_ActorCommand[_0x54b1a4(0x375)]['addItemCommand']=function(){const _0x3807df=_0x54b1a4,_0x4bc051=this[_0x3807df(0x56c)](),_0x4c31af=VisuMZ[_0x3807df(0x387)][_0x3807df(0x916)][_0x3807df(0x7d6)][_0x3807df(0x264)],_0x357236=_0x4bc051===_0x3807df(0xdd1)?TextManager[_0x3807df(0x7b6)]:_0x3807df(0x9af)['format'](_0x4c31af,TextManager[_0x3807df(0x7b6)]),_0x47971a=this[_0x3807df(0x3c9)]();this[_0x3807df(0x59f)](_0x357236,_0x3807df(0x7b6),_0x47971a);},Window_ActorCommand[_0x54b1a4(0x375)]['isItemCommandEnabled']=function(){const _0x11cb39=_0x54b1a4;return this[_0x11cb39(0x2f3)]&&this['_actor'][_0x11cb39(0x20a)]();},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x3b9)]=function(){const _0x1ac0b9=_0x54b1a4,_0x320cd1=this[_0x1ac0b9(0x2f3)][_0x1ac0b9(0x719)]();for(const _0x4646fc of _0x320cd1){if('JYJyP'===_0x1ac0b9(0xb57))return _0x274187(_0x29fdf5['$1']);else this['addSkillTypeCommand'](_0x4646fc);}},Window_ActorCommand['prototype'][_0x54b1a4(0x327)]=function(_0x4857f6){const _0x1aeda0=_0x54b1a4;let _0x4a81c9=$dataSystem[_0x1aeda0(0x719)][_0x4857f6];if(!_0x4a81c9)return;let _0x262985=_0x4a81c9;const _0x54114e=this['commandStyle']();if(_0x54114e===_0x1aeda0(0xdd1))'NroLh'===_0x1aeda0(0xdb9)?this[_0x1aeda0(0x71e)](_0x1a83fe,_0x190da8,_0x2df32c):(_0x262985=_0x262985[_0x1aeda0(0x68b)](/\x1I\[(\d+)\]/gi,''),_0x262985=_0x262985[_0x1aeda0(0x68b)](/\\I\[(\d+)\]/gi,''));else{if(!_0x4a81c9[_0x1aeda0(0x298)](/\\I\[(\d+)\]/i)){if(_0x1aeda0(0x21b)!==_0x1aeda0(0x21b)){if(this['constructor']===_0x534a90)return;_0x99d5f3['prototype'][_0x1aeda0(0x5e6)][_0x1aeda0(0xd6c)](this);}else{const _0x14c66f=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x1aeda0(0xc17)][_0x1aeda0(0x916)][_0x1aeda0(0x919)]:VisuMZ[_0x1aeda0(0x387)][_0x1aeda0(0x916)]['ActorCmd'],_0x4247a9=$dataSystem[_0x1aeda0(0x6cc)][_0x1aeda0(0xd4a)](_0x4857f6),_0x517002=_0x4247a9?_0x14c66f[_0x1aeda0(0x2b6)]:_0x14c66f[_0x1aeda0(0xbb2)];_0x262985=_0x1aeda0(0x9af)[_0x1aeda0(0xd76)](_0x517002,_0x4a81c9);}}}this[_0x1aeda0(0x59f)](_0x262985,_0x1aeda0(0x4ae),!![],_0x4857f6);},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x5cb)]=function(){const _0x220d7e=_0x54b1a4,_0x4094cc=this[_0x220d7e(0x2f3)][_0x220d7e(0x719)](),_0x43c2b1=this[_0x220d7e(0x2f3)][_0x220d7e(0x32f)]();for(const _0x32b9a6 of _0x43c2b1){if(_0x220d7e(0xd5c)===_0x220d7e(0xd5c)){if(!_0x32b9a6)continue;if(Imported[_0x220d7e(0x5aa)]){if(this['noSimilarSTypes'](_0x32b9a6))continue;if(this[_0x220d7e(0x780)](_0x32b9a6))continue;}else{if(!_0x4094cc['includes'](_0x32b9a6[_0x220d7e(0x6c8)])){if(_0x220d7e(0xc7b)!==_0x220d7e(0x607))continue;else{if(this['battleStatusSprite'])return;}}}this[_0x220d7e(0xbad)](_0x32b9a6);}else{if(this[_0x220d7e(0x556)]<=0x0)return;if(!this[_0x220d7e(0x267)])return;const _0x3ed408=this[_0x220d7e(0x556)],_0x17d470=this[_0x220d7e(0x37b)],_0xa3f4ff=this[_0x220d7e(0x8ad)],_0x389abf=this[_0x220d7e(0x267)];_0x2c0466[_0x220d7e(0x2e5)]?(_0x389abf[_0x220d7e(0xb56)]['x']=this[_0x220d7e(0x8e0)](_0x389abf['skew']['x'],this['_targetSkewX'],_0x3ed408,_0x17d470,_0xa3f4ff),_0x389abf[_0x220d7e(0xb56)]['y']=this[_0x220d7e(0x8e0)](_0x389abf['skew']['y'],this['_targetSkewY'],_0x3ed408,_0x17d470,_0xa3f4ff)):(_0x389abf[_0x220d7e(0xb56)]['x']=(_0x389abf[_0x220d7e(0xb56)]['x']*(_0x3ed408-0x1)+this[_0x220d7e(0xdbb)])/_0x3ed408,_0x389abf[_0x220d7e(0xb56)]['y']=(_0x389abf[_0x220d7e(0xb56)]['y']*(_0x3ed408-0x1)+this[_0x220d7e(0x81a)])/_0x3ed408);this[_0x220d7e(0x556)]--;if(this[_0x220d7e(0x556)]<=0x0)this[_0x220d7e(0xda5)]();}}},Window_ActorCommand['prototype'][_0x54b1a4(0x80b)]=function(_0x249805){const _0x3e832f=_0x54b1a4,_0x191848=this[_0x3e832f(0x2f3)]['skillTypes'](),_0x486b60=_0x191848['filter'](_0x2fd7a3=>DataManager['getSkillTypes'](_0x249805)[_0x3e832f(0xd4a)](_0x2fd7a3));return _0x486b60[_0x3e832f(0x69d)]<=0x0;},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x780)]=function(_0xbac333){const _0x25e0c3=_0x54b1a4;if(Imported[_0x25e0c3(0x5aa)]){if(VisuMZ[_0x25e0c3(0xc17)][_0x25e0c3(0xc92)]>=1.24){if(this['_actor']){if(!VisuMZ['SkillsStatesCore']['CheckVisibleBattleNotetags'](this[_0x25e0c3(0x2f3)],_0xbac333))return!![];if(!VisuMZ[_0x25e0c3(0xc17)]['CheckVisibleSwitchNotetags'](this[_0x25e0c3(0x2f3)],_0xbac333))return!![];if(!VisuMZ[_0x25e0c3(0xc17)][_0x25e0c3(0xca7)](this[_0x25e0c3(0x2f3)],_0xbac333))return!![];}}else{if(!Window_SkillList[_0x25e0c3(0x375)][_0x25e0c3(0x8ef)][_0x25e0c3(0xd6c)](this,_0xbac333))return!![];if(!Window_SkillList[_0x25e0c3(0x375)][_0x25e0c3(0xdcb)][_0x25e0c3(0xd6c)](this,_0xbac333))return!![];if(!Window_SkillList[_0x25e0c3(0x375)]['checkShowHideSkillNotetags']['call'](this,_0xbac333))return!![];}}return![];},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0xbad)]=function(_0xe49980){const _0x3b4302=_0x54b1a4;if(!_0xe49980)return;if(!this['canAddSkillCommand'](_0xe49980))return;const _0x594a0d=this[_0x3b4302(0x56c)](),_0x3d555a=DataManager['battleCommandName'](_0xe49980),_0x351b89=DataManager[_0x3b4302(0x78b)](_0xe49980),_0x505366=_0x594a0d===_0x3b4302(0xdd1)?_0x3d555a:'\x5cI[%1]%2'['format'](_0x351b89,_0x3d555a),_0x1f4f56=this[_0x3b4302(0x2f3)][_0x3b4302(0x453)](_0xe49980);this[_0x3b4302(0x59f)](_0x505366,_0x3b4302(0x441),_0x1f4f56,_0xe49980['id']);},Window_ActorCommand['prototype'][_0x54b1a4(0xbf1)]=function(_0x4ae7d9){const _0x1624f7=_0x54b1a4,_0x340bb9=_0x4ae7d9['note'];if(_0x340bb9['match'](/<COMMAND REQUIRE LEARN>/i)){if(_0x1624f7(0x785)!==_0x1624f7(0xccc)){if(!this['_actor'][_0x1624f7(0xdc5)](_0x4ae7d9['id']))return![];}else!_0x13d63c['battleMembers']()[_0x1624f7(0xd4a)](this[_0x1624f7(0x3a0)])&&(this['_tpbSceneChangeCacheActor']=null),this['_tpbSceneChangeCacheActor']?(this[_0x1624f7(0xc15)]=this[_0x1624f7(0x3a0)],this['_currentActor'][_0x1624f7(0xa93)]='charged',this[_0x1624f7(0x2e1)]=!![],this[_0x1624f7(0x3a0)]=null):(this[_0x1624f7(0xc9a)](),this[_0x1624f7(0xc15)]=null,this[_0x1624f7(0x2e1)]=![]);}if(_0x340bb9[_0x1624f7(0x298)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x1624f7(0x95b)===_0x1624f7(0xae2))_0x44e08f[_0x1624f7(0x387)][_0x1624f7(0x872)][_0x1624f7(0xd6c)](this,_0x4c281f),this[_0x1624f7(0xc3c)]()&&_0x4fb1e9===this[_0x1624f7(0x243)]()&&this[_0x1624f7(0x6a2)]()&&(this[_0x1624f7(0xd78)]=![]),!this[_0x1624f7(0xbe7)]&&!this[_0x1624f7(0x774)]&&_0xef656b[_0x1624f7(0xbbd)]()&&this[_0x1624f7(0x59e)]();else{if(!this['_actor'][_0x1624f7(0x390)](_0x4ae7d9['id']))return![];}}const _0x53cffd=VisuMZ['BattleCore'][_0x1624f7(0x82a)](_0x4ae7d9,'CommandVisible');if(VisuMZ[_0x1624f7(0x387)]['JS'][_0x53cffd]){if(!VisuMZ[_0x1624f7(0x387)]['JS'][_0x53cffd][_0x1624f7(0xd6c)](this,this[_0x1624f7(0x2f3)],_0x4ae7d9))return![];}return VisuMZ[_0x1624f7(0x387)][_0x1624f7(0x834)](_0x4ae7d9);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x834)]=function(_0x444511){const _0x6831b9=_0x54b1a4,_0x4755e9=_0x444511['note'];if(_0x4755e9['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('ZDCST'===_0x6831b9(0x4ed)){const _0x4d0c84=JSON[_0x6831b9(0xb06)]('['+RegExp['$1'][_0x6831b9(0x298)](/\d+/g)+']');for(const _0x21dbe0 of _0x4d0c84){if(_0x6831b9(0x813)==='BmMcv'){if(!_0xc61e88[_0x6831b9(0xbbd)]())return;_0x375792[_0x6831b9(0x97a)](_0x317e4a,_0x103810);const _0x3ccd25=_0x16dd5e[_0x6831b9(0x859)](),_0x269451=_0x5e9b31['_subject'],_0x561782=_0x2b86a6[_0x6831b9(0xca4)](_0x2c1fea[_0x6831b9(0x2f2)]),_0x21ce11=_0x327ab6[_0x6831b9(0x457)],_0x1677fe=_0x2aec47[_0x6831b9(0x82e)];if(!_0x3ccd25||!_0x269451)return;const _0x2db842=_0x269451[_0x6831b9(0xba3)]();_0xcedc7a['requestAnimation'](_0x561782,_0x2db842,_0x21ce11),_0x377809[_0x6831b9(0xb83)]&&_0x3ccd25[_0x6831b9(0xc6a)](_0x6831b9(0xb2b));}else{if(!$gameSwitches[_0x6831b9(0x9e0)](_0x21dbe0))return![];}}return!![];}else return _0x233b9d['aliveMembers']();}if(_0x4755e9['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3a3101=JSON[_0x6831b9(0xb06)]('['+RegExp['$1'][_0x6831b9(0x298)](/\d+/g)+']');for(const _0x3150fe of _0x3a3101){if(!$gameSwitches['value'](_0x3150fe))return![];}return!![];}if(_0x4755e9[_0x6831b9(0x298)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x6831b9(0x27c)===_0x6831b9(0x27c)){const _0x3d5b5a=JSON[_0x6831b9(0xb06)]('['+RegExp['$1'][_0x6831b9(0x298)](/\d+/g)+']');for(const _0x5dbf95 of _0x3d5b5a){if(_0x6831b9(0x7e1)==='duTvx'){if($gameSwitches[_0x6831b9(0x9e0)](_0x5dbf95))return!![];}else{const _0xfaa6f3=_0x39ae28(_0x5a87da['$1'])['split'](/[\r\n]+/)[_0x6831b9(0xd79)]('');_0x12b215[_0x6831b9(0x56b)]=_0x1cfb27[_0x6831b9(0x9eb)](_0xfaa6f3);}}return![];}else this['_distortionSprite'][_0x6831b9(0x6a8)](this[_0x6831b9(0x259)]);}if(_0x4755e9[_0x6831b9(0x298)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('DOwrt'==='tftSC')return _0x364ca3['BattleCore'][_0x6831b9(0x727)]['call'](this);else{const _0x685ccd=JSON[_0x6831b9(0xb06)]('['+RegExp['$1'][_0x6831b9(0x298)](/\d+/g)+']');for(const _0x100924 of _0x685ccd){if(!$gameSwitches[_0x6831b9(0x9e0)](_0x100924))return!![];}return![];}}if(_0x4755e9['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x6831b9(0x893)===_0x6831b9(0x893)){const _0x540659=JSON[_0x6831b9(0xb06)]('['+RegExp['$1'][_0x6831b9(0x298)](/\d+/g)+']');for(const _0xc0592 of _0x540659){if('IeTDW'===_0x6831b9(0x7ca))this[_0x6831b9(0xcbd)]=new _0x5a5ae1(),this[_0x6831b9(0xcbd)][_0x6831b9(0x389)]=[new _0xa04471['filters'][(_0x6831b9(0xd69))]()],this[_0x6831b9(0xcbd)][_0x6831b9(0xc5e)]=new _0x575d1d(),this['_cursorArea'][_0x6831b9(0xab8)](this[_0x6831b9(0x525)],this['_padding']),this[_0x6831b9(0x6a8)](this[_0x6831b9(0xcbd)]);else{if(!$gameSwitches[_0x6831b9(0x9e0)](_0xc0592))return!![];}}return![];}else _0x51947a(_0x6831b9(0xcb1)[_0x6831b9(0xd76)](_0x461cde,_0x439aa7)),_0x21cf37[_0x6831b9(0x3ca)]();}if(_0x4755e9[_0x6831b9(0x298)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x11cbfd=JSON[_0x6831b9(0xb06)]('['+RegExp['$1'][_0x6831b9(0x298)](/\d+/g)+']');for(const _0x51d411 of _0x11cbfd){if($gameSwitches[_0x6831b9(0x9e0)](_0x51d411))return![];}return!![];}return!![];},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x9fd)]=function(){const _0x5a6810=_0x54b1a4,_0x3b3369=this[_0x5a6810(0x56c)](),_0x299cb6=VisuMZ['BattleCore'][_0x5a6810(0x916)]['PartyCmd'][_0x5a6810(0x4a6)],_0x3bbdf9=_0x3b3369===_0x5a6810(0xdd1)?TextManager[_0x5a6810(0x81e)]:_0x5a6810(0x9af)[_0x5a6810(0xd76)](_0x299cb6,TextManager['escape']),_0x589e67=this[_0x5a6810(0x205)]();this[_0x5a6810(0x59f)](_0x3bbdf9,'escape',_0x589e67);},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x205)]=function(){const _0x1b08fc=_0x54b1a4;return BattleManager[_0x1b08fc(0x9a3)]();},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0xb05)]=function(){const _0x4eabdd=_0x54b1a4,_0x4acbf5=this['commandStyle'](),_0x438e30=VisuMZ[_0x4eabdd(0x387)]['Settings'][_0x4eabdd(0x458)][_0x4eabdd(0xb9f)],_0x4ea1f9=_0x4acbf5===_0x4eabdd(0xdd1)?TextManager['autoBattle']:_0x4eabdd(0x9af)[_0x4eabdd(0xd76)](_0x438e30,TextManager[_0x4eabdd(0xb28)]),_0xa6c451=this[_0x4eabdd(0x201)]();this['addCommand'](_0x4ea1f9,'autoBattle',_0xa6c451);},Window_ActorCommand[_0x54b1a4(0x375)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x5c9)]=function(){const _0x4f5bc=_0x54b1a4;return VisuMZ['BattleCore'][_0x4f5bc(0x916)]['ActorCmd'][_0x4f5bc(0x571)];},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x34c)]=function(_0x3f2f14){const _0x4bc675=_0x54b1a4,_0x4e1951=this[_0x4bc675(0x92f)](_0x3f2f14);if(_0x4e1951==='iconText')'ExwLd'===_0x4bc675(0xb82)?(_0x5b7222=_0x3cfebd(_0x190000['$1']),_0x152031=_0x5562ff(_0x36fe8f['$2'])):this[_0x4bc675(0x5a6)](_0x3f2f14);else{if(_0x4e1951===_0x4bc675(0x256))this['drawItemStyleIcon'](_0x3f2f14);else{if(_0x4bc675(0x438)==='MOaRd'){if(_0x17eab4)_0x2b170a[_0x4bc675(0x506)](_0x531b78);}else Window_Command['prototype']['drawItem']['call'](this,_0x3f2f14);}}this['drawSingleSkillCost'](_0x3f2f14);},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x56c)]=function(){const _0x48f7f8=_0x54b1a4;return VisuMZ[_0x48f7f8(0x387)][_0x48f7f8(0x916)][_0x48f7f8(0x7d6)][_0x48f7f8(0x538)];},Window_ActorCommand[_0x54b1a4(0x375)]['commandStyleCheck']=function(_0x5e5ae9){const _0x5f5113=_0x54b1a4;if(_0x5e5ae9<0x0)return _0x5f5113(0xdd1);const _0x26bff5=this[_0x5f5113(0x56c)]();if(_0x26bff5!=='auto')return _0x26bff5;else{if(this[_0x5f5113(0xa6e)]()>0x0){if(_0x5f5113(0x6ec)!==_0x5f5113(0x6ec))_0x98f2ac[_0x5f5113(0x995)]=_0x2699ff,_0xaf449f['setBattler'](this);else{const _0x3bec51=this[_0x5f5113(0xa51)](_0x5e5ae9);if(_0x3bec51[_0x5f5113(0x298)](/\\I\[(\d+)\]/i)){if(_0x5f5113(0xc24)!=='nMFup'){const _0x4b626f=this['itemLineRect'](_0x5e5ae9),_0xbd08be=this[_0x5f5113(0x9d8)](_0x3bec51)['width'];if(_0xbd08be<=_0x4b626f[_0x5f5113(0x495)])return _0x5f5113(0x604);else{if('HaGCe'===_0x5f5113(0xd8d))_0x18e024[_0x5f5113(0x387)][_0x5f5113(0x381)][_0x5f5113(0xd6c)](this),this[_0x5f5113(0xa5a)]=[];else return _0x5f5113(0x256);}}else{let _0x76d623=_0x170ef0[_0x5f5113(0x627)];_0x4e729a/=_0x76d623['length'],this[_0x5f5113(0x8a7)]()&&(_0xdcb550*=this['subject']()['attackTimesAdd']()+0x1),_0x254e4d=_0x1abbe1>0x0?_0x70b090[_0x5f5113(0x8c0)](_0x4b112b):_0xf310d4[_0x5f5113(0x8a3)](_0x1c5ba0);}}}}}return _0x5f5113(0xdd1);},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x5a6)]=function(_0x19417c){const _0x3b0cba=_0x54b1a4,_0xc7ee47=this[_0x3b0cba(0x347)](_0x19417c),_0x398f2e=this[_0x3b0cba(0xa51)](_0x19417c),_0x59878e=this[_0x3b0cba(0x9d8)](_0x398f2e)['width'];this[_0x3b0cba(0x63a)](this['isCommandEnabled'](_0x19417c));const _0x28738d=this[_0x3b0cba(0x5c9)]();if(_0x28738d===_0x3b0cba(0x5ff))this[_0x3b0cba(0xb2c)](_0x398f2e,_0xc7ee47['x']+_0xc7ee47[_0x3b0cba(0x495)]-_0x59878e,_0xc7ee47['y'],_0x59878e);else{if(_0x28738d==='center'){const _0x1ff589=_0xc7ee47['x']+Math[_0x3b0cba(0x8a3)]((_0xc7ee47[_0x3b0cba(0x495)]-_0x59878e)/0x2);this[_0x3b0cba(0xb2c)](_0x398f2e,_0x1ff589,_0xc7ee47['y'],_0x59878e);}else{if(_0x3b0cba(0x23d)!==_0x3b0cba(0x23d)){if(_0x532187[_0x3b0cba(0x5cc)]===0x0)this['requestMotion']('thrust');else{if(_0x151d43[_0x3b0cba(0x5cc)]===0x1)this[_0x3b0cba(0x676)](_0x3b0cba(0x3c3));else _0x5e7e5a['type']===0x2&&this[_0x3b0cba(0x676)]('missile');}this[_0x3b0cba(0x4c6)](_0x3c4cdd[_0x3b0cba(0xb16)]);}else this['drawTextEx'](_0x398f2e,_0xc7ee47['x'],_0xc7ee47['y'],_0x59878e);}}},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x2bf)]=function(_0x473f8e){const _0x1609ca=_0x54b1a4;this[_0x1609ca(0xa51)](_0x473f8e)[_0x1609ca(0x298)](/\\I\[(\d+)\]/i);const _0x494224=Number(RegExp['$1'])||0x0,_0x1483ee=this['itemLineRect'](_0x473f8e),_0x38f668=_0x1483ee['x']+Math[_0x1609ca(0x8a3)]((_0x1483ee[_0x1609ca(0x495)]-ImageManager[_0x1609ca(0xa59)])/0x2),_0x2eaaac=_0x1483ee['y']+(_0x1483ee[_0x1609ca(0xdd7)]-ImageManager[_0x1609ca(0x485)])/0x2;this[_0x1609ca(0x7f1)](_0x494224,_0x38f668,_0x2eaaac);},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x7b4)]=function(_0x35a5e2){const _0x458eb2=_0x54b1a4;if(!(VisuMZ['BattleCore'][_0x458eb2(0x916)][_0x458eb2(0x7d6)][_0x458eb2(0x83e)]??!![]))return;const _0x2c8e00=this[_0x458eb2(0xba5)](_0x35a5e2);if(![_0x458eb2(0x371),'guard','singleSkill'][_0x458eb2(0xd4a)](_0x2c8e00))return;const _0xf1201c=this[_0x458eb2(0x347)](_0x35a5e2);let _0x1301d5=null;if(_0x2c8e00===_0x458eb2(0x371))_0x1301d5=$dataSkills[this[_0x458eb2(0x2f3)][_0x458eb2(0xa47)]()];else{if(_0x2c8e00==='guard')_0x1301d5=$dataSkills[this[_0x458eb2(0x2f3)][_0x458eb2(0x61b)]()];else{if(_0x458eb2(0x918)==='mMCRR')_0x1301d5=$dataSkills[this[_0x458eb2(0x8c3)][_0x35a5e2]['ext']];else return _0x4cb606[_0x458eb2(0x887)]()['_baseX']-_0x24c06d[_0x458eb2(0x887)]()[_0x458eb2(0xc43)];}}this[_0x458eb2(0xbd6)](this['_actor'],_0x1301d5,_0xf1201c['x'],_0xf1201c['y'],_0xf1201c[_0x458eb2(0x495)]);},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0xbd6)]=function(_0x4046d4,_0x476b31,_0x39d26e,_0x9ac58,_0x1c696d){const _0x38aad6=_0x54b1a4;if(!_0x476b31)return;Imported[_0x38aad6(0x5aa)]?Window_Command[_0x38aad6(0x375)][_0x38aad6(0xbd6)]['call'](this,_0x4046d4,_0x476b31,_0x39d26e,_0x9ac58,_0x1c696d):_0x38aad6(0x475)!==_0x38aad6(0x960)?Window_SkillList[_0x38aad6(0x375)][_0x38aad6(0xbd6)][_0x38aad6(0xd6c)](this,_0x476b31,_0x39d26e,_0x9ac58,_0x1c696d):(this[_0x38aad6(0x7a4)](_0x1c470e),this['showHelpWindow']());},Window_ActorCommand['prototype'][_0x54b1a4(0x5e6)]=function(){},Window_ActorCommand[_0x54b1a4(0x375)]['activate']=function(){const _0x5773f3=_0x54b1a4;Window_Command[_0x5773f3(0x375)]['activate'][_0x5773f3(0xd6c)](this);const _0x2dd9ad=this[_0x5773f3(0xd92)]();if(_0x2dd9ad===_0x5773f3(0x218)){if(_0x5773f3(0x81c)!==_0x5773f3(0x81c))return _0x5d288(_0x406e9d['$1'])/0x64;else this['showHelpWindow']();}},Window_ActorCommand[_0x54b1a4(0x375)]['battleLayoutStyle']=function(){const _0x603369=_0x54b1a4;if(this[_0x603369(0x83b)])return this[_0x603369(0x83b)];return this[_0x603369(0x83b)]=SceneManager[_0x603369(0xc22)][_0x603369(0xd92)](),this[_0x603369(0x83b)];},VisuMZ['BattleCore'][_0x54b1a4(0x3f5)]=Window_ActorCommand[_0x54b1a4(0x375)]['setup'],Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x915)]=function(_0x51c255){const _0x5b7694=_0x54b1a4,_0x2feac9=this[_0x5b7694(0xd92)]();if(_0x51c255&&['xp','portrait']['includes'](_0x2feac9)){if('WvUXc'===_0x5b7694(0x454))return _0x135578[_0x5b7694(0x387)][_0x5b7694(0x916)][_0x5b7694(0x458)][_0x5b7694(0x8ca)];else this[_0x5b7694(0x30a)](_0x51c255);}else _0x51c255&&[_0x5b7694(0x218)]['includes'](_0x2feac9)&&(this[_0x5b7694(0x7a4)](_0x51c255),this[_0x5b7694(0x6ce)]());VisuMZ[_0x5b7694(0x387)]['Window_ActorCommand_setup'][_0x5b7694(0xd6c)](this,_0x51c255);if(_0x51c255&&$gameTroop['aliveMembers']()['length']>0x0&&_0x51c255[_0x5b7694(0x887)]()){if(_0x5b7694(0xbde)===_0x5b7694(0xcda)){const _0x39877f=_0x556d83[_0x5b7694(0xae0)]()?-0x1:0x1;let _0x53cf8a=this[_0x5b7694(0xc43)];_0x53cf8a+=this[_0x5b7694(0xb24)]();let _0x5b7d27=this['_baseY'];const _0x4e64ac=this['_distortionSprite']['scale']['y'];_0x5b7d27+=this[_0x5b7694(0x221)]();const _0x5bdb3b=_0x18f76b['_scene'][_0x5b7694(0x89f)];if(_0x5bdb3b&&this[_0x5b7694(0x7bd)]===_0x5bdb3b){_0x53cf8a+=_0x5bdb3b['x']-this[_0x5b7694(0x9a0)]();const _0xb6be9f=_0x5bdb3b[_0x5b7694(0xd04)]()*0x3/0x4;_0x5b7d27=_0x5bdb3b['y']+_0xb6be9f,_0x5b7d27=_0x3cd715[_0x5b7694(0x41c)](_0x5b7d27,_0x5bdb3b['y']+this['y']-this[_0x5b7694(0xdd7)]+_0xb6be9f);}_0x5b49ea['x']=_0x353330[_0x5b7694(0x68d)](_0x53cf8a+this[_0x5b7694(0x9a0)]()*_0x39877f),_0x26ac29['y']=_0x507461['round'](_0x5b7d27+this[_0x5b7694(0x356)]());}else _0x51c255['battler']()[_0x5b7694(0xadb)]();}},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x30a)]=function(_0x44d6bd){const _0x2b01b5=_0x54b1a4,_0x7dd4a=Math[_0x2b01b5(0x68d)](Graphics[_0x2b01b5(0xb36)]/0x3),_0x3b5721=Math[_0x2b01b5(0x68d)](Graphics['boxWidth']/$gameParty['battleMembers']()[_0x2b01b5(0x69d)]),_0x27a8ea=Math[_0x2b01b5(0x41c)](_0x7dd4a,_0x3b5721),_0x5b9e58=this[_0x2b01b5(0xcbb)](VisuMZ['BattleCore'][_0x2b01b5(0x916)][_0x2b01b5(0x6f0)][_0x2b01b5(0x66d)]),_0xbe6c58=Math[_0x2b01b5(0x68d)](_0x3b5721*_0x44d6bd[_0x2b01b5(0x58f)]())+Math[_0x2b01b5(0x68d)]((_0x3b5721-_0x27a8ea)/0x2),_0x205067=Math[_0x2b01b5(0x68d)](SceneManager['_scene']['_statusWindow']['y']-_0x5b9e58);this[_0x2b01b5(0xab8)](_0xbe6c58,_0x205067,_0x27a8ea,_0x5b9e58),this[_0x2b01b5(0x76c)](),this[_0x2b01b5(0xb88)](0x1);},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x7a4)]=function(_0x30d4a3){const _0x39dc1e=_0x54b1a4,_0x1f2398=SceneManager[_0x39dc1e(0xc22)][_0x39dc1e(0x414)]();this[_0x39dc1e(0xab8)](_0x1f2398['x'],_0x1f2398['y'],_0x1f2398['width'],_0x1f2398[_0x39dc1e(0xdd7)]),this['createContents'](),this[_0x39dc1e(0xb88)](0x0);},Window_ActorCommand['prototype'][_0x54b1a4(0x958)]=function(){const _0x16ea65=_0x54b1a4;if(this[_0x16ea65(0x818)]){const _0x1b407f=this[_0x16ea65(0x818)][_0x16ea65(0x65b)],_0x4dc0a7=this[_0x16ea65(0x495)]-0x8,_0xdf9854=this[_0x16ea65(0xdd7)],_0x2632fa=this[_0x16ea65(0xaa3)],_0x46a62f=ColorManager[_0x16ea65(0x469)](),_0x3608fd=ColorManager['dimColor2']();this['_dimmerSprite']['x']=0x4,_0x1b407f[_0x16ea65(0x985)](_0x4dc0a7,_0xdf9854),_0x1b407f[_0x16ea65(0x4ef)](0x0,0x0,_0x4dc0a7,_0x2632fa,_0x3608fd,_0x46a62f,!![]),_0x1b407f['fillRect'](0x0,_0x2632fa,_0x4dc0a7,_0xdf9854-_0x2632fa*0x2,_0x46a62f),_0x1b407f[_0x16ea65(0x4ef)](0x0,_0xdf9854-_0x2632fa,_0x4dc0a7,_0x2632fa,_0x46a62f,_0x3608fd,!![]),this[_0x16ea65(0x818)]['setFrame'](0x0,0x0,_0x4dc0a7,_0xdf9854);}},Window_ActorCommand[_0x54b1a4(0x375)][_0x54b1a4(0x8b4)]=function(){const _0x6419d3=_0x54b1a4;if(!this[_0x6419d3(0x2f3)])return;const _0x435dda=VisuMZ[_0x6419d3(0x387)][_0x6419d3(0x916)][_0x6419d3(0x7d6)],_0x1b37e3=this[_0x6419d3(0x3ed)]();switch(_0x1b37e3){case _0x6419d3(0x371):this['setHelpWindowItem']($dataSkills[this['_actor']['attackSkillId']()]);break;case _0x6419d3(0x890):this['setHelpWindowItem']($dataSkills[this[_0x6419d3(0x2f3)][_0x6419d3(0x61b)]()]);break;case'skill':const _0x2f581a=_0x435dda[_0x6419d3(0x95a)],_0xfda55b=_0x2f581a[_0x6419d3(0xd76)]($dataSystem[_0x6419d3(0x719)][this[_0x6419d3(0xaa1)]()]);this['_helpWindow']['setText'](_0xfda55b);break;case _0x6419d3(0x441):this[_0x6419d3(0xaf8)]($dataSkills[this[_0x6419d3(0xaa1)]()]);break;case'item':this['_helpWindow'][_0x6419d3(0x8e3)](_0x435dda[_0x6419d3(0x210)]);break;case _0x6419d3(0x81e):this[_0x6419d3(0x59a)][_0x6419d3(0x8e3)](_0x435dda[_0x6419d3(0x927)]);break;case _0x6419d3(0xb28):this[_0x6419d3(0x59a)]['setText'](_0x435dda[_0x6419d3(0xafe)]);break;default:this[_0x6419d3(0x59a)]['setText']('');break;}},Window_ActorCommand[_0x54b1a4(0x375)]['selectLast']=function(){const _0x2580cf=_0x54b1a4;this[_0x2580cf(0x621)](0x0);if(this[_0x2580cf(0x2f3)]&&ConfigManager['commandRemember']){const _0x3e8d9f=this[_0x2580cf(0x2f3)][_0x2580cf(0xd15)]();this[_0x2580cf(0x314)](_0x3e8d9f);if(_0x3e8d9f==='skill'){const _0x1910a3=this[_0x2580cf(0x2f3)]['lastBattleSkill']();if(_0x1910a3){if('CjclS'!==_0x2580cf(0xdc3)){if(!this['_battler']['isSpriteVisible']())return;if(_0x4d2682[_0x2580cf(0x570)]())return;const _0x4e795a=_0x37ffc2['BattleCore'][_0x2580cf(0x916)][_0x2580cf(0x5f5)],_0x26417d=new _0x38e421();_0x26417d[_0x2580cf(0x9fc)]=_0x4e795a[_0x2580cf(0x3df)],this[_0x2580cf(0x513)](_0x26417d),_0x26417d[_0x2580cf(0x703)](_0x3ae5a9,_0x1a3698),this['addDamageSprite'](_0x26417d);}else{const _0xe6684=this[_0x2580cf(0x467)](_0x2580cf(0x4ae),_0x1910a3[_0x2580cf(0x6c8)]);this[_0x2580cf(0x643)](_0xe6684||0x0);}}}else{if(_0x3e8d9f===_0x2580cf(0x441)){if(_0x2580cf(0x48f)==='cdqhV'){const _0x25b8a4=this[_0x2580cf(0x2f3)][_0x2580cf(0x874)]();if(_0x25b8a4){const _0x557f03=this[_0x2580cf(0x467)]('singleSkill',_0x25b8a4['id']);this[_0x2580cf(0x643)](_0x557f03||0x0);}}else{const _0x32cc73=this['itemLineRect'](_0x2e8eca),_0x54649b=this[_0x2580cf(0xa51)](_0x16cbcd),_0x5a4bf7=this['textSizeEx'](_0x54649b)[_0x2580cf(0x495)];this[_0x2580cf(0x63a)](this[_0x2580cf(0x786)](_0x10f6af));const _0xbb6b33=this['itemTextAlign']();if(_0xbb6b33===_0x2580cf(0x5ff))this[_0x2580cf(0xb2c)](_0x54649b,_0x32cc73['x']+_0x32cc73[_0x2580cf(0x495)]-_0x5a4bf7,_0x32cc73['y'],_0x5a4bf7);else{if(_0xbb6b33===_0x2580cf(0x8b9)){const _0x422198=_0x32cc73['x']+_0x4f854b['floor']((_0x32cc73['width']-_0x5a4bf7)/0x2);this['drawTextEx'](_0x54649b,_0x422198,_0x32cc73['y'],_0x5a4bf7);}else this['drawTextEx'](_0x54649b,_0x32cc73['x'],_0x32cc73['y'],_0x5a4bf7);}}}}}},Window_ActorCommand['prototype'][_0x54b1a4(0x467)]=function(_0x1441ba,_0x4c0c60){const _0x213f87=_0x54b1a4;return this[_0x213f87(0x8c3)][_0x213f87(0x38e)](_0x271722=>_0x271722[_0x213f87(0x359)]===_0x1441ba&&_0x271722['ext']===_0x4c0c60);},VisuMZ[_0x54b1a4(0x387)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)],Window_BattleStatus['prototype'][_0x54b1a4(0xbc1)]=function(_0x497a10){const _0xbb793c=_0x54b1a4;VisuMZ[_0xbb793c(0x387)][_0xbb793c(0xc54)]['call'](this,_0x497a10),this[_0xbb793c(0xd21)](),this[_0xbb793c(0xaea)]();},Window_BattleStatus[_0x54b1a4(0x375)]['battleLayoutStyle']=function(){const _0x381c46=_0x54b1a4;if(this[_0x381c46(0x83b)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=SceneManager[_0x381c46(0xc22)][_0x381c46(0xd92)](),this[_0x381c46(0x83b)];},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xd21)]=function(){const _0x26113c=_0x54b1a4;this[_0x26113c(0x5a4)]=this[_0x26113c(0x275)]();const _0x87b38=VisuMZ[_0x26113c(0x387)]['Settings']['BattleLayout'];_0x87b38[_0x26113c(0x36b)]&&(_0x26113c(0x6bd)===_0x26113c(0xd86)?_0x248b9d=_0x24f9ee:this[_0x26113c(0x9e2)]=0x0);},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x275)]=function(){const _0x14038f=_0x54b1a4,_0x22160a=VisuMZ[_0x14038f(0x387)]['Settings'][_0x14038f(0x6f0)];if(_0x22160a[_0x14038f(0x7c8)])return!![];const _0xc3c622=this[_0x14038f(0xd92)]();switch(_0xc3c622){case'list':case _0x14038f(0x218):return!![];break;case _0x14038f(0x761):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x3f8)]=function(){return this['isFrameVisible']()?0x0:0xa;},Window_BattleStatus[_0x54b1a4(0x375)]['maxCols']=function(){const _0x1b1b6e=_0x54b1a4,_0x127c97=this['battleLayoutStyle']();switch(_0x127c97){case _0x1b1b6e(0xd3a):return 0x1;break;case'xp':case _0x1b1b6e(0x7f7):return $gameParty['battleMembers']()[_0x1b1b6e(0x69d)];break;case _0x1b1b6e(0x761):default:return $gameParty[_0x1b1b6e(0x373)]();break;}},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x913)]=function(){const _0x3d7537=_0x54b1a4,_0x51db3d=this['battleLayoutStyle']();switch(_0x51db3d){case _0x3d7537(0xd3a):return Window_StatusBase['prototype'][_0x3d7537(0x913)][_0x3d7537(0xd6c)](this);break;case _0x3d7537(0x761):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x54b1a4(0x85b)]=function(){const _0x5bac23=_0x54b1a4,_0x3b6d44=this['battleLayoutStyle']();switch(_0x3b6d44){case'list':return Window_StatusBase[_0x5bac23(0x375)][_0x5bac23(0x85b)][_0x5bac23(0xd6c)](this);break;case _0x5bac23(0x761):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x2d2)]=function(){const _0x37789c=_0x54b1a4;this['isFrameVisible']()?Window_StatusBase[_0x37789c(0x375)]['updatePadding']['call'](this):this[_0x37789c(0xaa3)]=0x8;},Window_BattleStatus['prototype'][_0x54b1a4(0x553)]=function(){const _0xa07c31=_0x54b1a4,_0x2f0028=VisuMZ[_0xa07c31(0x387)][_0xa07c31(0x916)]['BattleLayout'];if(_0x2f0028[_0xa07c31(0x7c8)]){if('hnhRz'==='hnhRz')this[_0xa07c31(0x5c0)]=ImageManager[_0xa07c31(0x715)](_0x2f0028['StatusWindowSkinFilename']);else{const _0x481af9=this[_0xa07c31(0x818)][_0xa07c31(0x65b)],_0x307f10=this[_0xa07c31(0x495)]-0x8,_0x2a8a3c=this[_0xa07c31(0xdd7)],_0x536ab3=this[_0xa07c31(0xaa3)],_0x1b1ecb=_0x4ea315[_0xa07c31(0x469)](),_0x12f321=_0x45cd21[_0xa07c31(0x8f3)]();this[_0xa07c31(0x818)]['x']=0x4,_0x481af9[_0xa07c31(0x985)](_0x307f10,_0x2a8a3c),_0x481af9[_0xa07c31(0x4ef)](0x0,0x0,_0x307f10,_0x536ab3,_0x12f321,_0x1b1ecb,!![]),_0x481af9[_0xa07c31(0x7b5)](0x0,_0x536ab3,_0x307f10,_0x2a8a3c-_0x536ab3*0x2,_0x1b1ecb),_0x481af9[_0xa07c31(0x4ef)](0x0,_0x2a8a3c-_0x536ab3,_0x307f10,_0x536ab3,_0x1b1ecb,_0x12f321,!![]),this[_0xa07c31(0x818)][_0xa07c31(0x96a)](0x0,0x0,_0x307f10,_0x2a8a3c);}}else Window_StatusBase[_0xa07c31(0x375)]['loadWindowskin']['call'](this);},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x7c5)]=function(_0x200d0d){const _0x2c3bea=_0x54b1a4,_0x3355a1=VisuMZ['BattleCore'][_0x2c3bea(0x916)]['BattleLayout'];if(_0x3355a1[_0x2c3bea(0x967)])return;Window_StatusBase['prototype'][_0x2c3bea(0x7c5)][_0x2c3bea(0xd6c)](this,_0x200d0d);},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xa6b)]=function(){const _0x4f9721=_0x54b1a4;this[_0x4f9721(0x7cf)]=!![];},Window_BattleStatus[_0x54b1a4(0x375)]['update']=function(){const _0x24700b=_0x54b1a4;Window_StatusBase['prototype'][_0x24700b(0x879)][_0x24700b(0xd6c)](this),this[_0x24700b(0xa80)](),this['updateEffectContainers']();if(this[_0x24700b(0xd92)]()===_0x24700b(0x218))this['updateBorderStyle']();},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xa80)]=function(){const _0x2b3bd3=_0x54b1a4;if($gameTemp[_0x2b3bd3(0xbdf)]())this[_0x2b3bd3(0x383)](),this[_0x2b3bd3(0x7cf)]=![],$gameTemp[_0x2b3bd3(0xb96)]();else this[_0x2b3bd3(0x7cf)]&&(this['_requestRefresh']=![],this[_0x2b3bd3(0x742)](),this[_0x2b3bd3(0x922)]());},Window_BattleStatus[_0x54b1a4(0x375)]['show']=function(){const _0x21eae3=_0x54b1a4;Window_StatusBase[_0x21eae3(0x375)][_0x21eae3(0x340)][_0x21eae3(0xd6c)](this);if(!$gameSystem[_0x21eae3(0xc91)]())this[_0x21eae3(0x742)]();},Window_BattleStatus['prototype'][_0x54b1a4(0x5e6)]=function(){const _0x5c87ac=_0x54b1a4;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase[_0x5c87ac(0x375)][_0x5c87ac(0x5e6)][_0x5c87ac(0xd6c)](this);},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xa89)]=function(_0x12b0a1){const _0x414edf=_0x54b1a4,_0x55ff65=this[_0x414edf(0xd92)]();switch(_0x55ff65){case'xp':case _0x414edf(0x7f7):break;case _0x414edf(0x761):case _0x414edf(0xd3a):case _0x414edf(0x218):default:return Window_StatusBase[_0x414edf(0x375)]['drawBackgroundRect'][_0x414edf(0xd6c)](this,_0x12b0a1);break;}},VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x39e)],Window_BattleStatus['prototype']['drawItemImage']=function(_0x1e8290){const _0x5aaff1=_0x54b1a4,_0x28ed4c=this[_0x5aaff1(0xd92)]();switch(_0x28ed4c){case _0x5aaff1(0xd3a):this[_0x5aaff1(0x775)](_0x1e8290);break;case'xp':this[_0x5aaff1(0x850)](_0x1e8290);break;case _0x5aaff1(0x7f7):this[_0x5aaff1(0xa77)](_0x1e8290);break;case _0x5aaff1(0x761):case _0x5aaff1(0x218):default:VisuMZ[_0x5aaff1(0x387)][_0x5aaff1(0x806)]['call'](this,_0x1e8290);break;}},Window_BattleStatus['prototype']['drawItemStatus']=function(_0x888991){const _0x905c92=_0x54b1a4,_0x1cc4f5=this['battleLayoutStyle']();if(!$gameSystem[_0x905c92(0xc91)]())this[_0x905c92(0x4a2)](_0x888991);switch(_0x1cc4f5){case _0x905c92(0xd3a):this[_0x905c92(0xb12)](_0x888991);break;case'xp':case _0x905c92(0x7f7):case _0x905c92(0x761):case _0x905c92(0x218):default:this['drawItemStatusXPStyle'](_0x888991);break;}},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x80e)]=function(){const _0x287980=_0x54b1a4,_0x5bcf28=this[_0x287980(0xd92)]();if(['xp'][_0x287980(0xd4a)](_0x5bcf28)&&!$gameSystem[_0x287980(0xc91)]()){if('scCYw'===_0x287980(0xc79))_0x3f096b=(_0xa6ee5f+_0x5d2959)/0x2,_0x59d5f5=-0x1;else{this[_0x287980(0xb94)](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x287980(0x375)][_0x287980(0x80e)]['call'](this);},Window_BattleStatus[_0x54b1a4(0x375)]['centerFrontViewSprite']=function(_0xcde202){const _0x1f511f=_0x54b1a4,_0xdc9b86=this[_0x1f511f(0x6fe)](_0xcde202)[_0x1f511f(0x887)]();if(!_0xdc9b86)return;const _0xa48dd8=this[_0x1f511f(0xd92)](),_0x372f5d=this[_0x1f511f(0x39c)](_0xcde202);let _0x3accc4=Math[_0x1f511f(0x68d)](_0x372f5d['x']+_0x372f5d[_0x1f511f(0x495)]/0x2)+this['padding'];[_0x1f511f(0xd3a)][_0x1f511f(0xd4a)](_0xa48dd8)&&(_0x3accc4=_0x372f5d[_0x1f511f(0x495)]/$gameParty['battleMembers']()['length'],_0x3accc4*=_0xcde202,_0x3accc4+=_0x372f5d['width']/$gameParty['battleMembers']()[_0x1f511f(0x69d)]/0x2);let _0x462134=Math[_0x1f511f(0x68d)](this[_0x1f511f(0x674)](_0xcde202,_0xdc9b86,_0x372f5d));_0xdc9b86[_0x1f511f(0xc2a)](_0x3accc4,_0x462134),this[_0x1f511f(0x7fa)](_0xdc9b86,0x1),_0xdc9b86[_0x1f511f(0x340)](),this[_0x1f511f(0x83d)](),this[_0x1f511f(0x922)]();},Window_BattleStatus['prototype']['frontviewSpriteY']=function(_0x2ec15a,_0x3c76d1,_0x23b2c0){const _0x23ad55=_0x54b1a4,_0x5cb5bf=VisuMZ[_0x23ad55(0x387)]['Settings'][_0x23ad55(0x6f0)],_0x22a97c=this[_0x23ad55(0xd92)]();if(_0x22a97c==='xp'){const _0x11a7ab=_0x5cb5bf[_0x23ad55(0x790)];switch(_0x11a7ab[_0x23ad55(0x6d1)]()[_0x23ad55(0x2f4)]()){case'bottom':return _0x23b2c0['height']-_0x3c76d1['_shadowSprite'][_0x23ad55(0xdd7)]/0x4;break;case _0x23ad55(0x8b9):const _0x22aa35=_0x5cb5bf[_0x23ad55(0x98a)];return(_0x23b2c0[_0x23ad55(0xdd7)]+(_0x3c76d1[_0x23ad55(0xdd7)]||_0x22aa35))/0x2;break;case _0x23ad55(0xd82):return 0x0;case _0x23ad55(0x56b):default:return this['nameY'](_0x23b2c0);break;}}else{if(_0x22a97c===_0x23ad55(0x7f7)){}}return _0x3c76d1[_0x23ad55(0xdd7)];},Sprite_Name[_0x54b1a4(0x375)][_0x54b1a4(0xa96)]=function(){return 0x24;},Sprite_Name['prototype'][_0x54b1a4(0x3be)]=function(){const _0x231e7f=_0x54b1a4,_0x4d43e5=this['name'](),_0x165e9a=this[_0x231e7f(0x515)](),_0xf90a7=this['bitmapHeight']();this['setupFont'](),this[_0x231e7f(0x65b)][_0x231e7f(0x207)](),this['bitmap']['drawTextTopAligned'](_0x4d43e5,0x4,0x0,_0x165e9a,_0xf90a7,'left');},Bitmap[_0x54b1a4(0x375)][_0x54b1a4(0xb13)]=function(_0x19fb84,_0x27df90,_0x13c32f,_0x175535,_0x5c6dc1,_0x17bfb2){const _0x26293a=_0x54b1a4,_0x6f7e72=this[_0x26293a(0x734)],_0x2ad780=_0x6f7e72[_0x26293a(0x492)];_0x175535=_0x175535||0xffffffff;let _0x2e909a=_0x27df90,_0x36d8f6=Math[_0x26293a(0x68d)](_0x13c32f+0x18/0x2+this[_0x26293a(0xa48)]*0.35);_0x17bfb2==='center'&&(_0x2e909a+=_0x175535/0x2),_0x17bfb2===_0x26293a(0x5ff)&&(_0x2e909a+=_0x175535),_0x6f7e72['save'](),_0x6f7e72[_0x26293a(0x229)]=this[_0x26293a(0x634)](),_0x6f7e72[_0x26293a(0x781)]=_0x17bfb2,_0x6f7e72[_0x26293a(0x9b1)]=_0x26293a(0x3b0),_0x6f7e72[_0x26293a(0x492)]=0x1,this[_0x26293a(0xbc8)](_0x19fb84,_0x2e909a,_0x36d8f6,_0x175535),_0x6f7e72[_0x26293a(0x492)]=_0x2ad780,this[_0x26293a(0x9b3)](_0x19fb84,_0x2e909a,_0x36d8f6,_0x175535),_0x6f7e72[_0x26293a(0x5e9)](),this[_0x26293a(0xd75)]['update']();},Window_BattleStatus[_0x54b1a4(0x375)]['nameY']=function(_0x2a0988){const _0x2cb40b=_0x54b1a4;return this[_0x2cb40b(0xd93)](_0x2a0988)-this[_0x2cb40b(0x93e)]();},Window_BattleStatus[_0x54b1a4(0x375)]['drawItemImageListStyle']=function(_0x8467e1){const _0x38ea3d=_0x54b1a4;if(!VisuMZ[_0x38ea3d(0x387)][_0x38ea3d(0x916)][_0x38ea3d(0x6f0)][_0x38ea3d(0x424)])return;const _0x2d652e=this[_0x38ea3d(0x6fe)](_0x8467e1),_0x1aac47=this[_0x38ea3d(0x39c)](_0x8467e1);_0x1aac47['width']=ImageManager[_0x38ea3d(0x43a)],_0x1aac47['height']-=0x2,this[_0x38ea3d(0x773)](_0x2d652e,_0x1aac47['x']+0x1,_0x1aac47['y']+0x1,_0x1aac47[_0x38ea3d(0x495)],_0x1aac47['height']);},Window_BattleStatus['prototype'][_0x54b1a4(0xb12)]=function(_0x16a043){const _0x259c1c=_0x54b1a4,_0x5c2b5b=VisuMZ['BattleCore'][_0x259c1c(0x916)][_0x259c1c(0x6f0)],_0x1c2800=$dataSystem[_0x259c1c(0x96b)]?0x4:0x3,_0x5c4930=_0x1c2800*0x80+(_0x1c2800-0x1)*0x8+0x4,_0x98815=this[_0x259c1c(0x6fe)](_0x16a043),_0x2f8363=this['itemRect'](_0x16a043);let _0x3b6b1e=_0x2f8363['x']+this[_0x259c1c(0xaa3)];_0x5c2b5b[_0x259c1c(0x424)]?_0x3b6b1e=_0x2f8363['x']+ImageManager[_0x259c1c(0x43a)]+0x8:_0x3b6b1e+=ImageManager[_0x259c1c(0xa59)];const _0x2cc9ee=Math['round'](Math['min'](_0x2f8363['x']+_0x2f8363[_0x259c1c(0x495)]-_0x5c4930,_0x3b6b1e)),_0xacdd12=Math[_0x259c1c(0x68d)](_0x2f8363['y']+(_0x2f8363[_0x259c1c(0xdd7)]-Sprite_Name[_0x259c1c(0x375)][_0x259c1c(0xa96)]())/0x2),_0x18581e=Math[_0x259c1c(0x68d)](_0x2cc9ee-ImageManager[_0x259c1c(0xa59)]/0x2-0x4),_0x19d660=Math[_0x259c1c(0x68d)](_0x2f8363['y']+(_0x2f8363[_0x259c1c(0xdd7)]-ImageManager[_0x259c1c(0x485)])/0x2+ImageManager[_0x259c1c(0x485)]/0x2);let _0x19f280=_0x2cc9ee+0x88;const _0x249c2c=_0xacdd12;this['placeTimeGauge'](_0x98815,_0x2cc9ee-0x4+(_0x5c2b5b[_0x259c1c(0x486)]||0x0),_0xacdd12+(_0x5c2b5b[_0x259c1c(0x39d)]||0x0)),this['placeActorName'](_0x98815,_0x2cc9ee+(_0x5c2b5b[_0x259c1c(0x4cf)]||0x0),_0xacdd12+(_0x5c2b5b[_0x259c1c(0x5a5)]||0x0)),this[_0x259c1c(0x59b)](_0x98815,_0x18581e+(_0x5c2b5b['StateIconOffsetX']||0x0),_0x19d660+(_0x5c2b5b[_0x259c1c(0xc51)]||0x0)),this[_0x259c1c(0x626)](_0x98815,'hp',_0x19f280+0x88*0x0+(_0x5c2b5b[_0x259c1c(0xcfa)]||0x0),_0x249c2c+(_0x5c2b5b[_0x259c1c(0xdd6)]||0x0)),this['placeGauge'](_0x98815,'mp',_0x19f280+0x88*0x1+(_0x5c2b5b[_0x259c1c(0xa72)]||0x0),_0x249c2c+(_0x5c2b5b[_0x259c1c(0xa22)]||0x0)),$dataSystem[_0x259c1c(0x96b)]&&this['placeGauge'](_0x98815,'tp',_0x19f280+0x88*0x2+(_0x5c2b5b['TpGaugeOffsetX']||0x0),_0x249c2c+(_0x5c2b5b['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x850)]=function(_0x5c5850){const _0x10b5e8=_0x54b1a4;if(!$gameSystem[_0x10b5e8(0xc91)]())return;VisuMZ[_0x10b5e8(0x387)][_0x10b5e8(0x806)][_0x10b5e8(0xd6c)](this,_0x5c5850);},Window_BattleStatus['prototype']['drawItemStatusXPStyle']=function(_0x1f1d39){const _0x1c6a95=_0x54b1a4,_0xc0178b=VisuMZ[_0x1c6a95(0x387)][_0x1c6a95(0x916)][_0x1c6a95(0x6f0)],_0x14cc86=this[_0x1c6a95(0x6fe)](_0x1f1d39),_0x15bfeb=this[_0x1c6a95(0x39c)](_0x1f1d39),_0x34e638=Math['round'](_0x15bfeb['x']+(_0x15bfeb[_0x1c6a95(0x495)]-0x80)/0x2),_0x49a507=this[_0x1c6a95(0x79a)](_0x15bfeb);let _0x8ac62f=_0x34e638-ImageManager[_0x1c6a95(0xa59)]/0x2-0x4,_0x151d6d=_0x49a507+ImageManager['iconHeight']/0x2;_0x8ac62f-ImageManager[_0x1c6a95(0xa59)]/0x2<_0x15bfeb['x']&&(_0x1c6a95(0xbec)!=='ZevSd'?(_0x5da108['prototype']['_updateFilterArea']['call'](this),this[_0x1c6a95(0x535)]()):(_0x8ac62f=_0x34e638+ImageManager[_0x1c6a95(0xa59)]/0x2-0x4,_0x151d6d=_0x49a507-ImageManager[_0x1c6a95(0x485)]/0x2));const _0x5a742c=_0x34e638,_0x57fa49=this[_0x1c6a95(0xd93)](_0x15bfeb);this[_0x1c6a95(0x3d8)](_0x14cc86,_0x34e638+(_0xc0178b[_0x1c6a95(0x486)]||0x0),_0x49a507+(_0xc0178b[_0x1c6a95(0x39d)]||0x0)),this[_0x1c6a95(0xa17)](_0x14cc86,_0x34e638+(_0xc0178b[_0x1c6a95(0x4cf)]||0x0),_0x49a507+(_0xc0178b[_0x1c6a95(0x5a5)]||0x0)),this[_0x1c6a95(0x59b)](_0x14cc86,_0x8ac62f+(_0xc0178b[_0x1c6a95(0x20b)]||0x0),_0x151d6d+(_0xc0178b[_0x1c6a95(0xc51)]||0x0)),this[_0x1c6a95(0x626)](_0x14cc86,'hp',_0x5a742c+(_0xc0178b[_0x1c6a95(0xcfa)]||0x0),_0x57fa49+(_0xc0178b[_0x1c6a95(0xdd6)]||0x0)),this['placeGauge'](_0x14cc86,'mp',_0x5a742c+(_0xc0178b[_0x1c6a95(0xa72)]||0x0),_0x57fa49+this[_0x1c6a95(0x93e)]()+(_0xc0178b['MpGaugeOffsetY']||0x0)),$dataSystem['optDisplayTp']&&this[_0x1c6a95(0x626)](_0x14cc86,'tp',_0x5a742c+(_0xc0178b[_0x1c6a95(0xaa5)]||0x0),_0x57fa49+this[_0x1c6a95(0x93e)]()*0x2+(_0xc0178b[_0x1c6a95(0x509)]||0x0));},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x228)]=function(_0xde2394){const _0x4e3743=_0x54b1a4;if(!VisuMZ[_0x4e3743(0x387)][_0x4e3743(0x916)]['BattleLayout']['ShowPortraits'])return![];if(_0xde2394[_0x4e3743(0x91a)]())return!![];return Imported[_0x4e3743(0x24f)]&&_0xde2394[_0x4e3743(0xb4c)]();},Game_Actor['prototype'][_0x54b1a4(0x7a0)]=function(){const _0x328567=_0x54b1a4;if(this['actor']()[_0x328567(0xd77)][_0x328567(0x298)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if('mMIOi'===_0x328567(0x90d)){this[_0x328567(0x912)]=this[_0x328567(0x717)]()['name']();const _0x2cb487=this[_0x328567(0x9d8)](this[_0x328567(0x912)])[_0x328567(0x495)],_0x14594f=_0x2750ee[_0x328567(0x68d)]((this[_0x328567(0xc0c)]-_0x2cb487)/0x2);this[_0x328567(0xb2c)](this['_text'],_0x14594f,0x0,_0x2cb487+0x8);}else return Number(RegExp['$1']);}else{if(this[_0x328567(0x6fe)]()[_0x328567(0xd77)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x54b1a4(0x375)][_0x54b1a4(0x7c0)]=function(){const _0x10b028=_0x54b1a4;if(this[_0x10b028(0x6fe)]()['note'][_0x10b028(0x298)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x10b028(0x992)!==_0x10b028(0x992)){const _0x3cda37=this[_0x10b028(0xa51)](_0x21a996);if(_0x3cda37['match'](/\\I\[(\d+)\]/i)){const _0x26cdcb=this[_0x10b028(0x347)](_0x3eb87e),_0x21d5ba=this['textSizeEx'](_0x3cda37)['width'];return _0x21d5ba<=_0x26cdcb[_0x10b028(0x495)]?_0x10b028(0x604):_0x10b028(0x256);}}else return Number(RegExp['$1']);}else{if(this[_0x10b028(0x6fe)]()['note'][_0x10b028(0x298)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xa77)]=function(_0x472d80){const _0x2a468c=_0x54b1a4,_0x4473b7=this[_0x2a468c(0x6fe)](_0x472d80);if(this[_0x2a468c(0x228)](_0x4473b7)){const _0x337d58='actor%1-portrait'[_0x2a468c(0xd76)](_0x4473b7[_0x2a468c(0xd2c)]()),_0x5238e1=this['createInnerPortrait'](_0x337d58,Sprite),_0x1c9f0c=_0x4473b7[_0x2a468c(0x522)]();_0x1c9f0c!==''?_0x5238e1[_0x2a468c(0x65b)]=ImageManager[_0x2a468c(0xcfe)](_0x1c9f0c):_0x5238e1[_0x2a468c(0x65b)]=ImageManager[_0x2a468c(0x714)];const _0x5f1f9e=this[_0x2a468c(0x39c)](_0x472d80);_0x5238e1['anchor']['x']=0.5,_0x5238e1['anchor']['y']=0x1;let _0x2c4cf1=Math[_0x2a468c(0x68d)](_0x5f1f9e['x']+_0x5f1f9e[_0x2a468c(0x495)]/0x2)+this['padding'];_0x2c4cf1+=_0x4473b7[_0x2a468c(0x7a0)]();let _0x47c91c=Math['round'](this['height']);_0x47c91c+=_0x4473b7['getBattlePortraitOffsetY'](),_0x5238e1[_0x2a468c(0xab8)](_0x2c4cf1,_0x47c91c);const _0x2ab531=VisuMZ[_0x2a468c(0x387)][_0x2a468c(0x916)][_0x2a468c(0x6f0)]['PortraitScale'];_0x5238e1['scale']['x']=_0x2ab531,_0x5238e1[_0x2a468c(0xbcd)]['y']=_0x2ab531,_0x5238e1[_0x2a468c(0x340)]();}else{const _0x143785=this[_0x2a468c(0x67d)](_0x472d80);this[_0x2a468c(0x773)](_0x4473b7,_0x143785['x'],_0x143785['y'],_0x143785[_0x2a468c(0x495)],_0x143785['height']);}},Window_BattleStatus['prototype']['createInnerPortrait']=function(_0x22d272,_0x16442a){const _0x3ce19e=_0x54b1a4,_0x5aa6dd=this[_0x3ce19e(0xa05)];if(_0x5aa6dd[_0x22d272]){if(_0x3ce19e(0x4eb)!==_0x3ce19e(0x4cd))return _0x5aa6dd[_0x22d272];else _0x14b04c[_0x3ce19e(0x519)](_0x3ce19e(0xc60),_0xc5d809,_0x11cbc7,!![]);}else{const _0x53b15e=new _0x16442a();return _0x5aa6dd[_0x22d272]=_0x53b15e,this['addChildToBack'](_0x53b15e),this[_0x3ce19e(0x930)](this[_0x3ce19e(0xcbd)]),_0x53b15e;}},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x975)]=function(){const _0x5b58a8=_0x54b1a4;this[_0x5b58a8(0x3d9)](),this[_0x5b58a8(0x58e)](),Window_StatusBase[_0x5b58a8(0x375)][_0x5b58a8(0x975)][_0x5b58a8(0xd6c)](this),this[_0x5b58a8(0x6d8)]();},Window_BattleStatus[_0x54b1a4(0x375)]['_createCursorArea']=function(){const _0x3d2541=_0x54b1a4;this[_0x3d2541(0xcbd)]=new Sprite(),this['_cursorArea'][_0x3d2541(0x389)]=[new PIXI[(_0x3d2541(0x389))][(_0x3d2541(0xd69))]()],this[_0x3d2541(0xcbd)][_0x3d2541(0xc5e)]=new Rectangle(),this['_cursorArea'][_0x3d2541(0xab8)](this[_0x3d2541(0x525)],this[_0x3d2541(0x525)]),this['addChild'](this[_0x3d2541(0xcbd)]);},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x58e)]=function(){const _0x1cf365=_0x54b1a4;this[_0x1cf365(0x92c)]=new Sprite(),this[_0x1cf365(0x6a8)](this[_0x1cf365(0x92c)]);},Window_BattleStatus[_0x54b1a4(0x375)]['updateEffectsContainer']=function(){const _0x2d3ce2=_0x54b1a4;this[_0x2d3ce2(0x92c)]&&this[_0x2d3ce2(0x6a8)](this[_0x2d3ce2(0x92c)]);},Window_BattleStatus['prototype'][_0x54b1a4(0x6d8)]=function(){const _0x2e10a4=_0x54b1a4;this[_0x2e10a4(0x9dc)]=new Sprite(),this[_0x2e10a4(0x6a8)](this[_0x2e10a4(0x9dc)]);},Window_BattleStatus[_0x54b1a4(0x375)]['_createCursorSprite']=function(){const _0x1e27d8=_0x54b1a4;this[_0x1e27d8(0x53e)]=new Sprite();for(let _0x499ba0=0x0;_0x499ba0<0x9;_0x499ba0++){this[_0x1e27d8(0x53e)]['addChild'](new Sprite());}this[_0x1e27d8(0xcbd)][_0x1e27d8(0x6a8)](this['_cursorSprite']);},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xc3d)]=function(){const _0x1596e0=_0x54b1a4;Window_StatusBase['prototype']['_updateClientArea'][_0x1596e0(0xd6c)](this),this['_updateCursorArea']();},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xaba)]=function(){const _0x15272c=_0x54b1a4,_0xc4c14a=this[_0x15272c(0x525)];this[_0x15272c(0xcbd)][_0x15272c(0xab8)](_0xc4c14a,_0xc4c14a),this[_0x15272c(0xcbd)]['x']=_0xc4c14a-this[_0x15272c(0x978)]['x'],this[_0x15272c(0xcbd)]['y']=_0xc4c14a-this[_0x15272c(0x978)]['y'];if(this['innerWidth']>0x0&&this[_0x15272c(0xc37)]>0x0)_0x15272c(0x9da)==='BJPxe'?(_0x29717a['BattleCore'][_0x15272c(0x432)][_0x15272c(0xd6c)](this),this[_0x15272c(0x8c2)]['autoSelect'](),this['makeTargetSelectionMoreVisible']()):this[_0x15272c(0xcbd)]['visible']=this[_0x15272c(0x5ca)]();else{if(_0x15272c(0xb07)==='kvqhe')this[_0x15272c(0xcbd)][_0x15272c(0x739)]=![];else{if(!this[_0x15272c(0xaee)]()&&_0x5eee5d[_0x15272c(0xcb7)])return!![];return _0x2a5dcd[_0x15272c(0x375)][_0x15272c(0x811)]['call'](this);}}},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xa94)]=function(){const _0x4c030b=_0x54b1a4;Window_StatusBase[_0x4c030b(0x375)][_0x4c030b(0xa94)][_0x4c030b(0xd6c)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x535)]=function(){const _0xe7111e=_0x54b1a4,_0x189ff0=this['_cursorArea']['worldTransform'][_0xe7111e(0x961)](new Point(0x0,0x0)),_0x56174c=this[_0xe7111e(0xcbd)]['filterArea'];_0x56174c['x']=_0x189ff0['x']+this[_0xe7111e(0x978)]['x'],_0x56174c['y']=_0x189ff0['y']+this[_0xe7111e(0x978)]['y'],_0x56174c['width']=this[_0xe7111e(0xc0c)],_0x56174c[_0xe7111e(0xdd7)]=this[_0xe7111e(0xc37)];},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x642)]=function(_0x1f0176){const _0x251f42=_0x54b1a4;if(this['battleLayoutStyle']()!==_0x251f42(0x7f7))return;this[_0x251f42(0xa77)](_0x1f0176[_0x251f42(0x58f)]());},Window_BattleStatus['prototype']['addDamageSprite']=function(_0x38ec41,_0x2aba0c){const _0x62be32=_0x54b1a4;if(!this[_0x62be32(0x9dc)])return;if(!_0x38ec41)return;if(!_0x2aba0c)return;const _0x2688e5=this[_0x62be32(0x39c)](_0x2aba0c[_0x62be32(0x58f)]());_0x2688e5['x']+=_0x2688e5[_0x62be32(0x495)]/0x2+this[_0x62be32(0xaa3)],_0x38ec41['x']=_0x2688e5['x'],_0x38ec41['y']=_0x2688e5['y'],this[_0x62be32(0x9dc)][_0x62be32(0x6a8)](_0x38ec41);},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x437)]=function(_0x3e0aec){const _0xde237a=_0x54b1a4;if(!this['_damageContainer'])return;if(!_0x3e0aec)return;this[_0xde237a(0x9dc)][_0xde237a(0x4e3)](_0x3e0aec);},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xb1c)]=function(){const _0x81cc5d=_0x54b1a4;if(!this[_0x81cc5d(0xc5f)]())return;if(!this[_0x81cc5d(0x7e0)])this[_0x81cc5d(0x2f6)]();this[_0x81cc5d(0xace)](),this[_0x81cc5d(0x2f7)]();},Window_BattleStatus[_0x54b1a4(0x375)]['isBorderStylePortraitShown']=function(){const _0x5638bb=_0x54b1a4;if(this[_0x5638bb(0x3ac)]!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ[_0x5638bb(0x387)]['Settings'][_0x5638bb(0x6f0)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x2f6)]=function(){const _0x128410=_0x54b1a4;this[_0x128410(0x7e0)]=new Sprite();const _0x692053=SceneManager[_0x128410(0xc22)],_0x5102c0=_0x692053[_0x128410(0x6c0)][_0x128410(0x940)](_0x692053[_0x128410(0x9c0)]);_0x692053['addChildAt'](this[_0x128410(0x7e0)],_0x5102c0),this[_0x128410(0x7e0)][_0x128410(0x749)]['x']=0.5,this[_0x128410(0x7e0)][_0x128410(0x749)]['y']=0x1;const _0x2b86e6=VisuMZ['BattleCore'][_0x128410(0x916)][_0x128410(0x6f0)]['PortraitScaleBorderStyle'];this[_0x128410(0x7e0)]['scale']['x']=_0x2b86e6,this[_0x128410(0x7e0)][_0x128410(0xbcd)]['y']=_0x2b86e6,this[_0x128410(0x7e0)]['y']=this['y']+this[_0x128410(0xdd7)],this[_0x128410(0x3b2)]=0x0;},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x537)]=function(){const _0x27d6c5=_0x54b1a4;return BattleManager[_0x27d6c5(0x539)]();},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xace)]=function(){const _0x2b59c7=_0x54b1a4;this[_0x2b59c7(0x7e0)]['visible']=this[_0x2b59c7(0x537)]();const _0x14de55=BattleManager[_0x2b59c7(0x6fe)](),_0x31f347=_0x14de55?_0x14de55[_0x2b59c7(0x522)]()||'':'';if(_0x14de55===this['_borderPortraitSprite']['actor']&&_0x31f347===this[_0x2b59c7(0x7e0)]['lastFilename'])return;this['_borderPortraitSprite'][_0x2b59c7(0x6fe)]=_0x14de55||this[_0x2b59c7(0x7e0)][_0x2b59c7(0x6fe)],this[_0x2b59c7(0x7e0)][_0x2b59c7(0xa7c)]=_0x31f347;if(!_0x14de55){if(_0x2b59c7(0x5dc)===_0x2b59c7(0x5dc))return;else{const _0x2415a7=_0x479ed7[_0x2b59c7(0xc22)][_0x2b59c7(0x414)]();this['move'](_0x2415a7['x'],_0x2415a7['y'],_0x2415a7[_0x2b59c7(0x495)],_0x2415a7[_0x2b59c7(0xdd7)]),this['createContents'](),this['setBackgroundType'](0x0);}}else{if(_0x31f347===''){this[_0x2b59c7(0x7e0)][_0x2b59c7(0x65b)]=ImageManager['_emptyBitmap'],this[_0x2b59c7(0x7e0)]['lastFilename']='';return;}else{const _0x3b1cb4=ImageManager['loadPicture'](_0x31f347);this[_0x2b59c7(0x7e0)][_0x2b59c7(0x9e2)]=0x0,_0x3b1cb4['addLoadListener'](this[_0x2b59c7(0x8f0)][_0x2b59c7(0xc8f)](this,_0x3b1cb4));}}},Window_BattleStatus['prototype'][_0x54b1a4(0x8f0)]=function(_0x2dc5c2){const _0x1fe81=_0x54b1a4;this[_0x1fe81(0x3b2)]=0x14,this[_0x1fe81(0x7e0)][_0x1fe81(0x65b)]=_0x2dc5c2;SceneManager[_0x1fe81(0xc22)][_0x1fe81(0x9bb)]()?(this[_0x1fe81(0x7e0)]['x']=0x0,this['_borderPortraitTargetX']=Math[_0x1fe81(0x8c0)](_0x2dc5c2['width']/0x2)):_0x1fe81(0x99c)!=='cLvKa'?_0x3d8065[_0x1fe81(0x644)][_0x1fe81(0x581)]()[_0x1fe81(0x4c5)](_0xd9ca03):(this[_0x1fe81(0x7e0)]['x']=this[_0x1fe81(0x495)],this[_0x1fe81(0x8d8)]=this['width']*0x3/0x4);this[_0x1fe81(0x7e0)][_0x1fe81(0x9e2)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x1fe81(0xdd7)];const _0x5374bb=BattleManager['actor']();_0x5374bb&&(this[_0x1fe81(0x8d8)]+=_0x5374bb[_0x1fe81(0x7a0)](),this['_borderPortraitSprite']['y']+=_0x5374bb[_0x1fe81(0x7c0)]());},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0x2f7)]=function(){const _0x355faa=_0x54b1a4;if(this[_0x355faa(0x3b2)]>0x0){if(_0x355faa(0x63c)!==_0x355faa(0xc99)){const _0xa5b2c0=this[_0x355faa(0x3b2)],_0x38c8a6=this['_borderPortraitSprite'];_0x38c8a6['x']=(_0x38c8a6['x']*(_0xa5b2c0-0x1)+this['_borderPortraitTargetX'])/_0xa5b2c0,_0x38c8a6[_0x355faa(0x9e2)]=(_0x38c8a6[_0x355faa(0x9e2)]*(_0xa5b2c0-0x1)+0xff)/_0xa5b2c0,this[_0x355faa(0x3b2)]--;}else{if(!_0x43ad23['isSceneBattle']())return;const _0x4f3207=_0x1d66ef[_0x355faa(0x859)]();if(!_0x4f3207)return;_0x4f3207['setWaitMode'](_0x355faa(0x435));}}},Window_BattleStatus[_0x54b1a4(0x375)][_0x54b1a4(0xd09)]=function(){const _0x592d9d=_0x54b1a4;return;this[_0x592d9d(0x92c)]&&(_0x592d9d(0x616)===_0x592d9d(0x616)?(this['_effectsContainer']['x']=this['x'],this[_0x592d9d(0x92c)]['y']=this['y']):this[_0x592d9d(0xc9d)]()),this[_0x592d9d(0x9dc)]&&(this[_0x592d9d(0x9dc)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x54b1a4(0x375)]['createAttachmentSprites']=function(){const _0x51b97e=_0x54b1a4,_0x4cce54=VisuMZ[_0x51b97e(0x387)][_0x51b97e(0x916)]['BattleLayout'];if(_0x4cce54[_0x51b97e(0xa1e)]){const _0x5e4687=new Sprite();_0x5e4687[_0x51b97e(0x65b)]=ImageManager[_0x51b97e(0x715)](_0x4cce54[_0x51b97e(0xa1e)]),_0x5e4687['x']=_0x4cce54[_0x51b97e(0xcf2)]||0x0,_0x5e4687['y']=_0x4cce54[_0x51b97e(0xc89)]||0x0,this[_0x51b97e(0x930)](_0x5e4687),this[_0x51b97e(0xdc8)]=_0x5e4687;}if(_0x4cce54['StatusWindowAttachmentFront']){if(_0x51b97e(0x31c)!==_0x51b97e(0x31c))this[_0x51b97e(0x696)]();else{const _0x5a1f62=new Sprite();_0x5a1f62['bitmap']=ImageManager[_0x51b97e(0x715)](_0x4cce54[_0x51b97e(0xb59)]),_0x5a1f62['x']=_0x4cce54[_0x51b97e(0x444)]||0x0,_0x5a1f62['y']=_0x4cce54[_0x51b97e(0x2d1)]||0x0,this[_0x51b97e(0x6a8)](_0x5a1f62),this['_frontAttachmentSprite']=_0x5a1f62;}}},Window_BattleStatus['prototype']['updateAttachmentSprites']=function(){const _0x362d6e=_0x54b1a4;this[_0x362d6e(0x3b1)]&&('kSnNY'===_0x362d6e(0x99f)?(this[_0x362d6e(0x7e0)]['x']=0x0,this[_0x362d6e(0x8d8)]=_0x5ed361[_0x362d6e(0x8c0)](_0x31f624[_0x362d6e(0x495)]/0x2)):this[_0x362d6e(0x6a8)](this[_0x362d6e(0x3b1)])),this['_backAttachmentSprite']&&this[_0x362d6e(0x930)](this[_0x362d6e(0xdc8)]);},Window_BattleActor[_0x54b1a4(0x375)][_0x54b1a4(0xb3c)]=function(){const _0xb00f9d=_0x54b1a4;return this[_0xb00f9d(0x618)]();},Window_BattleActor[_0x54b1a4(0x375)]['isActionSelectionValid']=function(){const _0x412998=_0x54b1a4,_0x9b74d1=BattleManager['inputtingAction']();if(!_0x9b74d1)return!![];if(!_0x9b74d1[_0x412998(0x7b6)]())return!![];const _0x263ff0=this[_0x412998(0x6fe)](this[_0x412998(0x58f)]()),_0x146f1b=_0x9b74d1[_0x412998(0x7b6)]()['note'];if(_0x146f1b[_0x412998(0x298)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x412998(0x5f1)==='mSuda'){if(_0x263ff0===BattleManager[_0x412998(0x6fe)]())return![];}else return _0x412998(0xcfd)[_0x412998(0xd76)](this['isActor']()?_0x412998(0x6fe):_0x412998(0x717),this[_0x412998(0x56b)]());}if(_0x9b74d1[_0x412998(0xd9e)]()){if(!_0x263ff0[_0x412998(0x5b2)]())return![];}if(_0x9b74d1[_0x412998(0xb00)]()){if(!_0x263ff0[_0x412998(0x6a2)]())return![];}return!![];},Window_BattleActor[_0x54b1a4(0x375)][_0x54b1a4(0x936)]=function(_0x403c5b){const _0x9b3c65=_0x54b1a4;this[_0x9b3c65(0x66c)]=_0x403c5b;},VisuMZ['BattleCore'][_0x54b1a4(0xc21)]=Window_BattleActor[_0x54b1a4(0x375)]['processTouch'],Window_BattleActor[_0x54b1a4(0x375)]['processTouch']=function(){const _0x2daf1e=_0x54b1a4;Window_BattleStatus[_0x2daf1e(0x375)][_0x2daf1e(0x84b)][_0x2daf1e(0xd6c)](this),this[_0x2daf1e(0x66c)]?this[_0x2daf1e(0xcb4)]():_0x2daf1e(0x637)===_0x2daf1e(0xd2a)?(this[_0x2daf1e(0xaaa)]=0x0,_0x9a27d9[_0x2daf1e(0x533)]([0x0,0x0,0x0,0x0])):VisuMZ['BattleCore'][_0x2daf1e(0xc21)][_0x2daf1e(0xd6c)](this);},Window_BattleActor[_0x54b1a4(0x375)][_0x54b1a4(0xcb4)]=function(){const _0x4cb79c=_0x54b1a4,_0x48dabd=SceneManager[_0x4cb79c(0xc22)][_0x4cb79c(0x8c2)];if(!_0x48dabd)return;this['_doubleTouch']=![];const _0x446233=this['hitIndex']();if(_0x446233>=0x0){if(_0x4cb79c(0x920)===_0x4cb79c(0x34a)){const _0x582788=_0x3058ef[_0x4cb79c(0x5bf)](_0x181957['$1']);this[_0x4cb79c(0x327)](_0x582788);}else{this[_0x4cb79c(0x643)](_0x446233);if(TouchInput[_0x4cb79c(0x48b)]()){if(_0x4cb79c(0xc1e)===_0x4cb79c(0xc1e)){const _0x46845f=$gameParty[_0x4cb79c(0x328)]()[_0x446233],_0x1623aa=_0x48dabd[_0x4cb79c(0xa4d)][_0x4cb79c(0x940)](_0x46845f);_0x1623aa>=0x0&&(_0x48dabd[_0x4cb79c(0x643)](_0x1623aa),_0x48dabd[_0x4cb79c(0x983)]());}else this[_0x4cb79c(0x7cd)][_0x4cb79c(0xbcd)]['x']=0x1/(this['scale']['x']||0.001),this[_0x4cb79c(0x7cd)][_0x4cb79c(0xbcd)]['y']=0x1/(this['scale']['y']||0.001);}}}},Window_BattleActor[_0x54b1a4(0x375)][_0x54b1a4(0x71b)]=function(){const _0x7ab75b=_0x54b1a4;this['_enemyWindowMode']&&(this[_0x7ab75b(0xd08)]++,this[_0x7ab75b(0xaae)]=!![]);const _0x50f004=Window_BattleStatus[_0x7ab75b(0x375)][_0x7ab75b(0x71b)][_0x7ab75b(0xd6c)](this);return this[_0x7ab75b(0x66c)]&&(this[_0x7ab75b(0xaae)]=![]),_0x50f004;},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x306)]=Window_BattleActor['prototype'][_0x54b1a4(0x340)],Window_BattleActor[_0x54b1a4(0x375)]['show']=function(){const _0x331477=_0x54b1a4;VisuMZ[_0x331477(0x387)][_0x331477(0x306)][_0x331477(0xd6c)](this);const _0x11547b=BattleManager[_0x331477(0x8e7)]();if(_0x11547b){const _0x2a705d=$gameParty[_0x331477(0x6a6)]();_0x11547b[_0x331477(0xd45)]()&&_0x2a705d[_0x331477(0x69d)]>0x1&&(_0x331477(0x52b)!=='PgSLh'?(_0x314339*=-0x1,_0x1669b3*=-0x1):this['setHandler']('pagedown',this[_0x331477(0xd97)][_0x331477(0xc8f)](this)));}},VisuMZ[_0x54b1a4(0x387)]['Window_BattleActor_hide']=Window_BattleActor[_0x54b1a4(0x375)][_0x54b1a4(0x5e6)],Window_BattleActor[_0x54b1a4(0x375)][_0x54b1a4(0x5e6)]=function(){const _0x37484f=_0x54b1a4;VisuMZ['BattleCore'][_0x37484f(0xbea)]['call'](this),delete this['_handlers']['pageup'],delete this['_handlers'][_0x37484f(0xc1c)];},Window_BattleActor[_0x54b1a4(0x375)]['selectAllActors']=function(){const _0x3bf847=_0x54b1a4,_0x17422e=BattleManager[_0x3bf847(0x8e7)]();if(_0x17422e)_0x17422e[_0x3bf847(0x802)](_0x3bf847(0xbd3));this[_0x3bf847(0x983)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xcaf)]=Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)],Window_BattleEnemy['prototype'][_0x54b1a4(0xbc1)]=function(_0x4f24d5){const _0x13661f=_0x54b1a4;this['_lastEnemy']=null,VisuMZ[_0x13661f(0x387)][_0x13661f(0xcaf)]['call'](this,_0x4f24d5);if(Imported[_0x13661f(0xbc0)]){if(VisuMZ[_0x13661f(0x697)][_0x13661f(0xc92)]<1.12){if(_0x13661f(0x4b0)===_0x13661f(0xa2d))for(const _0x1ca0a6 of this['_damages']){_0x1ca0a6['x']+=_0x4e204f[_0x13661f(0x39a)]*_0x2eae2d,_0x1ca0a6['y']+=_0x4bbd3f['PopupShiftY'];}else{let _0x1d9076='';_0x1d9076+=_0x13661f(0x7b0),_0x1d9076+=_0x13661f(0x7dd),_0x1d9076+=_0x13661f(0x4f1),alert(_0x1d9076),SceneManager['exit']();}}}},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x3c6)]=function(){return this['maxItems']();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xbe8)]=Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x340)],Window_BattleEnemy['prototype'][_0x54b1a4(0x340)]=function(){const _0x8a125=_0x54b1a4;VisuMZ['BattleCore'][_0x8a125(0xbe8)][_0x8a125(0xd6c)](this),this['y']=Graphics['height']*0xa,this['meetsSelectFrontviewActorConditions']()&&(_0x8a125(0xa5f)===_0x8a125(0x640)?(this[_0x8a125(0x78d)]=_0x1856f6,this[_0x8a125(0x4d4)]&&(this[_0x8a125(0xdcc)]=0x0,this[_0x8a125(0x78d)]=0x0)):this[_0x8a125(0xcf1)]());},VisuMZ['BattleCore'][_0x54b1a4(0x659)]=Window_BattleEnemy[_0x54b1a4(0x375)]['hide'],Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x5e6)]=function(){const _0x4258bd=_0x54b1a4;VisuMZ[_0x4258bd(0x387)][_0x4258bd(0x659)][_0x4258bd(0xd6c)](this),$gameParty[_0x4258bd(0x643)](null),delete this[_0x4258bd(0x489)]['pageup'],delete this['_handlers'][_0x4258bd(0xc1c)];},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0xc05)]=function(){const _0x120e32=_0x54b1a4;let _0x12fe38=$gameTroop[_0x120e32(0x6a6)]();const _0x37313f=BattleManager[_0x120e32(0x8e7)]();if(_0x37313f){if('NxGbF'===_0x120e32(0x3a5)){_0x37313f[_0x120e32(0xd45)]()&&_0x12fe38[_0x120e32(0x69d)]>0x1&&this[_0x120e32(0xaf0)](_0x120e32(0x3cf),this[_0x120e32(0x838)][_0x120e32(0xc8f)](this));if(_0x37313f[_0x120e32(0x579)]()){if(_0x120e32(0x456)===_0x120e32(0xcd6))_0x176521[_0x120e32(0x3f3)]=!_0x45d103[_0x120e32(0x3f3)];else{const _0x2b3ef8=$gameParty[_0x120e32(0x6a6)]();_0x12fe38=_0x12fe38[_0x120e32(0x645)](_0x2b3ef8),_0x37313f['canSingleOrMultipleSelect']()&&_0x2b3ef8['length']>0x1&&this[_0x120e32(0xaf0)](_0x120e32(0xc1c),this[_0x120e32(0xd97)][_0x120e32(0xc8f)](this));}}}else{_0x77b690(_0x120e32(0xb61)),_0x222517[_0x120e32(0x3ca)]();return;}}return _0x12fe38;},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x742)]=function(){const _0x10d707=_0x54b1a4;this[_0x10d707(0xa4d)]=this[_0x10d707(0xc05)](),this[_0x10d707(0x52a)](),Window_Selectable[_0x10d707(0x375)][_0x10d707(0x742)]['call'](this);},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x52a)]=function(){const _0x5bece8=_0x54b1a4;this[_0x5bece8(0xa4d)]['sort']((_0x559a8c,_0x122a73)=>{const _0x524a3e=_0x5bece8;if(_0x559a8c[_0x524a3e(0xa2c)]()!==_0x122a73['isActor']()){if(_0x559a8c[_0x524a3e(0xc3c)]())return-0x1;if(_0x122a73[_0x524a3e(0xc3c)]())return 0x1;}if(_0x559a8c[_0x524a3e(0xa2c)]()&&_0x122a73[_0x524a3e(0xa2c)]())return _0x559a8c[_0x524a3e(0x58f)]()-_0x122a73[_0x524a3e(0x58f)]();if(_0x559a8c[_0x524a3e(0x887)]()[_0x524a3e(0xc43)]===_0x122a73[_0x524a3e(0x887)]()[_0x524a3e(0xc43)]){if(_0x524a3e(0x3ff)==='eLBTY')return _0x559a8c['battler']()[_0x524a3e(0xb10)]-_0x122a73[_0x524a3e(0x887)]()[_0x524a3e(0xb10)];else{const _0x1ed84d=_0x2a5c91['BattleCore'][_0x524a3e(0x916)][_0x524a3e(0x493)],_0x3c3e0a=_0x1ed84d[_0x524a3e(0x810)],_0x2ee89a=_0x1ed84d[_0x524a3e(0xad6)],_0x1ab6ed=_0x1ed84d[_0x524a3e(0x2d6)];this[_0x524a3e(0x835)](-_0x3c3e0a,-_0x2ee89a,_0x1ab6ed);}}else return _0x559a8c[_0x524a3e(0x887)]()[_0x524a3e(0xc43)]-_0x122a73['battler']()[_0x524a3e(0xc43)];}),SceneManager['isBattleFlipped']()&&this['_enemies']['reverse']();},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0xc50)]=function(){const _0x37c9b8=_0x54b1a4,_0x3a101d=VisuMZ['BattleCore']['Settings']['Enemy'];if(_0x3a101d[_0x37c9b8(0x7ba)]){if('saVJu'!==_0x37c9b8(0x93d))return![];else this[_0x37c9b8(0x476)]();}else{if('RhDWF'!==_0x37c9b8(0x48c))this[_0x37c9b8(0x325)]();else return _0x1e5172(_0x220da3['$1']);}},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x476)]=function(){const _0x133f24=_0x54b1a4,_0x869e96=BattleManager[_0x133f24(0x8e7)]();if(_0x869e96&&_0x869e96[_0x133f24(0x579)]()){if(_0x869e96['isForAnyoneFocusFriends']()){if(_0x133f24(0xa8a)===_0x133f24(0xa8a)){if(this['_lastActor']&&this['_enemies'][_0x133f24(0xd4a)](this['_lastActor'])){const _0x2b84ef=this[_0x133f24(0xa4d)][_0x133f24(0x940)](this[_0x133f24(0xcac)]);return this[_0x133f24(0x621)](_0x2b84ef);}else{if(_0x133f24(0xc02)!==_0x133f24(0xbaa))return this[_0x133f24(0x325)]();else for(const _0x259cde of _0x35a668){const _0x470ba3=_0x31e1bd[0x0]['format'](_0x259cde[0x0],_0x2a34e3[0x0]),_0x27ee9f=_0x53aa00[0x1]['format'](_0x259cde[0x1],_0x164963[0x1])[_0x133f24(0x2f4)](),_0x25c2ef=new _0x4a618a(_0x4d3a1e[_0x133f24(0xd76)](_0x27ee9f),'i');_0x3e42c3[_0x470ba3]=_0x25c2ef;}}}else _0x503ddc=!![];}}if(this[_0x133f24(0xa23)]&&this[_0x133f24(0xa4d)][_0x133f24(0xd4a)](this['_lastEnemy'])){if(_0x133f24(0x36a)!==_0x133f24(0x20f)){const _0x3ab303=this[_0x133f24(0xa4d)][_0x133f24(0x940)](this[_0x133f24(0xa23)]);this[_0x133f24(0x621)](_0x3ab303);}else _0x429e2f+=_0xd6d9aa,_0x20e699+=_0x32086b;}else this['autoSelectPriority']();},Window_BattleEnemy[_0x54b1a4(0x375)]['autoSelectPriority']=function(){const _0x5f25cd=_0x54b1a4,_0x4d81eb=BattleManager[_0x5f25cd(0x8e7)]();if(_0x4d81eb&&_0x4d81eb[_0x5f25cd(0x579)]()){const _0x3e9c23=$gameParty[_0x5f25cd(0x6a6)]()[0x0];let _0x1c718a=this['_enemies'][_0x5f25cd(0x940)](_0x3e9c23);const _0x526087=_0x4d81eb[_0x5f25cd(0x7b6)]()[_0x5f25cd(0x508)];if(_0x526087[_0x5f25cd(0x298)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x5f25cd(0x621)](_0x1c718a);return;}else{if(_0x526087[_0x5f25cd(0x298)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x5f25cd(0x621)](_0x1c718a-0x1);return;}}}const _0x141a49=VisuMZ['BattleCore']['Settings'][_0x5f25cd(0x809)];let _0x5aaa4d=![];$gameSystem['isSideView']()?_0x5aaa4d=_0x141a49[_0x5f25cd(0x34d)]:_0x5aaa4d=_0x141a49[_0x5f25cd(0x560)],this[_0x5f25cd(0x621)](_0x5aaa4d?this[_0x5f25cd(0xa6e)]()-0x1:0x0);},Window_BattleEnemy[_0x54b1a4(0x375)]['callOkHandler']=function(){const _0x4b702f=_0x54b1a4;Window_Selectable['prototype'][_0x4b702f(0xc38)][_0x4b702f(0xd6c)](this);if(this[_0x4b702f(0x717)]()['isEnemy']())this[_0x4b702f(0xa23)]=this['enemy']();if(this[_0x4b702f(0x717)]()['isActor']())this['_lastActor']=this[_0x4b702f(0x717)]();},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x643)]=function(_0x204777){const _0xc1306=_0x54b1a4;Window_Selectable[_0xc1306(0x375)][_0xc1306(0x643)]['call'](this,_0x204777),$gameTroop[_0xc1306(0x643)](this[_0xc1306(0x717)]()),$gameParty[_0xc1306(0x643)](this[_0xc1306(0x717)]());if(!this[_0xc1306(0x717)]())return;if(this[_0xc1306(0x7fe)]()){if('ooFYi'===_0xc1306(0xa5c)){const _0x3b51ef=SceneManager['_scene'][_0xc1306(0x2d5)];if(this[_0xc1306(0x717)]()['isActor']()){if(_0xc1306(0x5d5)===_0xc1306(0x5d5))_0x3b51ef[_0xc1306(0x643)](this[_0xc1306(0x717)]()[_0xc1306(0x58f)]());else{const _0xef141e=_0x469cf3['item']();this[_0xc1306(0x519)](_0xc1306(0x767),_0x1d661b,[_0x1ea944],_0xef141e[_0xc1306(0xbb4)]);}}else{if(_0xc1306(0x9fb)===_0xc1306(0x6cf)){_0x360baa[_0xc1306(0xd45)]()&&_0x2a4402[_0xc1306(0x69d)]>0x1&&this[_0xc1306(0xaf0)](_0xc1306(0x3cf),this['selectAllEnemies'][_0xc1306(0xc8f)](this));if(_0x55412c[_0xc1306(0x579)]()){const _0x80c1b2=_0x4dd6b6['aliveMembers']();_0x17ef1d=_0x181462[_0xc1306(0x645)](_0x80c1b2),_0x3bcbd5[_0xc1306(0xd45)]()&&_0x80c1b2['length']>0x1&&this[_0xc1306(0xaf0)](_0xc1306(0xc1c),this[_0xc1306(0xd97)][_0xc1306(0xc8f)](this));}}else _0x3b51ef[_0xc1306(0x23a)]();}}else{const _0x542ea0=_0x5c4275[_0xc1306(0xcfe)](_0x5a0939);this[_0xc1306(0x7e0)][_0xc1306(0x9e2)]=0x0,_0x542ea0[_0xc1306(0xa2a)](this['processBorderActor']['bind'](this,_0x542ea0));}}},Window_BattleEnemy['prototype']['meetsSelectFrontviewActorConditions']=function(){const _0x2c5cc7=_0x54b1a4;if(!this[_0x2c5cc7(0x739)])return![];if($gameSystem[_0x2c5cc7(0xc91)]())return![];const _0x60bd33=SceneManager[_0x2c5cc7(0xc22)][_0x2c5cc7(0xd92)](),_0x44cfcb=[_0x2c5cc7(0x761),_0x2c5cc7(0xd3a),'xp',_0x2c5cc7(0x7f7),'border'];return _0x44cfcb[_0x2c5cc7(0xd4a)](_0x60bd33);},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0xcf1)]=function(){const _0x4f5cf4=_0x54b1a4,_0x2fb87=SceneManager['_scene'][_0x4f5cf4(0x2d5)];_0x2fb87[_0x4f5cf4(0x340)](),_0x2fb87[_0x4f5cf4(0x936)](!![]),_0x2fb87[_0x4f5cf4(0x742)](),_0x2fb87['deselect']();const _0x367234=SceneManager[_0x4f5cf4(0xc22)][_0x4f5cf4(0xd92)](),_0x302d74=['xp','portrait','border'];if(_0x302d74[_0x4f5cf4(0xd4a)](_0x367234)){const _0x7f0cbb=SceneManager[_0x4f5cf4(0xc22)][_0x4f5cf4(0x89f)];_0x7f0cbb[_0x4f5cf4(0xbcd)]['y']=0x0;}},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x97b)]=function(){const _0x4145ee=_0x54b1a4,_0x1ff0f6=SceneManager[_0x4145ee(0xc22)][_0x4145ee(0x2d5)];_0x1ff0f6[_0x4145ee(0x5e6)](),_0x1ff0f6[_0x4145ee(0x936)](![]),_0x1ff0f6[_0x4145ee(0x23a)]();const _0x53ff0d=SceneManager[_0x4145ee(0xc22)]['_statusWindow'];_0x53ff0d[_0x4145ee(0xbcd)]['y']=0x1;},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0x838)]=function(){const _0x18e80d=_0x54b1a4,_0x4bc6ca=BattleManager[_0x18e80d(0x8e7)]();if(_0x4bc6ca)_0x4bc6ca['setTargetBattlerKey'](_0x18e80d(0x708));this[_0x18e80d(0x983)]();},Window_BattleEnemy[_0x54b1a4(0x375)][_0x54b1a4(0xd97)]=function(){const _0x142c89=_0x54b1a4,_0x4fda0b=BattleManager[_0x142c89(0x8e7)]();if(_0x4fda0b)_0x4fda0b[_0x142c89(0x802)](_0x142c89(0xbd3));this[_0x142c89(0x983)]();},Window_BattleItem['prototype']['includes']=function(_0xea4b06){const _0x56bf8d=_0x54b1a4;if(!_0xea4b06)return![];return _0xea4b06[_0x56bf8d(0x502)]===0x0||_0xea4b06[_0x56bf8d(0x502)]===0x1;};function Window_AutoBattleCancel(){const _0xf45e76=_0x54b1a4;this[_0xf45e76(0xbc1)](...arguments);}Window_AutoBattleCancel[_0x54b1a4(0x375)]=Object[_0x54b1a4(0x7d5)](Window_Base[_0x54b1a4(0x375)]),Window_AutoBattleCancel[_0x54b1a4(0x375)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)]=function(_0x267863){const _0x4f3693=_0x54b1a4;Window_Base[_0x4f3693(0x375)][_0x4f3693(0xbc1)][_0x4f3693(0xd6c)](this,_0x267863),this[_0x4f3693(0xb88)](this[_0x4f3693(0xa88)]()),this[_0x4f3693(0x742)]();},Window_AutoBattleCancel[_0x54b1a4(0x375)][_0x54b1a4(0xa88)]=function(){const _0x50b501=_0x54b1a4;return VisuMZ[_0x50b501(0x387)][_0x50b501(0x916)][_0x50b501(0xc85)][_0x50b501(0xd58)];},Window_AutoBattleCancel[_0x54b1a4(0x375)][_0x54b1a4(0x742)]=function(){const _0x10ea12=_0x54b1a4;this[_0x10ea12(0xc4e)]['clear']();const _0x59fdea=VisuMZ[_0x10ea12(0x387)][_0x10ea12(0x916)][_0x10ea12(0xc85)]['AutoBattleMsg'],_0x2592ea=_0x59fdea[_0x10ea12(0xd76)](this['okButtonText'](),this[_0x10ea12(0x300)]()),_0x121729=this[_0x10ea12(0x9d8)](_0x2592ea)['width'],_0x1ef8f6=Math[_0x10ea12(0x8a3)]((this[_0x10ea12(0xc0c)]-_0x121729)/0x2);this[_0x10ea12(0xb2c)](_0x2592ea,_0x1ef8f6,0x0,_0x121729);},Window_AutoBattleCancel['prototype'][_0x54b1a4(0x436)]=function(){const _0x27ddaa=_0x54b1a4;return Imported[_0x27ddaa(0x2e5)]?TextManager[_0x27ddaa(0xa3e)]('ok'):VisuMZ[_0x27ddaa(0x387)]['Settings']['AutoBattle']['AutoBattleOK'];},Window_AutoBattleCancel[_0x54b1a4(0x375)][_0x54b1a4(0x300)]=function(){const _0x557046=_0x54b1a4;return Imported[_0x557046(0x2e5)]?TextManager[_0x557046(0xa3e)]('cancel'):VisuMZ[_0x557046(0x387)][_0x557046(0x916)][_0x557046(0xc85)][_0x557046(0x234)];},Window_AutoBattleCancel['prototype'][_0x54b1a4(0x879)]=function(){const _0x4c211f=_0x54b1a4;Window_Base[_0x4c211f(0x375)][_0x4c211f(0x879)][_0x4c211f(0xd6c)](this),this[_0x4c211f(0x45e)](),this[_0x4c211f(0x303)]();},Window_AutoBattleCancel['prototype'][_0x54b1a4(0x45e)]=function(){const _0x21eaac=_0x54b1a4;this[_0x21eaac(0x739)]=BattleManager[_0x21eaac(0xcb7)];},Window_AutoBattleCancel[_0x54b1a4(0x375)][_0x54b1a4(0x303)]=function(){const _0x1d84f7=_0x54b1a4;if(!BattleManager['_autoBattle'])return;(Input[_0x1d84f7(0xcf6)]('ok')||Input[_0x1d84f7(0xcf6)]('cancel')||TouchInput['isClicked']()||TouchInput[_0x1d84f7(0x353)]())&&(_0x1d84f7(0xd0a)!=='JByfH'?_0x224b47[_0x1d84f7(0x375)][_0x1d84f7(0xbd6)][_0x1d84f7(0xd6c)](this,_0x6563d6,_0x41b027,_0x5012bc,_0x4832f9):(SoundManager[_0x1d84f7(0x563)](),BattleManager['_autoBattle']=![],Input['clear'](),TouchInput[_0x1d84f7(0x207)]()));};function Window_EnemyName(){const _0x469731=_0x54b1a4;this[_0x469731(0xbc1)](...arguments);}Window_EnemyName[_0x54b1a4(0x375)]=Object[_0x54b1a4(0x7d5)](Window_StatusBase[_0x54b1a4(0x375)]),Window_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x3ac)]=Window_EnemyName,Window_EnemyName[_0x54b1a4(0x375)]['initialize']=function(_0x561639){const _0x5f499a=_0x54b1a4;this[_0x5f499a(0x614)]=_0x561639,this[_0x5f499a(0x912)]='';const _0xd0b69a=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x5f499a(0xd04)]()*0x4);Window_StatusBase[_0x5f499a(0x375)]['initialize']['call'](this,_0xd0b69a),this[_0x5f499a(0xb88)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x2d2)]=function(){const _0x18d530=_0x54b1a4;this[_0x18d530(0xaa3)]=0x0;},Window_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x717)]=function(){const _0x2dbd5a=_0x54b1a4;return $gameTroop[_0x2dbd5a(0x328)]()[this[_0x2dbd5a(0x614)]];},Window_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x879)]=function(){const _0x18c37c=_0x54b1a4;Window_StatusBase[_0x18c37c(0x375)][_0x18c37c(0x879)][_0x18c37c(0xd6c)](this),this['enemy']()&&this[_0x18c37c(0x717)]()['name']()!==this[_0x18c37c(0x912)]&&(this['_text']=this[_0x18c37c(0x717)]()[_0x18c37c(0x56b)](),this[_0x18c37c(0x742)]()),this['updateOpacity'](),this[_0x18c37c(0x37e)]();},Window_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x791)]=function(){const _0x153ae0=_0x54b1a4;if(!this[_0x153ae0(0x717)]()){if('PyHNB'==='BNgSH')this[_0x153ae0(0x9f1)]=_0x242c68;else{if(this[_0x153ae0(0xb79)]>0x0)this[_0x153ae0(0xb79)]-=0x10;}}else{if(this[_0x153ae0(0x717)]()[_0x153ae0(0x5b2)]()){if(this[_0x153ae0(0xb79)]>0x0)this[_0x153ae0(0xb79)]-=0x10;}else{if(SceneManager[_0x153ae0(0xc22)][_0x153ae0(0x8c2)]&&SceneManager['_scene']['_enemyWindow'][_0x153ae0(0xaae)]&&SceneManager[_0x153ae0(0xc22)][_0x153ae0(0x8c2)][_0x153ae0(0xa4d)][_0x153ae0(0xd4a)](this[_0x153ae0(0x717)]())){if('zqAZs'!==_0x153ae0(0xc55)){if(this[_0x153ae0(0xb79)]<0xff)this[_0x153ae0(0xb79)]+=0x10;}else{_0x3596b9[_0x153ae0(0x375)][_0x153ae0(0x357)][_0x153ae0(0xd6c)](this,_0x1438cf);if(this[_0x153ae0(0xb3b)]())this[_0x153ae0(0x7eb)](_0x44af8f);}}else this['contentsOpacity']>0x0&&(this[_0x153ae0(0xb79)]-=0x10);}}},Window_EnemyName['prototype'][_0x54b1a4(0x37e)]=function(){const _0x103d28=_0x54b1a4;if(!this[_0x103d28(0x717)]())return;SceneManager[_0x103d28(0xae0)]()?this['x']=Graphics[_0x103d28(0xb36)]-this[_0x103d28(0x717)]()['battler']()['_baseX']:this['x']=this[_0x103d28(0x717)]()[_0x103d28(0x887)]()[_0x103d28(0xc43)];this['x']-=Math[_0x103d28(0x68d)](this[_0x103d28(0x495)]/0x2),this['y']=this[_0x103d28(0x717)]()[_0x103d28(0x887)]()[_0x103d28(0xb10)]-Math[_0x103d28(0x68d)](this['lineHeight']()*1.5);const _0x53081c=VisuMZ[_0x103d28(0x387)][_0x103d28(0x916)]['Enemy'];this['x']+=_0x53081c[_0x103d28(0x4cf)]||0x0,this['y']+=_0x53081c[_0x103d28(0x5a5)]||0x0;},Window_EnemyName['prototype']['resetFontSettings']=function(){const _0x558434=_0x54b1a4;Window_Base[_0x558434(0x375)][_0x558434(0x213)][_0x558434(0xd6c)](this),this[_0x558434(0xc4e)]['fontSize']=VisuMZ[_0x558434(0x387)][_0x558434(0x916)]['Enemy'][_0x558434(0xba8)];},Window_EnemyName[_0x54b1a4(0x375)][_0x54b1a4(0x742)]=function(){const _0x3b0abb=_0x54b1a4;Window_StatusBase[_0x3b0abb(0x375)][_0x3b0abb(0x742)][_0x3b0abb(0xd6c)](this),this['contents'][_0x3b0abb(0x207)]();if(!this[_0x3b0abb(0x717)]())return;this[_0x3b0abb(0xd31)]();},Window_EnemyName['prototype']['drawEnemyName']=function(){const _0x457d1c=_0x54b1a4;this[_0x457d1c(0x912)]=this['enemy']()[_0x457d1c(0x56b)]();const _0x552535=this[_0x457d1c(0x9d8)](this[_0x457d1c(0x912)])[_0x457d1c(0x495)],_0x5c85fa=Math[_0x457d1c(0x68d)]((this[_0x457d1c(0xc0c)]-_0x552535)/0x2);this[_0x457d1c(0xb2c)](this[_0x457d1c(0x912)],_0x5c85fa,0x0,_0x552535+0x8);},Window_BattleLog['prototype'][_0x54b1a4(0x269)]=function(){const _0x316c7f=_0x54b1a4;return VisuMZ[_0x316c7f(0x387)]['Settings']['BattleLog'][_0x316c7f(0xbfd)];},Window_BattleLog['prototype'][_0x54b1a4(0x64c)]=function(){const _0x27c413=_0x54b1a4;return VisuMZ[_0x27c413(0x387)][_0x27c413(0x916)][_0x27c413(0x3a2)]['MessageWait'];},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x844)]=function(){const _0x3b771b=_0x54b1a4;return VisuMZ[_0x3b771b(0x387)][_0x3b771b(0x916)][_0x3b771b(0x3a2)][_0x3b771b(0xcb9)];},Window_BattleLog[_0x54b1a4(0x375)]['isFastForward']=function(){return![];},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x4b4)]=function(_0x229fc1,_0x1ec9ac){const _0x4e9712=_0x54b1a4;this[_0x4e9712(0x5a7)](_0x4e9712(0x9ca)),BattleManager[_0x4e9712(0x8b5)](_0x229fc1,_0x1ec9ac),this['callNextMethod']();},Window_BattleLog['prototype'][_0x54b1a4(0x9ca)]=function(){const _0x26e2c6=_0x54b1a4;this[_0x26e2c6(0x318)]();},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x519)]=function(_0x197f19){const _0x40ab10=_0x54b1a4,_0x4ac2b2=Array[_0x40ab10(0x375)][_0x40ab10(0xc27)][_0x40ab10(0xd6c)](arguments,0x1),_0x134885={'name':_0x197f19,'params':_0x4ac2b2},_0x4d668b=this[_0x40ab10(0xd34)][_0x40ab10(0x8bb)](_0x61ede2=>_0x61ede2[_0x40ab10(0x56b)])[_0x40ab10(0x940)]('actionSplicePoint');_0x4d668b>=0x0?this[_0x40ab10(0xd34)]['splice'](_0x4d668b,0x0,_0x134885):this[_0x40ab10(0xd34)][_0x40ab10(0x519)](_0x134885);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x5a7)]=function(_0x518622){const _0x3346eb=_0x54b1a4,_0xc3fdd4=Array['prototype'][_0x3346eb(0xc27)][_0x3346eb(0xd6c)](arguments,0x1);this[_0x3346eb(0xd34)][_0x3346eb(0x5a7)]({'name':_0x518622,'params':_0xc3fdd4});},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x4e6)]=function(){const _0x4ca167=_0x54b1a4;if(!$gameTemp['isPlaytest']())return;console[_0x4ca167(0x54a)](this[_0x4ca167(0xd34)][_0x4ca167(0x8bb)](_0x57fddc=>_0x57fddc[_0x4ca167(0x56b)])[_0x4ca167(0xbe6)]('\x0a'));},VisuMZ[_0x54b1a4(0x387)]['Window_BattleLog_refresh']=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x742)],Window_BattleLog['prototype'][_0x54b1a4(0x742)]=function(){this['_requestRefresh']=!![];},VisuMZ[_0x54b1a4(0x387)]['Window_BattleLog_update']=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x879)],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x879)]=function(){const _0xe302db=_0x54b1a4;VisuMZ[_0xe302db(0x387)][_0xe302db(0xa7b)]['call'](this);if(this['_requestRefresh'])this['processRefresh']();},Window_BattleLog['prototype'][_0x54b1a4(0x619)]=function(){const _0x310886=_0x54b1a4;this[_0x310886(0x7cf)]=![],VisuMZ[_0x310886(0x387)][_0x310886(0x461)][_0x310886(0xd6c)](this);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x22b)]=function(_0x654ed5){const _0x40cb84=_0x54b1a4;let _0x3ce184=VisuMZ[_0x40cb84(0x387)][_0x40cb84(0x916)][_0x40cb84(0x3a2)][_0x40cb84(0x483)][_0x40cb84(0x6d1)]()[_0x40cb84(0x2f4)](),_0x4d3ad4=this[_0x40cb84(0x56e)][_0x654ed5];if(_0x4d3ad4[_0x40cb84(0x298)](/<LEFT>/i)){if(_0x40cb84(0xa45)!==_0x40cb84(0x9f0))_0x3ce184=_0x40cb84(0xbb9);else{if(!_0x4d4c45['BattleCore'][_0x40cb84(0x2c7)])return![];const _0x18a1fa=_0x2e40c1[_0x40cb84(0x6a6)]()[_0x40cb84(0x661)](_0x5b5198=>_0x5b5198['isTpbCharged']()&&_0x5b5198['canInput']());return _0x18a1fa['length']>0x0&&_0x558425[_0x40cb84(0x6fe)]()!==_0x18a1fa[_0x18a1fa[_0x40cb84(0x69d)]-0x1];}}else{if(_0x4d3ad4[_0x40cb84(0x298)](/<CENTER>/i))_0x3ce184=_0x40cb84(0x8b9);else _0x4d3ad4[_0x40cb84(0x298)](/<RIGHT>/i)&&(_0x3ce184='right');}_0x4d3ad4=_0x4d3ad4[_0x40cb84(0x68b)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x4d3ad4=_0x4d3ad4[_0x40cb84(0x68b)](/\\I\[0\]/gi,'');const _0x3d5f2f=this['lineRect'](_0x654ed5);this[_0x40cb84(0xc4e)][_0x40cb84(0x406)](_0x3d5f2f['x'],_0x3d5f2f['y'],_0x3d5f2f[_0x40cb84(0x495)],_0x3d5f2f[_0x40cb84(0xdd7)]);const _0x14f685=this['textSizeEx'](_0x4d3ad4)[_0x40cb84(0x495)];let _0x3e9558=_0x3d5f2f['x'];if(_0x3ce184===_0x40cb84(0x8b9))_0x3e9558+=(_0x3d5f2f['width']-_0x14f685)/0x2;else _0x3ce184===_0x40cb84(0x5ff)&&(_0x3e9558+=_0x3d5f2f[_0x40cb84(0x495)]-_0x14f685);this[_0x40cb84(0xb2c)](_0x4d3ad4,_0x3e9558,_0x3d5f2f['y'],_0x14f685+0x8);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xcd7)]=function(_0x45c3d8){const _0x1e2e9f=_0x54b1a4;this['_lines'][_0x1e2e9f(0x519)](_0x45c3d8),this[_0x1e2e9f(0x742)](),this['callNextMethod']();},Window_BattleLog['prototype']['updateWaitMode']=function(){const _0x1e5b2b=_0x54b1a4;let _0x3e928d=![];switch(this[_0x1e5b2b(0xac8)]){case _0x1e5b2b(0x6f6):_0x3e928d=this[_0x1e5b2b(0xaca)][_0x1e5b2b(0x2e2)]();break;case _0x1e5b2b(0x43c):_0x3e928d=this[_0x1e5b2b(0xaca)]['isAnyoneMoving']();break;case'animation':_0x3e928d=this[_0x1e5b2b(0xaca)][_0x1e5b2b(0xdd0)]();break;case'float':_0x3e928d=this['_spriteset'][_0x1e5b2b(0x6f4)]();break;case _0x1e5b2b(0xad9):_0x3e928d=this['_spriteset']['isAnyoneJumping']();break;case'opacity':_0x3e928d=this['_spriteset'][_0x1e5b2b(0x7e6)]();break;}return!_0x3e928d&&(this[_0x1e5b2b(0xac8)]=''),_0x3e928d;},Window_BattleLog['prototype']['waitForAnimation']=function(){const _0x21aff2=_0x54b1a4;this[_0x21aff2(0xc6a)](_0x21aff2(0x49c));},Window_BattleLog[_0x54b1a4(0x375)]['waitForFloat']=function(){const _0x4e655f=_0x54b1a4;this[_0x4e655f(0xc6a)](_0x4e655f(0x26f));},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x7ef)]=function(){const _0x38a332=_0x54b1a4;this[_0x38a332(0xc6a)](_0x38a332(0xad9));},Window_BattleLog[_0x54b1a4(0x375)]['waitForOpacity']=function(){const _0x2b879f=_0x54b1a4;this[_0x2b879f(0xc6a)](_0x2b879f(0x9e2));},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xd5a)]=function(){const _0x4d8b36=_0x54b1a4,_0x49a2e9=VisuMZ[_0x4d8b36(0x387)][_0x4d8b36(0x916)][_0x4d8b36(0x3a2)];if(!_0x49a2e9[_0x4d8b36(0x219)])return;this[_0x4d8b36(0x519)](_0x4d8b36(0xcd7),_0x49a2e9[_0x4d8b36(0xce1)][_0x4d8b36(0xd76)]($gameTroop[_0x4d8b36(0xd0e)]())),this['push'](_0x4d8b36(0x2e8),_0x49a2e9[_0x4d8b36(0xda0)]),this[_0x4d8b36(0x519)](_0x4d8b36(0x207));},Window_BattleLog['prototype'][_0x54b1a4(0x4b6)]=function(_0x1843ce,_0x1fabf8,_0x5ca786){const _0x4e1003=_0x54b1a4;if(this[_0x4e1003(0x7b7)](_0x1fabf8))'SILAS'!==_0x4e1003(0x729)?_0x1e559['BattleCore'][_0x4e1003(0xcd8)][_0x4e1003(0xd6c)](this):BattleManager[_0x4e1003(0x8e4)]();else{if(_0x4e1003(0x380)!==_0x4e1003(0xdc1))this[_0x4e1003(0xaf1)](_0x1843ce,_0x1fabf8,_0x5ca786);else{this[_0x4e1003(0x78e)]={},this['_regionBattleback2']={};if(!_0x4684d7)return;const _0x556d9b=_0x18d2b6['note'];if(!_0x556d9b)return;const _0x1e6035=_0x556d9b[_0x4e1003(0x298)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x1e6035)for(const _0xf331a5 of _0x1e6035){_0xf331a5[_0x4e1003(0x298)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x2d248d=_0x250b57(_0x5e7a28['$1']),_0x447e17=_0x42d71a(_0x223b33['$2']),_0x29e47f=_0x447e17===0x1?this[_0x4e1003(0x78e)]:this[_0x4e1003(0x3ab)],_0x487dd0=_0x43c433(_0x93591f['$3']);_0x29e47f[_0x2d248d]=_0x487dd0;}}}},Window_BattleLog['prototype'][_0x54b1a4(0x7b7)]=function(_0x30c15e){const _0x25a01d=_0x54b1a4;if(!SceneManager[_0x25a01d(0xbbd)]())return![];if(!_0x30c15e)return![];if(!_0x30c15e[_0x25a01d(0x7b6)]())return![];if(_0x30c15e[_0x25a01d(0x7b6)]()['note'][_0x25a01d(0x298)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x25a01d(0xaa6)](_0x30c15e[_0x25a01d(0x7b6)]()))return!![];return![];},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xaf1)]=function(_0x3c7f8d,_0x282ba5,_0x138106){const _0x167365=_0x54b1a4,_0x87c36f=_0x282ba5['item']();this['setupActionSet'](_0x3c7f8d,_0x282ba5,_0x138106),this[_0x167365(0xa0f)](_0x3c7f8d,_0x282ba5,_0x138106),this[_0x167365(0xd43)](_0x3c7f8d,_0x282ba5,_0x138106);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xc1a)]=function(_0x35181c,_0x58d417){const _0x44e4cc=_0x54b1a4,_0x2442e2=VisuMZ[_0x44e4cc(0x387)][_0x44e4cc(0x916)]['BattleLog'];_0x2442e2['ActionCenteredName']&&this['push']('addText',_0x44e4cc(0x331)[_0x44e4cc(0xd76)](DataManager['battleDisplayText'](_0x58d417)));if(DataManager[_0x44e4cc(0xcca)](_0x58d417)){if(_0x2442e2[_0x44e4cc(0x490)])this[_0x44e4cc(0x88d)](_0x58d417['message1'],_0x35181c,_0x58d417);if(_0x2442e2[_0x44e4cc(0xd60)])this[_0x44e4cc(0x88d)](_0x58d417[_0x44e4cc(0x849)],_0x35181c,_0x58d417);}else{if(_0x44e4cc(0x238)===_0x44e4cc(0x238)){if(_0x2442e2[_0x44e4cc(0x1f4)])this[_0x44e4cc(0x88d)](TextManager[_0x44e4cc(0xa87)],_0x35181c,_0x58d417);}else this['setHandler'](_0x44e4cc(0xc1c),this['selectAllActors'][_0x44e4cc(0xc8f)](this));}},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x5d7)]=function(_0x16061e,_0x168d53,_0x50fabb){const _0x15687c=_0x54b1a4,_0x4073a2=_0x168d53[_0x15687c(0x7b6)]();this[_0x15687c(0xc1a)](_0x16061e,_0x4073a2),this['push'](_0x15687c(0xc60),_0x16061e,_0x50fabb,!![]),this[_0x15687c(0x519)](_0x15687c(0xab0),_0x16061e,_0x168d53),this[_0x15687c(0x519)](_0x15687c(0x83f)),this[_0x15687c(0x519)](_0x15687c(0x44d),_0x16061e,_0x168d53),this[_0x15687c(0x519)]('waitForAnimation');},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xa0f)]=function(_0x1a221f,_0x2309b6,_0x29b12a){const _0x4defd2=_0x54b1a4;if(this[_0x4defd2(0xa56)](_0x2309b6))_0x4defd2(0xdba)===_0x4defd2(0xdba)?this[_0x4defd2(0x864)](_0x1a221f,_0x2309b6,_0x29b12a):this[_0x4defd2(0x4d3)]=![];else{if(this[_0x4defd2(0xb86)](_0x2309b6))this[_0x4defd2(0x9f5)](_0x1a221f,_0x2309b6,_0x29b12a);else _0x2309b6[_0x4defd2(0xb2a)]()?'sDOjC'===_0x4defd2(0x9ae)?this['targetActionSet'](_0x1a221f,_0x2309b6,_0x29b12a):_0x58444a[_0x4defd2(0x642)](this):_0x4defd2(0x743)!==_0x4defd2(0x743)?(_0x31bb88[_0x4defd2(0x387)]['BattleManager_makeActionOrders'][_0x4defd2(0xd6c)](this),this['_actionBattlers']=this[_0x4defd2(0xbe4)][_0x4defd2(0x661)](_0x50118d=>_0x50118d&&_0x50118d[_0x4defd2(0x9f2)]())):this[_0x4defd2(0x71e)](_0x1a221f,_0x2309b6,_0x29b12a);}},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x99d)]=function(_0x4a378b,_0x426148,_0x5d3354,_0x9e373){const _0x3e3437=_0x54b1a4;if(_0x426148){const _0x44804a=_0x4a378b[_0x3e3437(0x887)]();this[_0x3e3437(0x519)](_0x3e3437(0xae8),[_0x4a378b],_0x5d3354,_0x9e373),this['push'](_0x3e3437(0xd98),_0x4a378b,_0x44804a[_0x3e3437(0x6f7)],_0x44804a['_homeY'],_0x9e373,![],_0x3e3437(0xad4)),this[_0x3e3437(0x519)](_0x3e3437(0x676),[_0x4a378b],_0x3e3437(0x482)),this[_0x3e3437(0x519)](_0x3e3437(0x83f)),this[_0x3e3437(0x519)]('requestMotion',[_0x4a378b],_0x3e3437(0x572));}},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xa56)]=function(_0x586d83){const _0x535daa=_0x54b1a4;if(!_0x586d83['isPhysical']())return![];if(!_0x586d83[_0x535daa(0x5cd)]())return![];if(!_0x586d83['isForOpponent']())return![];return VisuMZ[_0x535daa(0x387)]['Settings'][_0x535daa(0x493)][_0x535daa(0xa09)];},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x864)]=function(_0x5ec138,_0x1e4601,_0x2ea3da){const _0x4a5508=_0x54b1a4,_0x1865ef=_0x5ec138[_0x4a5508(0x5b5)]()['type']<0x2,_0x158a4b=0x14,_0x1c4ec8=0x30;_0x1865ef&&_0x2ea3da[0x0]&&_0x5ec138[_0x4a5508(0xa2c)]()!==_0x2ea3da[0x0][_0x4a5508(0xa2c)]()&&(this[_0x4a5508(0x519)](_0x4a5508(0xae8),[_0x5ec138],_0x1c4ec8,_0x158a4b),this[_0x4a5508(0x519)](_0x4a5508(0xcad),_0x5ec138,_0x2ea3da,_0x4a5508(0x752),_0x158a4b,!![],_0x4a5508(0xad4),!![]),this[_0x4a5508(0x519)](_0x4a5508(0x676),[_0x5ec138],_0x4a5508(0x572)),this[_0x4a5508(0x519)](_0x4a5508(0x83f)));let _0x56b097=_0x1e4601[_0x4a5508(0x8a7)]()?this[_0x4a5508(0x423)](_0x5ec138):0x1;for(let _0x21b7a=0x0;_0x21b7a<_0x56b097;_0x21b7a++){if(_0x4a5508(0x709)!==_0x4a5508(0x709)){if(!_0x42d9c5[_0x4a5508(0xc91)]())return;const _0x1756c8=this[_0x4a5508(0x887)]();if(!_0x1756c8)return;_0x1756c8[_0x4a5508(0xb90)](_0x25e8f8,_0x32927e,_0x35aba7);}else{if(_0x1e4601[_0x4a5508(0x8a7)]()&&_0x5ec138['isActor']()){if('FHoMM'!==_0x4a5508(0xa3b)){const _0x1bb7da=_0x2bfba5[_0x4a5508(0x7f0)],_0x1e99ca=this[_0x4a5508(0xa1f)](0x1,!![]);let _0x511373=_0x898122?_0x3d25cf['boxWidth']-_0x1bb7da:0x0;_0x511373+=_0x36bbb6?_0x29b617[_0x4a5508(0xbcf)]:_0x5d1d3b['ENEMY_OFFSET_X'];const _0x94586c=[_0x4a5508(0x3a8)][_0x4a5508(0xd4a)](this[_0x4a5508(0xd92)]())?0x0:this['_statusWindow']['height'];let _0x3b1837=_0xe24ad6['boxHeight']-_0x94586c-_0x1e99ca;return _0x3b1837+=_0x2ca9e3?_0x1fce11[_0x4a5508(0xa85)]:_0x398176[_0x4a5508(0x8cd)],new _0x5d9c8e(_0x511373,_0x3b1837,_0x1bb7da,_0x1e99ca);}else this[_0x4a5508(0x519)]('setActiveWeaponSet',_0x5ec138,_0x21b7a);}if(_0x1e4601[_0x4a5508(0x7b6)]()[_0x4a5508(0xbb4)]<0x0){if(_0x4a5508(0xa60)===_0x4a5508(0x76b)){if(!this[_0x4a5508(0x7b6)]()[_0x4a5508(0x220)][_0x4a5508(0xa1a)])return 0x0;let _0x1ceb27=_0x410ec1[_0x4a5508(0x387)][_0x4a5508(0x916)][_0x4a5508(0x5f5)][_0x4a5508(0x6f5)][_0x4a5508(0xd6c)](this,_0x41ee3a);return _0x1ceb27=this[_0x4a5508(0x75d)]['criticalHitRate']*_0x1ceb27+this['_multipliers'][_0x4a5508(0x75c)],_0x1ceb27;}else this[_0x4a5508(0x935)](_0x5ec138,_0x1e4601,_0x2ea3da);}else this[_0x4a5508(0x71e)](_0x5ec138,_0x1e4601,_0x2ea3da);}}if(_0x1e4601[_0x4a5508(0x8a7)]()&&_0x5ec138['isActor']()){if(_0x4a5508(0x700)!==_0x4a5508(0x984))this[_0x4a5508(0x519)](_0x4a5508(0x4d5),_0x5ec138);else return this[_0x4a5508(0xc0d)]()['isActor']()&&!this[_0x4a5508(0xc0d)]()[_0x4a5508(0x811)]();}this[_0x4a5508(0x519)]('applyImmortal',_0x5ec138,_0x2ea3da,![]),this[_0x4a5508(0x99d)](_0x5ec138,_0x1865ef,_0x1c4ec8,_0x158a4b);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xb86)]=function(_0x489fd5){const _0x57633c=_0x54b1a4;if(!_0x489fd5[_0x57633c(0x384)]())return![];if(!_0x489fd5[_0x57633c(0xc53)]())return![];if(!_0x489fd5[_0x57633c(0x801)]())return![];return VisuMZ[_0x57633c(0x387)][_0x57633c(0x916)][_0x57633c(0x493)][_0x57633c(0xca2)];},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x9f5)]=function(_0x524802,_0x40a487,_0x1b82dd){const _0xfe478e=_0x54b1a4,_0xe0b610=_0x524802['getAttackMotion']()['type']<0x2,_0x586223=0x14,_0x30594e=0x30;if(_0xe0b610){this[_0xfe478e(0x519)](_0xfe478e(0xae8),[_0x524802],_0x30594e,_0x586223);const _0x410e4f=_0x1b82dd['length']>0x1?_0xfe478e(0xcb6):_0xfe478e(0x752);this[_0xfe478e(0x519)](_0xfe478e(0xcad),_0x524802,_0x1b82dd,_0x410e4f,_0x586223,!![],_0xfe478e(0xad4),!![]),this[_0xfe478e(0x519)](_0xfe478e(0x676),[_0x524802],_0xfe478e(0x572)),this[_0xfe478e(0x519)](_0xfe478e(0x83f));}let _0x2dc856=_0x40a487['isAttack']()?this[_0xfe478e(0x423)](_0x524802):0x1;for(let _0x4cbe57=0x0;_0x4cbe57<_0x2dc856;_0x4cbe57++){if(_0x40a487[_0xfe478e(0x8a7)]()&&_0x524802['isActor']()){if(_0xfe478e(0xac9)!=='VNkDU')this[_0xfe478e(0x519)](_0xfe478e(0x8d2),_0x524802,_0x4cbe57);else{if(!_0x3beeb3['isSideView']())return;_0x29c362[_0xfe478e(0x387)]['Window_BattleStatus_drawItemImage'][_0xfe478e(0xd6c)](this,_0x5154b7);}}this[_0xfe478e(0x71e)](_0x524802,_0x40a487,_0x1b82dd);}if(_0x40a487['isAttack']()&&_0x524802[_0xfe478e(0xa2c)]()){if(_0xfe478e(0x682)!==_0xfe478e(0x682)){const _0x5df8b2=_0x5611b0['BattleCore'][_0xfe478e(0x916)][_0xfe478e(0x809)];_0x5df8b2[_0xfe478e(0x7ba)]?this[_0xfe478e(0x476)]():this[_0xfe478e(0x325)]();}else this[_0xfe478e(0x519)](_0xfe478e(0x4d5),_0x524802);}this[_0xfe478e(0x519)](_0xfe478e(0xc60),_0x524802,_0x1b82dd,![]),this[_0xfe478e(0x99d)](_0x524802,_0xe0b610,_0x30594e,_0x586223);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x935)]=function(_0x3eacf7,_0x21e4f4,_0x5d3738){const _0x30e895=_0x54b1a4,_0x26b94f=_0x21e4f4['item']();for(const _0x5bd883 of _0x5d3738){if(!_0x5bd883)continue;this[_0x30e895(0x519)](_0x30e895(0x357),_0x3eacf7,_0x21e4f4),this[_0x30e895(0x519)]('waitCount',Sprite_Battler[_0x30e895(0xd53)]),this[_0x30e895(0x519)]('showAnimation',_0x3eacf7,[_0x5bd883],_0x26b94f['animationId']),this[_0x30e895(0x519)](_0x30e895(0x2e8),0x18),this[_0x30e895(0x519)](_0x30e895(0x4b4),_0x3eacf7,_0x5bd883);}},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x71e)]=function(_0x4b9544,_0x102b2d,_0x56a424){const _0x1447cf=_0x54b1a4,_0x580d16=_0x102b2d['item']();let _0x5cc8ce=_0x102b2d[_0x1447cf(0x8a7)]()?0x1+_0x4b9544[_0x1447cf(0x921)]():0x1;while(_0x5cc8ce--){this['push']('performAction',_0x4b9544,_0x102b2d),this[_0x1447cf(0x519)](_0x1447cf(0x2e8),Sprite_Battler[_0x1447cf(0xd53)]),this['push'](_0x1447cf(0x767),_0x4b9544,_0x56a424[_0x1447cf(0xafc)](),_0x580d16['animationId']),this[_0x1447cf(0x519)](_0x1447cf(0x6c1));}for(const _0xd9baca of _0x56a424){if(!_0xd9baca)continue;this[_0x1447cf(0x519)](_0x1447cf(0x4b4),_0x4b9544,_0xd9baca);}},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xd43)]=function(_0x693cb5,_0x2e3fc5,_0x4243bb){const _0xdaa5e7=_0x54b1a4,_0x5e5a21=_0x2e3fc5[_0xdaa5e7(0x7b6)]();this[_0xdaa5e7(0x519)]('applyImmortal',_0x693cb5,_0x4243bb,![]),this['push'](_0xdaa5e7(0xae5)),this[_0xdaa5e7(0x519)](_0xdaa5e7(0xd9f)),this[_0xdaa5e7(0x519)]('clear'),this[_0xdaa5e7(0x519)](_0xdaa5e7(0xd17),_0x693cb5),this['push'](_0xdaa5e7(0x83f));},Window_BattleLog['prototype'][_0x54b1a4(0xdda)]=function(_0x109cbb){},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xd29)]=Window_BattleLog['prototype'][_0x54b1a4(0xb7b)],Window_BattleLog['prototype'][_0x54b1a4(0xb7b)]=function(_0x34fe61){const _0x3c5072=_0x54b1a4;if(!VisuMZ[_0x3c5072(0x387)][_0x3c5072(0x916)][_0x3c5072(0x3a2)][_0x3c5072(0x72e)])return;VisuMZ[_0x3c5072(0x387)][_0x3c5072(0xd29)][_0x3c5072(0xd6c)](this,_0x34fe61);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x51a)]=function(_0x57d267){const _0x12ce17=_0x54b1a4;this[_0x12ce17(0x519)](_0x12ce17(0x4c4),_0x57d267);VisuMZ['BattleCore'][_0x12ce17(0x916)][_0x12ce17(0x493)][_0x12ce17(0xdc7)]&&this['push'](_0x12ce17(0x767),_0x57d267,[BattleManager[_0x12ce17(0x644)]],-0x1);if(!VisuMZ[_0x12ce17(0x387)][_0x12ce17(0x916)]['BattleLog'][_0x12ce17(0xbf5)])return;this[_0x12ce17(0x519)](_0x12ce17(0xcd7),TextManager['counterAttack'][_0x12ce17(0xd76)](_0x57d267['name']()));},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x6ef)]=function(_0x98043b){const _0x41458c=_0x54b1a4;this[_0x41458c(0x519)](_0x41458c(0xcb2),_0x98043b);if(!VisuMZ[_0x41458c(0x387)][_0x41458c(0x916)]['BattleLog'][_0x41458c(0x6e0)])return;this[_0x41458c(0x519)](_0x41458c(0xcd7),TextManager[_0x41458c(0x61c)]['format'](_0x98043b['name']()));},Window_BattleLog[_0x54b1a4(0x375)]['displayReflectionPlayBack']=function(_0x319040,_0x5740a6){const _0x2e5998=_0x54b1a4;if(VisuMZ['BattleCore'][_0x2e5998(0x916)]['ActionSequence'][_0x2e5998(0x67e)]){const _0x53dd00=_0x5740a6[_0x2e5998(0x7b6)]();this[_0x2e5998(0x519)](_0x2e5998(0x767),_0x319040,[_0x319040],_0x53dd00['animationId']);}},Window_BattleLog[_0x54b1a4(0x375)]['displaySubstitute']=function(_0x4bc9ab,_0x217d04){const _0x3f695f=_0x54b1a4;this[_0x3f695f(0x519)](_0x3f695f(0x68a),_0x4bc9ab,_0x217d04);if(!VisuMZ[_0x3f695f(0x387)]['Settings'][_0x3f695f(0x3a2)][_0x3f695f(0x9fe)])return;const _0x6dfe81=_0x4bc9ab[_0x3f695f(0x56b)](),_0x48e000=TextManager[_0x3f695f(0x377)][_0x3f695f(0xd76)](_0x6dfe81,_0x217d04[_0x3f695f(0x56b)]());this[_0x3f695f(0x519)](_0x3f695f(0xcd7),_0x48e000);},VisuMZ['BattleCore'][_0x54b1a4(0x4bc)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x672)],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x672)]=function(_0x3791ea,_0x4cf737){const _0x225a2f=_0x54b1a4;VisuMZ[_0x225a2f(0x387)][_0x225a2f(0x4bc)][_0x225a2f(0xd6c)](this,_0x3791ea,_0x4cf737);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x38d)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xab5)],Window_BattleLog['prototype'][_0x54b1a4(0xab5)]=function(_0x458483){const _0x1eff0b=_0x54b1a4;if(!VisuMZ[_0x1eff0b(0x387)][_0x1eff0b(0x916)][_0x1eff0b(0x3a2)][_0x1eff0b(0x80d)])return;VisuMZ[_0x1eff0b(0x387)]['Window_BattleLog_displayFailure'][_0x1eff0b(0xd6c)](this,_0x458483);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x36e)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xa7f)],Window_BattleLog[_0x54b1a4(0x375)]['displayCritical']=function(_0x24e25f){const _0x5b5687=_0x54b1a4;if(!VisuMZ[_0x5b5687(0x387)][_0x5b5687(0x916)][_0x5b5687(0x3a2)]['ShowCritical'])return;VisuMZ[_0x5b5687(0x387)][_0x5b5687(0x36e)]['call'](this,_0x24e25f);},VisuMZ['BattleCore'][_0x54b1a4(0x315)]=Window_BattleLog['prototype']['displayMiss'],Window_BattleLog[_0x54b1a4(0x375)]['displayMiss']=function(_0x1917f3){const _0x145568=_0x54b1a4;!VisuMZ[_0x145568(0x387)][_0x145568(0x916)][_0x145568(0x3a2)][_0x145568(0x3ea)]?_0x145568(0xaf6)!==_0x145568(0xaf6)?_0xea3e91[_0x145568(0xc87)]=_0x5c273d[_0x145568(0x2f0)](_0x1767c3['$1']):this[_0x145568(0x519)]('performMiss',_0x1917f3):'zKeip'===_0x145568(0xc62)?(_0x54079d['select'](_0x3cbb51),_0x562157['processOk']()):VisuMZ[_0x145568(0x387)][_0x145568(0x315)][_0x145568(0xd6c)](this,_0x1917f3);},VisuMZ[_0x54b1a4(0x387)]['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x821)],Window_BattleLog['prototype'][_0x54b1a4(0x821)]=function(_0x5783ae){const _0x71d022=_0x54b1a4;if(!VisuMZ[_0x71d022(0x387)]['Settings'][_0x71d022(0x3a2)][_0x71d022(0x3ea)]){if('vmahR'!==_0x71d022(0x605))this[_0x71d022(0x532)]['close']();else{if(_0x5783ae['result']()['physical'])'GPnPw'!=='GPnPw'?(_0x1271e1[_0x71d022(0x387)]['Window_BattleLog_performMiss'][_0x71d022(0xd6c)](this,_0x228aac),this[_0x71d022(0x318)]()):this['push']('performEvasion',_0x5783ae);else{if(_0x71d022(0xc04)==='cyBpH'){if(!_0x2c2b72['isSceneBattle']())return;if(!_0x12a7c6[_0x71d022(0xd1c)])return;const _0x2b5e6d=_0x125edf[_0x71d022(0xc22)][_0x71d022(0xaca)];if(!_0x2b5e6d)return;_0x48e1be[_0x71d022(0x97a)](_0x24194e,_0x54c290);const _0x225534=_0x1d4042[_0x71d022(0x9ed)]||0x1,_0x340083=_0x3a26da['Duration']||0x1,_0x19e600=_0x11f6af[_0x71d022(0x4e4)]||'Linear';_0x2b5e6d[_0x71d022(0x5fa)](_0x225534,_0x340083,_0x19e600);}else this[_0x71d022(0x519)]('performMagicEvasion',_0x5783ae);}}}else VisuMZ[_0x71d022(0x387)][_0x71d022(0x3e9)][_0x71d022(0xd6c)](this,_0x5783ae);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x413)]=function(_0x20d3e7){const _0x274966=_0x54b1a4;if(_0x20d3e7['result']()[_0x274966(0x77a)]){_0x20d3e7[_0x274966(0xb6e)]=0x0;_0x20d3e7['result']()['hpDamage']>0x0&&!_0x20d3e7[_0x274966(0xb45)]()[_0x274966(0xbb0)]&&(_0x20d3e7[_0x274966(0xb6e)]=_0x20d3e7[_0x274966(0xb45)]()[_0x274966(0x5be)],this[_0x274966(0x519)](_0x274966(0x512),_0x20d3e7));_0x20d3e7[_0x274966(0xb45)]()['hpDamage']<0x0&&this[_0x274966(0x519)](_0x274966(0x86d),_0x20d3e7);if(VisuMZ[_0x274966(0x387)]['Settings']['BattleLog'][_0x274966(0x945)]){if(_0x274966(0xb14)===_0x274966(0xb14))this[_0x274966(0x519)](_0x274966(0xcd7),this[_0x274966(0xc90)](_0x20d3e7));else{if(this[_0x274966(0x857)]())return _0x8f5c3b;return _0x51a934=this[_0x274966(0xa91)](_0x10abd8),_0x54f081=this[_0x274966(0x8c1)](_0x161849),_0x5829c5;}}}},VisuMZ[_0x54b1a4(0x387)]['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x54b1a4(0x375)]['displayMpDamage'],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x358)]=function(_0x4b2dab){const _0x20e125=_0x54b1a4;if(!VisuMZ['BattleCore']['Settings'][_0x20e125(0x3a2)][_0x20e125(0x777)])return;VisuMZ['BattleCore'][_0x20e125(0x5f4)][_0x20e125(0xd6c)](this,_0x4b2dab);},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x837)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x76f)],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x76f)]=function(_0x5b8b53){const _0x18ded3=_0x54b1a4;if(!VisuMZ[_0x18ded3(0x387)]['Settings'][_0x18ded3(0x3a2)]['ShowTpDmg'])return;VisuMZ[_0x18ded3(0x387)][_0x18ded3(0x837)][_0x18ded3(0xd6c)](this,_0x5b8b53);},Window_BattleLog[_0x54b1a4(0x375)]['displayAffectedStatus']=function(_0x3bb4d0){const _0x5b015c=_0x54b1a4;_0x3bb4d0[_0x5b015c(0xb45)]()[_0x5b015c(0x426)]()&&(this[_0x5b015c(0x519)]('pushBaseLine'),this[_0x5b015c(0x40b)](_0x3bb4d0),this[_0x5b015c(0xaf4)](_0x3bb4d0),this[_0x5b015c(0x519)]('waitForNewLine'));},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xc31)]=function(_0x1c6227){const _0x4df71d=_0x54b1a4,_0x520d74=_0x1c6227['result'](),_0x25807b=_0x520d74[_0x4df71d(0x923)]();for(const _0x266b6a of _0x25807b){if(_0x4df71d(0x355)!=='gmotE'){const _0x152401=_0x1c6227['isActor']()?_0x266b6a[_0x4df71d(0x770)]:_0x266b6a[_0x4df71d(0x849)];_0x152401&&VisuMZ['BattleCore'][_0x4df71d(0x916)][_0x4df71d(0x3a2)][_0x4df71d(0xcdb)]&&(this[_0x4df71d(0x519)]('fnordAddedStates'),this[_0x4df71d(0x519)]('popBaseLine'),this['push']('pushBaseLine'),this['push']('addText',_0x152401[_0x4df71d(0xd76)](_0x1c6227[_0x4df71d(0x56b)]())),this[_0x4df71d(0x519)]('wait')),_0x266b6a['id']===_0x1c6227[_0x4df71d(0x243)]()&&this[_0x4df71d(0x519)](_0x4df71d(0xa84),_0x1c6227);}else _0x180873[_0x4df71d(0x375)][_0x4df71d(0xcd5)][_0x4df71d(0xd6c)](this),this['_spriteset']&&this['_spriteset'][_0x4df71d(0x879)](),_0x35f256[_0x4df71d(0x3a0)]&&_0x555ec1[_0x4df71d(0xc9d)]();}},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x4f3)]=function(){},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xb41)]=function(_0x5db16f){const _0x5b13cf=_0x54b1a4;if(!VisuMZ[_0x5b13cf(0x387)][_0x5b13cf(0x916)][_0x5b13cf(0x3a2)]['ShowRemovedState'])return;const _0x2f3fb3=_0x5db16f['result'](),_0x1ddae=_0x2f3fb3['removedStateObjects']();for(const _0x14a1ae of _0x1ddae){if(_0x5b13cf(0x75b)!==_0x5b13cf(0xda9))_0x14a1ae['message4']&&(this['push']('fnordRemovedStates'),this[_0x5b13cf(0x519)]('popBaseLine'),this['push'](_0x5b13cf(0xaed)),this[_0x5b13cf(0x519)](_0x5b13cf(0xcd7),_0x14a1ae['message4'][_0x5b13cf(0xd76)](_0x5db16f[_0x5b13cf(0x56b)]())),this[_0x5b13cf(0x519)]('wait'));else return _0x5b13cf(0xa2b)[_0x5b13cf(0xd76)](_0x249015(_0x196188['$1']));}},Window_BattleLog[_0x54b1a4(0x375)]['fnordRemovedStates']=function(){},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xaf4)]=function(_0x582d80){const _0x3f4c5c=_0x54b1a4,_0x21a62a=VisuMZ['BattleCore']['Settings']['BattleLog'],_0x4d2bef=_0x582d80[_0x3f4c5c(0xb45)]();if(_0x21a62a[_0x3f4c5c(0xd9b)])this[_0x3f4c5c(0x8ee)](_0x582d80,_0x4d2bef[_0x3f4c5c(0x9ad)],TextManager[_0x3f4c5c(0x9e6)]);if(_0x21a62a['ShowAddedDebuff'])this[_0x3f4c5c(0x8ee)](_0x582d80,_0x4d2bef[_0x3f4c5c(0x3f9)],TextManager[_0x3f4c5c(0x291)]);if(_0x21a62a[_0x3f4c5c(0x1e7)])this[_0x3f4c5c(0x8ee)](_0x582d80,_0x4d2bef[_0x3f4c5c(0xd47)],TextManager[_0x3f4c5c(0x46e)]);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x8ee)]=function(_0x2fdac2,_0x141af0,_0x53e718){const _0x3b39f3=_0x54b1a4;for(const _0x3bd396 of _0x141af0){const _0xc96016=_0x53e718[_0x3b39f3(0xd76)](_0x2fdac2['name'](),TextManager[_0x3b39f3(0x907)](_0x3bd396));this[_0x3b39f3(0x519)](_0x3b39f3(0xd22)),this[_0x3b39f3(0x519)]('pushBaseLine'),this[_0x3b39f3(0x519)]('addText',_0xc96016),this[_0x3b39f3(0x519)](_0x3b39f3(0x755));}},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xa03)]=Window_BattleLog['prototype'][_0x54b1a4(0x207)],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x207)]=function(){const _0x5b96b4=_0x54b1a4;VisuMZ['BattleCore'][_0x5b96b4(0xa03)][_0x5b96b4(0xd6c)](this),this[_0x5b96b4(0x318)]();},VisuMZ['BattleCore'][_0x54b1a4(0x55a)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xaed)],Window_BattleLog[_0x54b1a4(0x375)]['pushBaseLine']=function(){const _0x255660=_0x54b1a4;VisuMZ[_0x255660(0x387)][_0x255660(0x55a)][_0x255660(0xd6c)](this),this[_0x255660(0x318)]();},VisuMZ[_0x54b1a4(0x387)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xd22)],Window_BattleLog['prototype']['popBaseLine']=function(){const _0x40d9c5=_0x54b1a4;VisuMZ[_0x40d9c5(0x387)][_0x40d9c5(0xbce)][_0x40d9c5(0xd6c)](this),this[_0x40d9c5(0x619)](),this[_0x40d9c5(0x318)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x5ad)]=Window_BattleLog[_0x54b1a4(0x375)]['popupDamage'],Window_BattleLog['prototype'][_0x54b1a4(0xd25)]=function(_0x179b17){const _0x2a46a0=_0x54b1a4;VisuMZ['BattleCore'][_0x2a46a0(0x5ad)][_0x2a46a0(0xd6c)](this,_0x179b17),this[_0x2a46a0(0x318)]();},Window_BattleLog['prototype'][_0x54b1a4(0xae5)]=function(){const _0x3e77e6=_0x54b1a4;let _0x3ef3ed=0x0;this[_0x3e77e6(0xba0)]['length']>0x0&&(_0x3ef3ed=this['_baseLineStack'][this[_0x3e77e6(0xba0)][_0x3e77e6(0x69d)]-0x1]),this[_0x3e77e6(0x56e)][_0x3e77e6(0x69d)]>_0x3ef3ed?this[_0x3e77e6(0x755)]():this[_0x3e77e6(0x318)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x43d)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xab0)],Window_BattleLog[_0x54b1a4(0x375)]['performActionStart']=function(_0x53875b,_0x2b13fa){const _0xc358fe=_0x54b1a4;VisuMZ[_0xc358fe(0x387)][_0xc358fe(0x43d)][_0xc358fe(0xd6c)](this,_0x53875b,_0x2b13fa),this[_0xc358fe(0x318)]();},VisuMZ['BattleCore']['Window_BattleLog_performAction']=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x357)],Window_BattleLog['prototype'][_0x54b1a4(0x357)]=function(_0x5f21b1,_0x111076){const _0x5a4014=_0x54b1a4;VisuMZ[_0x5a4014(0x387)][_0x5a4014(0x440)][_0x5a4014(0xd6c)](this,_0x5f21b1,_0x111076),this[_0x5a4014(0x318)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xa29)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xd17)],Window_BattleLog[_0x54b1a4(0x375)]['performActionEnd']=function(_0x133028){const _0x83cca5=_0x54b1a4;VisuMZ['BattleCore'][_0x83cca5(0xa29)][_0x83cca5(0xd6c)](this,_0x133028);for(const _0x2f8e18 of BattleManager['allBattleMembers']()){if(!_0x2f8e18)continue;if(_0x2f8e18['isDead']())continue;_0x2f8e18['performActionEndMembers']();}this[_0x83cca5(0x318)]();},VisuMZ[_0x54b1a4(0x387)]['Window_BattleLog_performDamage']=Window_BattleLog['prototype'][_0x54b1a4(0x512)],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x512)]=function(_0x190108){const _0x5b9664=_0x54b1a4;VisuMZ[_0x5b9664(0x387)][_0x5b9664(0x957)][_0x5b9664(0xd6c)](this,_0x190108),this[_0x5b9664(0x318)]();},VisuMZ[_0x54b1a4(0x387)]['Window_BattleLog_performMiss']=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xbb7)],Window_BattleLog[_0x54b1a4(0x375)]['performMiss']=function(_0x11e24d){const _0x1f82a1=_0x54b1a4;VisuMZ[_0x1f82a1(0x387)][_0x1f82a1(0x2ce)][_0x1f82a1(0xd6c)](this,_0x11e24d),this[_0x1f82a1(0x318)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x3bd)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x86d)],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x86d)]=function(_0x3a4ebc){const _0xe16e97=_0x54b1a4;VisuMZ[_0xe16e97(0x387)]['Window_BattleLog_performRecovery'][_0xe16e97(0xd6c)](this,_0x3a4ebc),this[_0xe16e97(0x318)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x9e9)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x2aa)],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x2aa)]=function(_0x504160){const _0x594fd5=_0x54b1a4;VisuMZ['BattleCore'][_0x594fd5(0x9e9)][_0x594fd5(0xd6c)](this,_0x504160),this[_0x594fd5(0x318)]();},VisuMZ['BattleCore'][_0x54b1a4(0x4d7)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xac2)],Window_BattleLog['prototype']['performMagicEvasion']=function(_0x3e0054){const _0x3a367e=_0x54b1a4;VisuMZ[_0x3a367e(0x387)][_0x3a367e(0x4d7)][_0x3a367e(0xd6c)](this,_0x3e0054),this[_0x3a367e(0x318)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xa90)]=Window_BattleLog[_0x54b1a4(0x375)]['performCounter'],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x4c4)]=function(_0x1b321f){const _0x4c72fb=_0x54b1a4;VisuMZ[_0x4c72fb(0x387)][_0x4c72fb(0xa90)][_0x4c72fb(0xd6c)](this,_0x1b321f),this[_0x4c72fb(0x318)]();},VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0xb4d)]=Window_BattleLog['prototype'][_0x54b1a4(0xcb2)],Window_BattleLog['prototype'][_0x54b1a4(0xcb2)]=function(_0x31069d){const _0x502aa7=_0x54b1a4;VisuMZ[_0x502aa7(0x387)][_0x502aa7(0xb4d)][_0x502aa7(0xd6c)](this,_0x31069d),this[_0x502aa7(0x318)]();},VisuMZ['BattleCore'][_0x54b1a4(0xb91)]=Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x68a)],Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x68a)]=function(_0x31cece,_0x43dba2){const _0x4e53b8=_0x54b1a4;VisuMZ[_0x4e53b8(0x387)]['Window_BattleLog_performSubstitute'][_0x4e53b8(0xd6c)](this,_0x31cece,_0x43dba2),this[_0x4e53b8(0x318)]();},VisuMZ[_0x54b1a4(0x387)]['Window_BattleLog_performCollapse']=Window_BattleLog['prototype'][_0x54b1a4(0xa84)],Window_BattleLog[_0x54b1a4(0x375)]['performCollapse']=function(_0x260a18){const _0x1de806=_0x54b1a4;VisuMZ[_0x1de806(0x387)]['Window_BattleLog_performCollapse']['call'](this,_0x260a18),this[_0x1de806(0x318)]();},Window_BattleLog[_0x54b1a4(0x375)]['performCastAnimation']=function(_0x5b7738,_0x39102a){const _0x1c8497=_0x54b1a4;_0x5b7738['performCastAnimation'](_0x39102a),this[_0x1c8497(0x318)]();},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xbc7)]=function(_0x5bf146,_0x275bd1){const _0x1902e4=_0x54b1a4,_0xd39f4b=_0x5bf146[_0x1902e4(0xba3)]();_0xd39f4b<=0x0?'vAplN'===_0x1902e4(0x411)?SoundManager[_0x1902e4(0x26d)]():(_0x38f690['BattleCore'][_0x1902e4(0x43d)]['call'](this,_0x3d831a,_0x2b0672),this[_0x1902e4(0x318)]()):this[_0x1902e4(0xcea)](_0x275bd1,_0xd39f4b);},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0xc60)]=function(_0x40fe24,_0x426f75,_0x2bad3c){const _0x4e5bcc=_0x54b1a4,_0x530b7f=[_0x40fe24][_0x4e5bcc(0x645)](_0x426f75);for(const _0x4804df of _0x530b7f){if(_0x4e5bcc(0x2a0)==='EULIL'){if(!_0x4804df)continue;_0x4804df['setImmortal'](_0x2bad3c);}else _0x54498f=_0x4e5bcc(0xbb9);}this[_0x4e5bcc(0x318)]();},Window_BattleLog[_0x54b1a4(0x375)][_0x54b1a4(0x2e8)]=function(_0x4ee848){const _0x3322b8=_0x54b1a4;this[_0x3322b8(0x1e9)]=_0x4ee848;},Window_BattleLog[_0x54b1a4(0x375)]['requestMotion']=function(_0xffa458,_0x19d0a4){const _0x21b912=_0x54b1a4;for(const _0x342829 of _0xffa458){if('qhGXP'!==_0x21b912(0x7ad)){if(!_0x342829)continue;_0x342829['requestMotion'](_0x19d0a4);}else{if(!_0x172d9b[_0x21b912(0xbbd)]())return;const _0xb56acb=_0x54cac1[_0x21b912(0x859)]();if(!_0xb56acb)return;_0xb56acb[_0x21b912(0xc6a)](_0x21b912(0x5ab));}}this['callNextMethod']();},Window_BattleLog[_0x54b1a4(0x375)]['performMoveToPoint']=function(_0x37af37,_0x287c03,_0x346524,_0x4e18ff,_0x168966,_0x3c01e3){const _0x166746=_0x54b1a4;_0x37af37[_0x166746(0x9b8)](_0x287c03,_0x346524,_0x4e18ff,_0x168966,_0x3c01e3,-0x1),this[_0x166746(0x318)]();},Window_BattleLog['prototype'][_0x54b1a4(0xcad)]=function(_0x546105,_0x1d9a02,_0x2091db,_0x2956f1,_0x219652,_0x32cd84,_0x12f833){const _0x4fa28b=_0x54b1a4,_0x19b18a=Math[_0x4fa28b(0x41c)](..._0x1d9a02[_0x4fa28b(0x8bb)](_0x1f6540=>_0x1f6540['battler']()[_0x4fa28b(0xc43)]-_0x1f6540['battler']()[_0x4fa28b(0xc30)]()/0x2)),_0x40cbe1=Math[_0x4fa28b(0x9db)](..._0x1d9a02[_0x4fa28b(0x8bb)](_0xa144e0=>_0xa144e0['battler']()['_baseX']+_0xa144e0['battler']()[_0x4fa28b(0xc30)]()/0x2)),_0x36cfa9=Math[_0x4fa28b(0x41c)](..._0x1d9a02[_0x4fa28b(0x8bb)](_0x2936b6=>_0x2936b6[_0x4fa28b(0x887)]()[_0x4fa28b(0xb10)]-_0x2936b6[_0x4fa28b(0x887)]()[_0x4fa28b(0xa2e)]())),_0x13a791=Math[_0x4fa28b(0x9db)](..._0x1d9a02['map'](_0x50d78f=>_0x50d78f['battler']()[_0x4fa28b(0xb10)])),_0x2eb316=_0x1d9a02[_0x4fa28b(0x661)](_0x1b0c2f=>_0x1b0c2f[_0x4fa28b(0xa2c)]())[_0x4fa28b(0x69d)],_0x2c3aba=_0x1d9a02[_0x4fa28b(0x661)](_0x31e32a=>_0x31e32a['isEnemy']())['length'];let _0x4e1765=0x0,_0x4d88ba=0x0;if(_0x2091db['match'](/front/i))_0x4e1765=_0x2eb316>=_0x2c3aba?_0x19b18a:_0x40cbe1;else{if(_0x2091db[_0x4fa28b(0x298)](/middle/i))'hnFWj'===_0x4fa28b(0x3b7)?this[_0x4fa28b(0x696)]():(_0x4e1765=(_0x19b18a+_0x40cbe1)/0x2,_0x12f833=-0x1);else _0x2091db[_0x4fa28b(0x298)](/back/i)&&('CNoLi'===_0x4fa28b(0xbed)?this[_0x4fa28b(0x9d2)]():_0x4e1765=_0x2eb316>=_0x2c3aba?_0x40cbe1:_0x19b18a);}if(_0x2091db[_0x4fa28b(0x298)](/head/i))_0x4d88ba=_0x36cfa9;else{if(_0x2091db[_0x4fa28b(0x298)](/center/i)){_0x4d88ba=(_0x36cfa9+_0x13a791)/0x2;if(_0x546105['battler']())_0x4d88ba+=_0x546105[_0x4fa28b(0x887)]()[_0x4fa28b(0xdd7)]/0x2;}else _0x2091db[_0x4fa28b(0x298)](/base/i)&&(_0x4d88ba=_0x13a791);}_0x546105[_0x4fa28b(0x9b8)](_0x4e1765,_0x4d88ba,_0x2956f1,_0x219652,_0x32cd84,_0x12f833),this[_0x4fa28b(0x318)]();},Window_BattleLog['prototype'][_0x54b1a4(0xae8)]=function(_0x42e916,_0x515488,_0x502cd1){const _0x16de91=_0x54b1a4;for(const _0x54e6fb of _0x42e916){if(_0x16de91(0x57f)===_0x16de91(0x57f)){if(!_0x54e6fb)continue;_0x54e6fb['jumpBattler'](_0x515488,_0x502cd1);}else return _0x2899cd[_0x16de91(0x387)]['Settings'][_0x16de91(0x6f0)][_0x16de91(0x820)];}this['callNextMethod']();};function _0x5da4(_0x3e3b7b,_0x5c9f10){const _0x323386=_0x3233();return _0x5da4=function(_0x5da458,_0x3bd885){_0x5da458=_0x5da458-0x1e6;let _0x5307d8=_0x323386[_0x5da458];return _0x5307d8;},_0x5da4(_0x3e3b7b,_0x5c9f10);}function Window_BattleMultiTarget(){const _0x388bcd=_0x54b1a4;this[_0x388bcd(0xbc1)](...arguments);}Window_BattleMultiTarget[_0x54b1a4(0x375)]=Object['create'](Window_Command['prototype']),Window_BattleMultiTarget[_0x54b1a4(0x375)][_0x54b1a4(0x3ac)]=Window_BattleMultiTarget,VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x916)]['MultiTarget']=VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x916)][_0x54b1a4(0x386)]||{},Window_BattleMultiTarget[_0x54b1a4(0x7f0)]=VisuMZ['BattleCore'][_0x54b1a4(0x916)][_0x54b1a4(0x386)][_0x54b1a4(0xbf3)]??0x118,Window_BattleMultiTarget[_0x54b1a4(0x906)]=VisuMZ[_0x54b1a4(0x387)]['Settings'][_0x54b1a4(0x386)]['BgType']??0x2,Window_BattleMultiTarget[_0x54b1a4(0xd54)]=VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x916)][_0x54b1a4(0x386)][_0x54b1a4(0x84e)]??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x916)][_0x54b1a4(0x386)]['AllActorsText']??_0x54b1a4(0x4a0),Window_BattleMultiTarget[_0x54b1a4(0xbc2)]=VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x916)]['MultiTarget'][_0x54b1a4(0x798)]??_0x54b1a4(0x480),Window_BattleMultiTarget['ACTOR_OFFSET_X']=VisuMZ[_0x54b1a4(0x387)]['Settings'][_0x54b1a4(0x386)]['ActorOffsetX']??0x0,Window_BattleMultiTarget[_0x54b1a4(0xa85)]=VisuMZ['BattleCore'][_0x54b1a4(0x916)][_0x54b1a4(0x386)]['ActorOffsetY']??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_X']=VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x916)]['MultiTarget']['EnemyOffsetX']??0x0,Window_BattleMultiTarget[_0x54b1a4(0x8cd)]=VisuMZ[_0x54b1a4(0x387)][_0x54b1a4(0x916)]['MultiTarget'][_0x54b1a4(0x5c7)]??0x0,Window_BattleMultiTarget[_0x54b1a4(0x375)][_0x54b1a4(0xbc1)]=function(_0x275903,_0x3696a7){const _0x49870f=_0x54b1a4;this['_forActor']=_0x3696a7,Window_Command[_0x49870f(0x375)][_0x49870f(0xbc1)][_0x49870f(0xd6c)](this,_0x275903),this['setBackgroundType'](Window_BattleMultiTarget[_0x49870f(0x906)]),this['deactivate'](),this[_0x49870f(0x5e6)](),this['deselect']();},Window_BattleMultiTarget[_0x54b1a4(0x375)][_0x54b1a4(0x369)]=function(){const _0x6fbb27=_0x54b1a4;return this[_0x6fbb27(0x6cb)];},Window_BattleMultiTarget[_0x54b1a4(0x375)][_0x54b1a4(0x58b)]=function(){const _0x210515=_0x54b1a4;let _0x3e813c=this[_0x210515(0x369)]()?Window_BattleMultiTarget[_0x210515(0x2a5)]:Window_BattleMultiTarget[_0x210515(0xbc2)];if(Imported[_0x210515(0x2e5)]&&Window_BattleMultiTarget[_0x210515(0xd54)]){if(_0x210515(0x997)==='zKStP')_0x18651b['BattleCore'][_0x210515(0x85e)][_0x210515(0xd6c)](this),this[_0x210515(0x955)]['length']<=0x0&&(this['_speed']=_0x184018['MIN_SAFE_INTEGER']);else{this[_0x210515(0x296)]=this[_0x210515(0x369)]()?'pagedown':'pageup',this[_0x210515(0xb9b)]=TextManager[_0x210515(0xa3e)](this[_0x210515(0x296)]);const _0x418249=VisuMZ['CoreEngine'][_0x210515(0x916)][_0x210515(0xa00)][_0x210515(0x5ea)];_0x3e813c=_0x418249['format'](this['_buttonText'],_0x3e813c);}}this[_0x210515(0x59f)](_0x3e813c,_0x210515(0xc47));},Window_BattleMultiTarget[_0x54b1a4(0x375)][_0x54b1a4(0x34c)]=function(_0x335ccf){const _0x4370a6=_0x54b1a4,_0x675300=this[_0x4370a6(0x347)](_0x335ccf);this[_0x4370a6(0x1f3)](),this[_0x4370a6(0x63a)](this[_0x4370a6(0x786)](_0x335ccf));const _0x189090=this[_0x4370a6(0xa51)](_0x335ccf),_0x34c9c2=this[_0x4370a6(0x9d8)](_0x189090)[_0x4370a6(0x495)],_0x22d1d8=_0x675300['x']+Math[_0x4370a6(0x8a3)]((_0x675300[_0x4370a6(0x495)]-_0x34c9c2)/0x2);this[_0x4370a6(0xb2c)](_0x189090,_0x22d1d8,_0x675300['y'],_0x675300[_0x4370a6(0x495)]);},Window_BattleMultiTarget[_0x54b1a4(0x375)]['update']=function(){const _0x2bba67=_0x54b1a4;Window_Command[_0x2bba67(0x375)]['update'][_0x2bba67(0xd6c)](this),this[_0x2bba67(0x45e)](),this[_0x2bba67(0xb60)]();},Window_BattleMultiTarget[_0x54b1a4(0x375)][_0x54b1a4(0x45e)]=function(){const _0x38231=_0x54b1a4;this[_0x38231(0x739)]=this[_0x38231(0x1fd)]();},Window_BattleMultiTarget[_0x54b1a4(0x375)][_0x54b1a4(0x1fd)]=function(){const _0x205b0=_0x54b1a4,_0x2b0ef6=BattleManager[_0x205b0(0x8e7)](),_0x3de18a=_0x2b0ef6&&_0x2b0ef6[_0x205b0(0xd45)]();if(!_0x3de18a)return![];const _0x2535ae=SceneManager[_0x205b0(0xc22)];if(this[_0x205b0(0x369)]()){if(_0x2535ae[_0x205b0(0x2d5)][_0x205b0(0xaae)]&&_0x2535ae['_actorWindow'][_0x205b0(0x489)][_0x205b0(0xc1c)])return!![];if(_0x2535ae[_0x205b0(0x8c2)]['active']&&_0x2535ae['_enemyWindow'][_0x205b0(0x489)][_0x205b0(0xc1c)])return!![];}else{if(_0x205b0(0x6da)!==_0x205b0(0x6da))return _0x2c1b75=_0x1843d6['round'](_0xd228e9*1.2),_0x23db1a['BattleCore'][_0x205b0(0x578)][_0x205b0(0xd6c)](this,_0x42a57e,_0x2f8f4b);else{if(_0x2535ae[_0x205b0(0x8c2)][_0x205b0(0xaae)]&&_0x2535ae[_0x205b0(0x8c2)]['_handlers']['pageup'])return!![];}}return![];},Window_BattleMultiTarget[_0x54b1a4(0x375)][_0x54b1a4(0xb60)]=function(){const _0x304aca=_0x54b1a4;if(!Imported[_0x304aca(0x2e5)])return;this[_0x304aca(0xb9b)]!==TextManager[_0x304aca(0xa3e)](this[_0x304aca(0x296)])&&this[_0x304aca(0x742)]();},Window_BattleMultiTarget[_0x54b1a4(0x375)][_0x54b1a4(0x84b)]=function(){const _0x2ed7cd=_0x54b1a4;if(this[_0x2ed7cd(0x739)]&&TouchInput['isClicked']()){const _0x1627a5=this[_0x2ed7cd(0x408)]();if(_0x1627a5>=0x0){if(_0x2ed7cd(0xb18)!==_0x2ed7cd(0xb18))return 0x1*this['_growY'];else{const _0x4bf2a8=this[_0x2ed7cd(0x369)]()?_0x2ed7cd(0xc1c):_0x2ed7cd(0x3cf);Input[_0x2ed7cd(0xa01)](_0x4bf2a8);}}}};